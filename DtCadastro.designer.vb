'------------------------------------------------------------------------------
' <auto-generated>
'     O código foi gerado por uma ferramenta.
'     Versão de Tempo de Execução:4.0.30319.42000
'
'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
'     o código for gerado novamente.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Base")>  _
Partial Public Class DtCadastroDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertLogin(instance As Login)
    End Sub
  Partial Private Sub UpdateLogin(instance As Login)
    End Sub
  Partial Private Sub DeleteLogin(instance As Login)
    End Sub
  Partial Private Sub InsertPermissoesLogin(instance As PermissoesLogin)
    End Sub
  Partial Private Sub UpdatePermissoesLogin(instance As PermissoesLogin)
    End Sub
  Partial Private Sub DeletePermissoesLogin(instance As PermissoesLogin)
    End Sub
  Partial Private Sub InsertPaises(instance As Paises)
    End Sub
  Partial Private Sub UpdatePaises(instance As Paises)
    End Sub
  Partial Private Sub DeletePaises(instance As Paises)
    End Sub
  Partial Private Sub InsertNacionalidades(instance As Nacionalidades)
    End Sub
  Partial Private Sub UpdateNacionalidades(instance As Nacionalidades)
    End Sub
  Partial Private Sub DeleteNacionalidades(instance As Nacionalidades)
    End Sub
  Partial Private Sub InsertEstados(instance As Estados)
    End Sub
  Partial Private Sub UpdateEstados(instance As Estados)
    End Sub
  Partial Private Sub DeleteEstados(instance As Estados)
    End Sub
  Partial Private Sub InsertCidade(instance As Cidade)
    End Sub
  Partial Private Sub UpdateCidade(instance As Cidade)
    End Sub
  Partial Private Sub DeleteCidade(instance As Cidade)
    End Sub
  Partial Private Sub InsertBairro(instance As Bairro)
    End Sub
  Partial Private Sub UpdateBairro(instance As Bairro)
    End Sub
  Partial Private Sub DeleteBairro(instance As Bairro)
    End Sub
  Partial Private Sub InsertDescricaoLogradouros(instance As DescricaoLogradouros)
    End Sub
  Partial Private Sub UpdateDescricaoLogradouros(instance As DescricaoLogradouros)
    End Sub
  Partial Private Sub DeleteDescricaoLogradouros(instance As DescricaoLogradouros)
    End Sub
  Partial Private Sub InsertEnderecos(instance As Enderecos)
    End Sub
  Partial Private Sub UpdateEnderecos(instance As Enderecos)
    End Sub
  Partial Private Sub DeleteEnderecos(instance As Enderecos)
    End Sub
  Partial Private Sub InsertFuncionarios(instance As Funcionarios)
    End Sub
  Partial Private Sub UpdateFuncionarios(instance As Funcionarios)
    End Sub
  Partial Private Sub DeleteFuncionarios(instance As Funcionarios)
    End Sub
  Partial Private Sub InsertDependentesFuncionarios(instance As DependentesFuncionarios)
    End Sub
  Partial Private Sub UpdateDependentesFuncionarios(instance As DependentesFuncionarios)
    End Sub
  Partial Private Sub DeleteDependentesFuncionarios(instance As DependentesFuncionarios)
    End Sub
  Partial Private Sub InsertVinculosParentais(instance As VinculosParentais)
    End Sub
  Partial Private Sub UpdateVinculosParentais(instance As VinculosParentais)
    End Sub
  Partial Private Sub DeleteVinculosParentais(instance As VinculosParentais)
    End Sub
  Partial Private Sub InsertDocumentos(instance As Documentos)
    End Sub
  Partial Private Sub UpdateDocumentos(instance As Documentos)
    End Sub
  Partial Private Sub DeleteDocumentos(instance As Documentos)
    End Sub
  Partial Private Sub InsertClientes(instance As Clientes)
    End Sub
  Partial Private Sub UpdateClientes(instance As Clientes)
    End Sub
  Partial Private Sub DeleteClientes(instance As Clientes)
    End Sub
  Partial Private Sub InsertCategoriasProdutos(instance As CategoriasProdutos)
    End Sub
  Partial Private Sub UpdateCategoriasProdutos(instance As CategoriasProdutos)
    End Sub
  Partial Private Sub DeleteCategoriasProdutos(instance As CategoriasProdutos)
    End Sub
  Partial Private Sub InsertSubCategoriasProduto(instance As SubCategoriasProduto)
    End Sub
  Partial Private Sub UpdateSubCategoriasProduto(instance As SubCategoriasProduto)
    End Sub
  Partial Private Sub DeleteSubCategoriasProduto(instance As SubCategoriasProduto)
    End Sub
  Partial Private Sub InsertUnidadeParametro(instance As UnidadeParametro)
    End Sub
  Partial Private Sub UpdateUnidadeParametro(instance As UnidadeParametro)
    End Sub
  Partial Private Sub DeleteUnidadeParametro(instance As UnidadeParametro)
    End Sub
  Partial Private Sub InsertUnidadesGeral(instance As UnidadesGeral)
    End Sub
  Partial Private Sub UpdateUnidadesGeral(instance As UnidadesGeral)
    End Sub
  Partial Private Sub DeleteUnidadesGeral(instance As UnidadesGeral)
    End Sub
  Partial Private Sub InsertProdutos(instance As Produtos)
    End Sub
  Partial Private Sub UpdateProdutos(instance As Produtos)
    End Sub
  Partial Private Sub DeleteProdutos(instance As Produtos)
    End Sub
  Partial Private Sub InsertImagemProduto(instance As ImagemProduto)
    End Sub
  Partial Private Sub UpdateImagemProduto(instance As ImagemProduto)
    End Sub
  Partial Private Sub DeleteImagemProduto(instance As ImagemProduto)
    End Sub
  Partial Private Sub InsertFabricantes(instance As Fabricantes)
    End Sub
  Partial Private Sub UpdateFabricantes(instance As Fabricantes)
    End Sub
  Partial Private Sub DeleteFabricantes(instance As Fabricantes)
    End Sub
  Partial Private Sub InsertAndarEstoque(instance As AndarEstoque)
    End Sub
  Partial Private Sub UpdateAndarEstoque(instance As AndarEstoque)
    End Sub
  Partial Private Sub DeleteAndarEstoque(instance As AndarEstoque)
    End Sub
  Partial Private Sub InsertEnderecoEstoque(instance As EnderecoEstoque)
    End Sub
  Partial Private Sub UpdateEnderecoEstoque(instance As EnderecoEstoque)
    End Sub
  Partial Private Sub DeleteEnderecoEstoque(instance As EnderecoEstoque)
    End Sub
  Partial Private Sub InsertEstoques(instance As Estoques)
    End Sub
  Partial Private Sub UpdateEstoques(instance As Estoques)
    End Sub
  Partial Private Sub DeleteEstoques(instance As Estoques)
    End Sub
  Partial Private Sub InsertQuadraEstoque(instance As QuadraEstoque)
    End Sub
  Partial Private Sub UpdateQuadraEstoque(instance As QuadraEstoque)
    End Sub
  Partial Private Sub DeleteQuadraEstoque(instance As QuadraEstoque)
    End Sub
  Partial Private Sub InsertRuaEstoque(instance As RuaEstoque)
    End Sub
  Partial Private Sub UpdateRuaEstoque(instance As RuaEstoque)
    End Sub
  Partial Private Sub DeleteRuaEstoque(instance As RuaEstoque)
    End Sub
  Partial Private Sub InsertPredioEstoque(instance As PredioEstoque)
    End Sub
  Partial Private Sub UpdatePredioEstoque(instance As PredioEstoque)
    End Sub
  Partial Private Sub DeletePredioEstoque(instance As PredioEstoque)
    End Sub
  Partial Private Sub InsertParceirosComerciais(instance As ParceirosComerciais)
    End Sub
  Partial Private Sub UpdateParceirosComerciais(instance As ParceirosComerciais)
    End Sub
  Partial Private Sub DeleteParceirosComerciais(instance As ParceirosComerciais)
    End Sub
  Partial Private Sub InsertFormasPgFornecedores(instance As FormasPgFornecedores)
    End Sub
  Partial Private Sub UpdateFormasPgFornecedores(instance As FormasPgFornecedores)
    End Sub
  Partial Private Sub DeleteFormasPgFornecedores(instance As FormasPgFornecedores)
    End Sub
  Partial Private Sub InsertVinculoProdutoFornecedor(instance As VinculoProdutoFornecedor)
    End Sub
  Partial Private Sub UpdateVinculoProdutoFornecedor(instance As VinculoProdutoFornecedor)
    End Sub
  Partial Private Sub DeleteVinculoProdutoFornecedor(instance As VinculoProdutoFornecedor)
    End Sub
  Partial Private Sub InsertBeneficios(instance As Beneficios)
    End Sub
  Partial Private Sub UpdateBeneficios(instance As Beneficios)
    End Sub
  Partial Private Sub DeleteBeneficios(instance As Beneficios)
    End Sub
  Partial Private Sub InsertCargos(instance As Cargos)
    End Sub
  Partial Private Sub UpdateCargos(instance As Cargos)
    End Sub
  Partial Private Sub DeleteCargos(instance As Cargos)
    End Sub
  Partial Private Sub InsertBeneficiosCargo(instance As BeneficiosCargo)
    End Sub
  Partial Private Sub UpdateBeneficiosCargo(instance As BeneficiosCargo)
    End Sub
  Partial Private Sub DeleteBeneficiosCargo(instance As BeneficiosCargo)
    End Sub
  Partial Private Sub InsertEscalaCargos(instance As EscalaCargos)
    End Sub
  Partial Private Sub UpdateEscalaCargos(instance As EscalaCargos)
    End Sub
  Partial Private Sub DeleteEscalaCargos(instance As EscalaCargos)
    End Sub
  Partial Private Sub InsertFerramentas(instance As Ferramentas)
    End Sub
  Partial Private Sub UpdateFerramentas(instance As Ferramentas)
    End Sub
  Partial Private Sub DeleteFerramentas(instance As Ferramentas)
    End Sub
  Partial Private Sub InsertVinculoFerramentasCargos(instance As VinculoFerramentasCargos)
    End Sub
  Partial Private Sub UpdateVinculoFerramentasCargos(instance As VinculoFerramentasCargos)
    End Sub
  Partial Private Sub DeleteVinculoFerramentasCargos(instance As VinculoFerramentasCargos)
    End Sub
  Partial Private Sub InsertInsumos(instance As Insumos)
    End Sub
  Partial Private Sub UpdateInsumos(instance As Insumos)
    End Sub
  Partial Private Sub DeleteInsumos(instance As Insumos)
    End Sub
  Partial Private Sub InsertEPI(instance As EPI)
    End Sub
  Partial Private Sub UpdateEPI(instance As EPI)
    End Sub
  Partial Private Sub DeleteEPI(instance As EPI)
    End Sub
  Partial Private Sub InsertEPIServico(instance As EPIServico)
    End Sub
  Partial Private Sub UpdateEPIServico(instance As EPIServico)
    End Sub
  Partial Private Sub DeleteEPIServico(instance As EPIServico)
    End Sub
  Partial Private Sub InsertInsumosServiços(instance As InsumosServiços)
    End Sub
  Partial Private Sub UpdateInsumosServiços(instance As InsumosServiços)
    End Sub
  Partial Private Sub DeleteInsumosServiços(instance As InsumosServiços)
    End Sub
  Partial Private Sub InsertServicos(instance As Servicos)
    End Sub
  Partial Private Sub UpdateServicos(instance As Servicos)
    End Sub
  Partial Private Sub DeleteServicos(instance As Servicos)
    End Sub
  Partial Private Sub InsertFerramentasServico(instance As FerramentasServico)
    End Sub
  Partial Private Sub UpdateFerramentasServico(instance As FerramentasServico)
    End Sub
  Partial Private Sub DeleteFerramentasServico(instance As FerramentasServico)
    End Sub
  Partial Private Sub InsertProfissionalServico(instance As ProfissionalServico)
    End Sub
  Partial Private Sub UpdateProfissionalServico(instance As ProfissionalServico)
    End Sub
  Partial Private Sub DeleteProfissionalServico(instance As ProfissionalServico)
    End Sub
  Partial Private Sub InsertChavesInterno(instance As ChavesInterno)
    End Sub
  Partial Private Sub UpdateChavesInterno(instance As ChavesInterno)
    End Sub
  Partial Private Sub DeleteChavesInterno(instance As ChavesInterno)
    End Sub
  Partial Private Sub InsertOrcamentoRapido(instance As OrcamentoRapido)
    End Sub
  Partial Private Sub UpdateOrcamentoRapido(instance As OrcamentoRapido)
    End Sub
  Partial Private Sub DeleteOrcamentoRapido(instance As OrcamentoRapido)
    End Sub
  Partial Private Sub InsertFornecedores(instance As Fornecedores)
    End Sub
  Partial Private Sub UpdateFornecedores(instance As Fornecedores)
    End Sub
  Partial Private Sub DeleteFornecedores(instance As Fornecedores)
    End Sub
  Partial Private Sub InsertEquipes(instance As Equipes)
    End Sub
  Partial Private Sub UpdateEquipes(instance As Equipes)
    End Sub
  Partial Private Sub DeleteEquipes(instance As Equipes)
    End Sub
  Partial Private Sub InsertColaboradoEquipe(instance As ColaboradoEquipe)
    End Sub
  Partial Private Sub UpdateColaboradoEquipe(instance As ColaboradoEquipe)
    End Sub
  Partial Private Sub DeleteColaboradoEquipe(instance As ColaboradoEquipe)
    End Sub
  Partial Private Sub InsertBASE_CERTIFICADO(instance As BASE_CERTIFICADO)
    End Sub
  Partial Private Sub UpdateBASE_CERTIFICADO(instance As BASE_CERTIFICADO)
    End Sub
  Partial Private Sub DeleteBASE_CERTIFICADO(instance As BASE_CERTIFICADO)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.CRM_BASE.My.MySettings.Default.BaseConnectionString3, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Login() As System.Data.Linq.Table(Of Login)
		Get
			Return Me.GetTable(Of Login)
		End Get
	End Property
	
	Public ReadOnly Property PermissoesLogin() As System.Data.Linq.Table(Of PermissoesLogin)
		Get
			Return Me.GetTable(Of PermissoesLogin)
		End Get
	End Property
	
	Public ReadOnly Property PermissoesUsuarios() As System.Data.Linq.Table(Of PermissoesUsuarios)
		Get
			Return Me.GetTable(Of PermissoesUsuarios)
		End Get
	End Property
	
	Public ReadOnly Property Paises() As System.Data.Linq.Table(Of Paises)
		Get
			Return Me.GetTable(Of Paises)
		End Get
	End Property
	
	Public ReadOnly Property Nacionalidades() As System.Data.Linq.Table(Of Nacionalidades)
		Get
			Return Me.GetTable(Of Nacionalidades)
		End Get
	End Property
	
	Public ReadOnly Property Estados() As System.Data.Linq.Table(Of Estados)
		Get
			Return Me.GetTable(Of Estados)
		End Get
	End Property
	
	Public ReadOnly Property Cidade() As System.Data.Linq.Table(Of Cidade)
		Get
			Return Me.GetTable(Of Cidade)
		End Get
	End Property
	
	Public ReadOnly Property Bairro() As System.Data.Linq.Table(Of Bairro)
		Get
			Return Me.GetTable(Of Bairro)
		End Get
	End Property
	
	Public ReadOnly Property DescricaoLogradouros() As System.Data.Linq.Table(Of DescricaoLogradouros)
		Get
			Return Me.GetTable(Of DescricaoLogradouros)
		End Get
	End Property
	
	Public ReadOnly Property Enderecos() As System.Data.Linq.Table(Of Enderecos)
		Get
			Return Me.GetTable(Of Enderecos)
		End Get
	End Property
	
	Public ReadOnly Property Funcionarios() As System.Data.Linq.Table(Of Funcionarios)
		Get
			Return Me.GetTable(Of Funcionarios)
		End Get
	End Property
	
	Public ReadOnly Property DependentesFuncionarios() As System.Data.Linq.Table(Of DependentesFuncionarios)
		Get
			Return Me.GetTable(Of DependentesFuncionarios)
		End Get
	End Property
	
	Public ReadOnly Property VinculosParentais() As System.Data.Linq.Table(Of VinculosParentais)
		Get
			Return Me.GetTable(Of VinculosParentais)
		End Get
	End Property
	
	Public ReadOnly Property VinculosDocumentos() As System.Data.Linq.Table(Of VinculosDocumentos)
		Get
			Return Me.GetTable(Of VinculosDocumentos)
		End Get
	End Property
	
	Public ReadOnly Property Documentos() As System.Data.Linq.Table(Of Documentos)
		Get
			Return Me.GetTable(Of Documentos)
		End Get
	End Property
	
	Public ReadOnly Property Clientes() As System.Data.Linq.Table(Of Clientes)
		Get
			Return Me.GetTable(Of Clientes)
		End Get
	End Property
	
	Public ReadOnly Property CategoriasProdutos() As System.Data.Linq.Table(Of CategoriasProdutos)
		Get
			Return Me.GetTable(Of CategoriasProdutos)
		End Get
	End Property
	
	Public ReadOnly Property SubCategoriasProduto() As System.Data.Linq.Table(Of SubCategoriasProduto)
		Get
			Return Me.GetTable(Of SubCategoriasProduto)
		End Get
	End Property
	
	Public ReadOnly Property UnidadeParametro() As System.Data.Linq.Table(Of UnidadeParametro)
		Get
			Return Me.GetTable(Of UnidadeParametro)
		End Get
	End Property
	
	Public ReadOnly Property UnidadesGeral() As System.Data.Linq.Table(Of UnidadesGeral)
		Get
			Return Me.GetTable(Of UnidadesGeral)
		End Get
	End Property
	
	Public ReadOnly Property Produtos() As System.Data.Linq.Table(Of Produtos)
		Get
			Return Me.GetTable(Of Produtos)
		End Get
	End Property
	
	Public ReadOnly Property ImagemProduto() As System.Data.Linq.Table(Of ImagemProduto)
		Get
			Return Me.GetTable(Of ImagemProduto)
		End Get
	End Property
	
	Public ReadOnly Property Fabricantes() As System.Data.Linq.Table(Of Fabricantes)
		Get
			Return Me.GetTable(Of Fabricantes)
		End Get
	End Property
	
	Public ReadOnly Property AndarEstoque() As System.Data.Linq.Table(Of AndarEstoque)
		Get
			Return Me.GetTable(Of AndarEstoque)
		End Get
	End Property
	
	Public ReadOnly Property EnderecoEstoque() As System.Data.Linq.Table(Of EnderecoEstoque)
		Get
			Return Me.GetTable(Of EnderecoEstoque)
		End Get
	End Property
	
	Public ReadOnly Property Estoques() As System.Data.Linq.Table(Of Estoques)
		Get
			Return Me.GetTable(Of Estoques)
		End Get
	End Property
	
	Public ReadOnly Property QuadraEstoque() As System.Data.Linq.Table(Of QuadraEstoque)
		Get
			Return Me.GetTable(Of QuadraEstoque)
		End Get
	End Property
	
	Public ReadOnly Property RuaEstoque() As System.Data.Linq.Table(Of RuaEstoque)
		Get
			Return Me.GetTable(Of RuaEstoque)
		End Get
	End Property
	
	Public ReadOnly Property PredioEstoque() As System.Data.Linq.Table(Of PredioEstoque)
		Get
			Return Me.GetTable(Of PredioEstoque)
		End Get
	End Property
	
	Public ReadOnly Property ParceirosComerciais() As System.Data.Linq.Table(Of ParceirosComerciais)
		Get
			Return Me.GetTable(Of ParceirosComerciais)
		End Get
	End Property
	
	Public ReadOnly Property FormasPgFornecedores() As System.Data.Linq.Table(Of FormasPgFornecedores)
		Get
			Return Me.GetTable(Of FormasPgFornecedores)
		End Get
	End Property
	
	Public ReadOnly Property VinculoProdutoFornecedor() As System.Data.Linq.Table(Of VinculoProdutoFornecedor)
		Get
			Return Me.GetTable(Of VinculoProdutoFornecedor)
		End Get
	End Property
	
	Public ReadOnly Property Beneficios() As System.Data.Linq.Table(Of Beneficios)
		Get
			Return Me.GetTable(Of Beneficios)
		End Get
	End Property
	
	Public ReadOnly Property Cargos() As System.Data.Linq.Table(Of Cargos)
		Get
			Return Me.GetTable(Of Cargos)
		End Get
	End Property
	
	Public ReadOnly Property BeneficiosCargo() As System.Data.Linq.Table(Of BeneficiosCargo)
		Get
			Return Me.GetTable(Of BeneficiosCargo)
		End Get
	End Property
	
	Public ReadOnly Property EscalaCargos() As System.Data.Linq.Table(Of EscalaCargos)
		Get
			Return Me.GetTable(Of EscalaCargos)
		End Get
	End Property
	
	Public ReadOnly Property Ferramentas() As System.Data.Linq.Table(Of Ferramentas)
		Get
			Return Me.GetTable(Of Ferramentas)
		End Get
	End Property
	
	Public ReadOnly Property VinculoFerramentasCargos() As System.Data.Linq.Table(Of VinculoFerramentasCargos)
		Get
			Return Me.GetTable(Of VinculoFerramentasCargos)
		End Get
	End Property
	
	Public ReadOnly Property Insumos() As System.Data.Linq.Table(Of Insumos)
		Get
			Return Me.GetTable(Of Insumos)
		End Get
	End Property
	
	Public ReadOnly Property EPI() As System.Data.Linq.Table(Of EPI)
		Get
			Return Me.GetTable(Of EPI)
		End Get
	End Property
	
	Public ReadOnly Property EPIServico() As System.Data.Linq.Table(Of EPIServico)
		Get
			Return Me.GetTable(Of EPIServico)
		End Get
	End Property
	
	Public ReadOnly Property InsumosServiços() As System.Data.Linq.Table(Of InsumosServiços)
		Get
			Return Me.GetTable(Of InsumosServiços)
		End Get
	End Property
	
	Public ReadOnly Property Servicos() As System.Data.Linq.Table(Of Servicos)
		Get
			Return Me.GetTable(Of Servicos)
		End Get
	End Property
	
	Public ReadOnly Property FerramentasServico() As System.Data.Linq.Table(Of FerramentasServico)
		Get
			Return Me.GetTable(Of FerramentasServico)
		End Get
	End Property
	
	Public ReadOnly Property ProfissionalServico() As System.Data.Linq.Table(Of ProfissionalServico)
		Get
			Return Me.GetTable(Of ProfissionalServico)
		End Get
	End Property
	
	Public ReadOnly Property ChavesInterno() As System.Data.Linq.Table(Of ChavesInterno)
		Get
			Return Me.GetTable(Of ChavesInterno)
		End Get
	End Property
	
	Public ReadOnly Property OrcamentoRapido() As System.Data.Linq.Table(Of OrcamentoRapido)
		Get
			Return Me.GetTable(Of OrcamentoRapido)
		End Get
	End Property
	
	Public ReadOnly Property Fornecedores() As System.Data.Linq.Table(Of Fornecedores)
		Get
			Return Me.GetTable(Of Fornecedores)
		End Get
	End Property
	
	Public ReadOnly Property Equipes() As System.Data.Linq.Table(Of Equipes)
		Get
			Return Me.GetTable(Of Equipes)
		End Get
	End Property
	
	Public ReadOnly Property ColaboradoEquipe() As System.Data.Linq.Table(Of ColaboradoEquipe)
		Get
			Return Me.GetTable(Of ColaboradoEquipe)
		End Get
	End Property
	
	Public ReadOnly Property VinculoProdutoServico() As System.Data.Linq.Table(Of VinculoProdutoServico)
		Get
			Return Me.GetTable(Of VinculoProdutoServico)
		End Get
	End Property
	
	Public ReadOnly Property VinculoProdutoProduto() As System.Data.Linq.Table(Of VinculoProdutoProduto)
		Get
			Return Me.GetTable(Of VinculoProdutoProduto)
		End Get
	End Property
	
	Public ReadOnly Property BASE_CERTIFICADO() As System.Data.Linq.Table(Of BASE_CERTIFICADO)
		Get
			Return Me.GetTable(Of BASE_CERTIFICADO)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaBairroEndereco")>  _
	Public Function AtualizaBairroEndereco(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdBairro", DbType:="Int")> ByVal idBairro As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdEndereco", DbType:="Int")> ByVal idEndereco As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idBairro, idEndereco)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereVinculoProdutoFornecedor")>  _
	Public Function InsereVinculoProdutoFornecedor(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdProduto", DbType:="Int")> ByVal idProduto As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFornecedor", DbType:="NText")> ByVal idFornecedor As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodFornecedor", DbType:="NText")> ByVal codFornecedor As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idProduto, idFornecedor, codFornecedor)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaCliente")>  _
	Public Function AtualizaCliente( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCliente", DbType:="Int")> ByVal idCliente As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RazaoSocial_nome", DbType:="NText")> ByVal razaoSocial_nome As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CPF_CNPJ", DbType:="NText")> ByVal cPF_CNPJ As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RG_IE", DbType:="NText")> ByVal rG_IE As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TipoPersonalidade", DbType:="Bit")> ByVal tipoPersonalidade As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CEP", DbType:="NText")> ByVal cEP As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdEndereco", DbType:="Int")> ByVal idEndereco As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Endereco", DbType:="NText")> ByVal endereco As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Numero", DbType:="Int")> ByVal numero As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Complemento", DbType:="NText")> ByVal complemento As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Bairro", DbType:="NText")> ByVal bairro As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cidade", DbType:="NText")> ByVal cidade As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Estado", DbType:="NText")> ByVal estado As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pais", DbType:="NText")> ByVal pais As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Telefone", DbType:="NText")> ByVal telefone As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CElular", DbType:="NText")> ByVal cElular As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Email", DbType:="NText")> ByVal email As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idCliente, razaoSocial_nome, cPF_CNPJ, rG_IE, tipoPersonalidade, cEP, idEndereco, endereco, numero, complemento, bairro, cidade, estado, pais, telefone, cElular, email)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaDadosNFProduto")>  _
	Public Function AtualizaDadosNFProduto(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdProduto", DbType:="Int")> ByVal idProduto As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodBarras", DbType:="NText")> ByVal codBarras As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NCM", DbType:="NText")> ByVal nCM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Altura", DbType:="Money")> ByVal altura As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Largura", DbType:="Money")> ByVal largura As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Profundidade", DbType:="Money")> ByVal profundidade As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Peso", DbType:="Money")> ByVal peso As System.Nullable(Of Decimal)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idProduto, codBarras, nCM, altura, largura, profundidade, peso)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaIdDependenteFuncionario")>  _
	Public Function AtualizaIdDependenteFuncionario(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFuncionario", DbType:="Int")> ByVal idFuncionario As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdDependente", DbType:="Int")> ByVal idDependente As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idFuncionario, idDependente)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaLogin")>  _
	Public Function AtualizaLogin(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdLogin", DbType:="Int")> ByVal idLogin As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NICK", DbType:="NText")> ByVal nICK As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pass", DbType:="NText")> ByVal pass As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdColaborador", DbType:="Int")> ByVal idColaborador As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal idpermissoes As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idLogin, nICK, pass, idColaborador, idpermissoes)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaParceiro")>  _
	Public Function AtualizaParceiro( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdParceiro", DbType:="Int")> ByVal idParceiro As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RazaoSocial_nome", DbType:="NText")> ByVal razaoSocial_nome As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CPF_CNPJ", DbType:="NText")> ByVal cPF_CNPJ As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RG_IE", DbType:="NText")> ByVal rG_IE As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TipoPersonalidade", DbType:="Bit")> ByVal tipoPersonalidade As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CEP", DbType:="NText")> ByVal cEP As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdEndereco", DbType:="Int")> ByVal idEndereco As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Endereco", DbType:="NText")> ByVal endereco As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Numero", DbType:="Int")> ByVal numero As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Complemento", DbType:="NText")> ByVal complemento As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Bairro", DbType:="NText")> ByVal bairro As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cidade", DbType:="NText")> ByVal cidade As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Estado", DbType:="NText")> ByVal estado As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pais", DbType:="NText")> ByVal pais As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Telefone", DbType:="NText")> ByVal telefone As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CElular", DbType:="NText")> ByVal cElular As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Email", DbType:="NText")> ByVal email As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TipoParceiro", DbType:="Int")> ByVal tipoParceiro As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idParceiro, razaoSocial_nome, cPF_CNPJ, rG_IE, tipoPersonalidade, cEP, idEndereco, endereco, numero, complemento, bairro, cidade, estado, pais, telefone, cElular, email, tipoParceiro)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereAndarEstoque")>  _
	Public Function InsereAndarEstoque(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdPredioEstoque", DbType:="Int")> ByVal idPredioEstoque As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeMatriz", DbType:="NText")> ByVal nomeMatriz As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idPredioEstoque, nomeMatriz)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereBairro")>  _
	Public Function InsereBairro(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCidade", DbType:="Int")> ByVal idCidade As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idCidade, descricao)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereCategoriaProduto")>  _
	Public Function InsereCategoriaProduto(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereCidade")>  _
	Public Function InsereCidade(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdEstado", DbType:="Int")> ByVal idEstado As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idEstado, descricao)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereDependenteFuncionario")>  _
	Public Function InsereDependenteFuncionario(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFuncionario", DbType:="Int")> ByVal idFuncionario As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nome", DbType:="NText")> ByVal nome As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdVinculo", DbType:="Int")> ByVal idVinculo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Vinculo", DbType:="NText")> ByVal vinculo As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idFuncionario, nome, idVinculo, vinculo)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereDescricaoEndereco")>  _
	Public Function InsereDescricaoEndereco(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Abreviacao", DbType:="NText")> ByVal abreviacao As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao, abreviacao)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereDocumento")>  _
	Public Function InsereDocumento(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Sigla", DbType:="NText")> ByVal sigla As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Mascara", DbType:="NText")> ByVal mascara As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao, sigla, mascara)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereEndereco")>  _
	Public Function InsereEndereco(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdBairro", DbType:="Int")> ByVal idBairro As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CEP", DbType:="Int")> ByVal cEP As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdAbreviacao", DbType:="Int")> ByVal idAbreviacao As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idBairro, descricao, cEP, idAbreviacao)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereEnderecoEstoque")>  _
	Public Function InsereEnderecoEstoque(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdAndarEstoque", DbType:="Int")> ByVal idAndarEstoque As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeMatriz", DbType:="NText")> ByVal nomeMatriz As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idAndarEstoque, nomeMatriz)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereEstado")>  _
	Public Function InsereEstado(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdPais", DbType:="Int")> ByVal idPais As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Sigla", DbType:="NText")> ByVal sigla As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodTel", DbType:="Int")> ByVal codTel As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idPais, descricao, sigla, codTel)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereEstoque")>  _
	Public Function InsereEstoque(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeEstoque", DbType:="NText")> ByVal nomeEstoque As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CepEstoque", DbType:="NText")> ByVal cepEstoque As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Idendereco", DbType:="Int")> ByVal idendereco As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Endereco", DbType:="NText")> ByVal endereco As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NText")> ByVal bairro As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NText")> ByVal cidade As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NText")> ByVal estado As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NText")> ByVal pais As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal numero As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Complemento", DbType:="NText")> ByVal complemento As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), nomeEstoque, cepEstoque, idendereco, endereco, bairro, cidade, estado, pais, numero, complemento)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Inserefabricante")>  _
	Public Function Inserefabricante(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Fabricante", DbType:="NText")> ByVal fabricante As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fabricante)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereImagemProduto")>  _
	Public Function InsereImagemProduto(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdProduto", DbType:="Int")> ByVal idProduto As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Imagem", DbType:="Image")> ByVal imagem As System.Data.Linq.Binary) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idProduto, imagem)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereLogin")>  _
	Public Function InsereLogin(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NICK", DbType:="NText")> ByVal nICK As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pass", DbType:="NText")> ByVal pass As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdColaborador", DbType:="Int")> ByVal idColaborador As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal idpermissoes As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), nICK, pass, idColaborador, idpermissoes)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNacionalidade")>  _
	Public Function InsereNacionalidade(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nacionalidade", DbType:="NText")> ByVal nacionalidade As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdPais", DbType:="Int")> ByVal idPais As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pais", DbType:="NText")> ByVal pais As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), nacionalidade, idPais, pais)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovaEscalaCargo")>  _
	Public Function InsereNovaEscalaCargo(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCargo", DbType:="Int")> ByVal idCargo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DiaDaSemana", DbType:="Int")> ByVal diaDaSemana As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="HrEntrada", DbType:="Time")> ByVal hrEntrada As System.Nullable(Of System.TimeSpan), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="HrSaida", DbType:="Time")> ByVal hrSaida As System.Nullable(Of System.TimeSpan), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Intervalo", DbType:="Time")> ByVal intervalo As System.Nullable(Of System.TimeSpan), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FolgaEscalaEquipe", DbType:="Bit")> ByVal folgaEscalaEquipe As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idCargo, diaDaSemana, hrEntrada, hrSaida, intervalo, folgaEscalaEquipe)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovaFerramenta")>  _
	Public Function InsereNovaFerramenta(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NVinculado", DbType:="Bit")> ByVal nVinculado As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Modulo", DbType:="NText")> ByVal modulo As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao, nVinculado, modulo)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovaFerramentaCargo")>  _
	Public Function InsereNovaFerramentaCargo(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCargo", DbType:="Int")> ByVal idCargo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFerramenta", DbType:="Int")> ByVal idFerramenta As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idCargo, idFerramenta, descricao)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovaFormaPgFornecedor")>  _
	Public Function InsereNovaFormaPgFornecedor(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFornecedor", DbType:="Int")> ByVal idFornecedor As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MaximoPc", DbType:="Int")> ByVal maximoPc As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Intervalo", DbType:="Int")> ByVal intervalo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="D_M", DbType:="Bit")> ByVal d_M As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal idforma As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idFornecedor, maximoPc, intervalo, d_M, idforma)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovaUnidade")>  _
	Public Function InsereNovaUnidade(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Sigla", DbType:="NText")> ByVal sigla As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao, sigla)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovaUnidadeFt_X")>  _
	Public Function InsereNovaUnidadeFt_X(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdUnidade", DbType:="Int")> ByVal idUnidade As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal ft_X As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ChaveValidada", DbType:="Int")> ByVal chaveValidada As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Operacao", DbType:="Bit")> ByVal operacao As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idUnidade, ft_X, chaveValidada, operacao)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoBeneficio")>  _
	Public Function InsereNovoBeneficio(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoBeneficioCargo")>  _
	Public Function InsereNovoBeneficioCargo(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCargo", DbType:="Int")> ByVal idCargo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdBeneficio", DbType:="Int")> ByVal idBeneficio As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Desconto", DbType:="Bit")> ByVal desconto As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Valor", DbType:="Money")> ByVal valor As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Atribuicao", DbType:="NText")> ByVal atribuicao As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idCargo, idBeneficio, descricao, desconto, valor, atribuicao)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoEPI")>  _
	Public Function InsereNovoEPI(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFerramenta", DbType:="Int")> ByVal idFerramenta As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UsoComum", DbType:="Bit")> ByVal usoComum As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao, idFerramenta, usoComum)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoEPIServico")>  _
	Public Function InsereNovoEPIServico(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdEPI", DbType:="Int")> ByVal idEPI As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServico", DbType:="Int")> ByVal idServico As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idEPI, idServico)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoFerramentaServico")>  _
	Public Function InsereNovoFerramentaServico(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFerramenta", DbType:="Int")> ByVal idFerramenta As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServico", DbType:="Int")> ByVal idServico As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Qtdade", DbType:="Int")> ByVal qtdade As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idFerramenta, idServico, qtdade)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoInsumo")>  _
	Public Function InsereNovoInsumo(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFerramenta", DbType:="Int")> ByVal idFerramenta As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UsoComum", DbType:="Bit")> ByVal usoComum As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao, idFerramenta, usoComum)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoInsumoServico")>  _
	Public Function InsereNovoInsumoServico(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdInsumo", DbType:="Int")> ByVal idInsumo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServico", DbType:="Int")> ByVal idServico As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Qtdade", DbType:="Int")> ByVal qtdade As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idInsumo, idServico, qtdade)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoProfissionalServico")>  _
	Public Function InsereNovoProfissionalServico(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Idprofissional", DbType:="Int")> ByVal idprofissional As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServico", DbType:="Int")> ByVal idServico As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Qtdade", DbType:="Int")> ByVal qtdade As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idprofissional, idServico, qtdade)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InserePais")>  _
	Public Function InserePais(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Sigla", DbType:="NText")> ByVal sigla As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodTel", DbType:="Int")> ByVal codTel As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao, sigla, codTel)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereParceiroComercial")>  _
	Public Function InsereParceiroComercial( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RazaoSocial_nome", DbType:="NText")> ByVal razaoSocial_nome As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CPF_CNPJ", DbType:="NText")> ByVal cPF_CNPJ As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RG_IE", DbType:="NText")> ByVal rG_IE As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TipoPersonalidade", DbType:="Bit")> ByVal tipoPersonalidade As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CEP", DbType:="NText")> ByVal cEP As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdEndereco", DbType:="Int")> ByVal idEndereco As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Endereco", DbType:="NText")> ByVal endereco As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Numero", DbType:="Int")> ByVal numero As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Complemento", DbType:="NText")> ByVal complemento As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Bairro", DbType:="NText")> ByVal bairro As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cidade", DbType:="NText")> ByVal cidade As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Estado", DbType:="NText")> ByVal estado As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pais", DbType:="NText")> ByVal pais As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Telefone", DbType:="NText")> ByVal telefone As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CElular", DbType:="NText")> ByVal cElular As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Email", DbType:="NText")> ByVal email As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TipoParceiro", DbType:="Int")> ByVal tipoParceiro As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), razaoSocial_nome, cPF_CNPJ, rG_IE, tipoPersonalidade, cEP, idEndereco, endereco, numero, complemento, bairro, cidade, estado, pais, telefone, cElular, email, tipoParceiro)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InserePredioEstoque")>  _
	Public Function InserePredioEstoque(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdRuaEstoque", DbType:="Int")> ByVal idRuaEstoque As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeMatriz", DbType:="NText")> ByVal nomeMatriz As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idRuaEstoque, nomeMatriz)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereQuadraEstoque")>  _
	Public Function InsereQuadraEstoque(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Idestoque", DbType:="Int")> ByVal idestoque As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeMatriz", DbType:="NText")> ByVal nomeMatriz As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idestoque, nomeMatriz)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereRuaEstoque")>  _
	Public Function InsereRuaEstoque(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdQuadra", DbType:="Int")> ByVal idQuadra As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeMatriz", DbType:="NText")> ByVal nomeMatriz As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idQuadra, nomeMatriz)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereSubcategoriaProduto")>  _
	Public Function InsereSubcategoriaProduto(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Idcategoria", DbType:="Int")> ByVal idcategoria As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idcategoria, descricao)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereVinculoParental")>  _
	Public Function InsereVinculoParental(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereVinculoParental_Documento")>  _
	Public Function InsereVinculoParental_Documento(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdVinculo", DbType:="Int")> ByVal idVinculo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdDocumento", DbType:="Int")> ByVal idDocumento As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idVinculo, idDocumento)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaDadosChaveInterno")>  _
	Public Function AtualizaDadosChaveInterno(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdChave", DbType:="Int")> ByVal idChave As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdIPInt", DbType:="NText")> ByVal idIPInt As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MAC", DbType:="NText")> ByVal mAC As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IpExt", DbType:="NText")> ByVal ipExt As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idChave, idIPInt, mAC, ipExt)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaMarkupProduto")>  _
	Public Function AtualizaMarkupProduto(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdProduto", DbType:="Int")> ByVal idProduto As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Markup", DbType:="Money")> ByVal markup As System.Nullable(Of Decimal)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idProduto, markup)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaMarkupServico")>  _
	Public Function AtualizaMarkupServico(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServico", DbType:="Int")> ByVal idServico As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Markup", DbType:="Money")> ByVal markup As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="VlrCusto", DbType:="Money")> ByVal vlrCusto As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="VlrRevenda", DbType:="Money")> ByVal vlrRevenda As System.Nullable(Of Decimal)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idServico, markup, vlrCusto, vlrRevenda)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereOrcamentoRapido")>  _
	Public Function InsereOrcamentoRapido(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DataORc", DbType:="Date")> ByVal dataORc As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="HrHorc", DbType:="Time")> ByVal hrHorc As System.Nullable(Of System.TimeSpan), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdVeiculo", DbType:="Int")> ByVal idVeiculo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdOrcamento", DbType:="Int")> ByVal idOrcamento As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Concluido", DbType:="Bit")> ByVal concluido As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), dataORc, hrHorc, idVeiculo, idOrcamento, concluido)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoServico")>  _
	Public Function InsereNovoServico(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TME", DbType:="Time")> ByVal tME As System.Nullable(Of System.TimeSpan), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Status", DbType:="Bit")> ByVal status As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Markup", DbType:="Money")> ByVal markup As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="VlrCusto", DbType:="Money")> ByVal vlrCusto As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="VlrVeda", DbType:="Money")> ByVal vlrVeda As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Ferramenta", DbType:="NText")> ByVal ferramenta As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCAtegoria", DbType:="Int")> ByVal idCAtegoria As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdSubCategoria", DbType:="Int")> ByVal idSubCategoria As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServicoInt", DbType:="Int")> ByVal idServicoInt As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao, tME, status, markup, vlrCusto, vlrVeda, ferramenta, idCAtegoria, idSubCategoria, idServicoInt)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoCargo")>  _
	Public Function InsereNovoCargo(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RemuneracaoBase", DbType:="Money")> ByVal remuneracaoBase As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ComVenda", DbType:="Money")> ByVal comVenda As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RemMensal", DbType:="Bit")> ByVal remMensal As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RemHR", DbType:="Bit")> ByVal remHR As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Fechamento", DbType:="Int")> ByVal fechamento As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdExterno", DbType:="Int")> ByVal idExterno As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao, remuneracaoBase, comVenda, remMensal, remHR, fechamento, idExterno)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletaDependenteColaborador")>  _
	Public Function DeletaDependenteColaborador(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdDependente", DbType:="Int")> ByVal idDependente As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdColaborador", DbType:="Int")> ByVal idColaborador As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idDependente, idColaborador)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaCargo")>  _
	Public Function AtualizaCargo(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RemuneracaoBase", DbType:="Money")> ByVal remuneracaoBase As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ComVenda", DbType:="Money")> ByVal comVenda As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RemMensal", DbType:="Bit")> ByVal remMensal As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RemHR", DbType:="Bit")> ByVal remHR As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Fechamento", DbType:="Int")> ByVal fechamento As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdInterno", DbType:="Int")> ByVal idInterno As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdExterno", DbType:="Int")> ByVal idExterno As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao, remuneracaoBase, comVenda, remMensal, remHR, fechamento, idInterno, idExterno)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaVinculoExt_Funcionario")>  _
	Public Function AtualizaVinculoExt_Funcionario(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFuncionario", DbType:="Int")> ByVal idFuncionario As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdExterno", DbType:="Int")> ByVal idExterno As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idFuncionario, idExterno)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovaEquipe")>  _
	Public Function InsereNovaEquipe(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdLider", DbType:="Int")> ByVal idLider As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeLider", DbType:="NText")> ByVal nomeLider As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CargoLider", DbType:="NText")> ByVal cargoLider As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UrlImagemLider", DbType:="NText")> ByVal urlImagemLider As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idLider, nomeLider, cargoLider, urlImagemLider)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoColaboradorEquipe")>  _
	Public Function InsereNovoColaboradorEquipe(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdLider", DbType:="Int")> ByVal idLider As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeLider", DbType:="NText")> ByVal nomeLider As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CargoLider", DbType:="NText")> ByVal cargoLider As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UrlImagemLider", DbType:="NText")> ByVal urlImagemLider As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFuncionario", DbType:="Int")> ByVal idFuncionario As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeFuncionario", DbType:="NText")> ByVal nomeFuncionario As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CargoFuncionario", DbType:="NText")> ByVal cargoFuncionario As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UrlImagemFuncionario", DbType:="NText")> ByVal urlImagemFuncionario As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idLider, nomeLider, cargoLider, urlImagemLider, idFuncionario, nomeFuncionario, cargoFuncionario, urlImagemFuncionario)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletaNovoColaboradorEquipe")>  _
	Public Function DeletaNovoColaboradorEquipe(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdLider", DbType:="Int")> ByVal idLider As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFuncionario", DbType:="Int")> ByVal idFuncionario As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idLider, idFuncionario)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaVinculoExt_Servico")>  _
	Public Function AtualizaVinculoExt_Servico(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServico", DbType:="Int")> ByVal idServico As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServicoInt", DbType:="Int")> ByVal idServicoInt As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idServico, idServicoInt)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaServico")>  _
	Public Function AtualizaServico(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServico", DbType:="Int")> ByVal idServico As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TME", DbType:="Time")> ByVal tME As System.Nullable(Of System.TimeSpan)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idServico, descricao, tME)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletaProfissionalServico")>  _
	Public Function DeletaProfissionalServico(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServico", DbType:="Int")> ByVal idServico As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idServico)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletaFerramentaServico")>  _
	Public Function DeletaFerramentaServico(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServico", DbType:="Int")> ByVal idServico As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idServico)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaIdVinculoExtCliente")>  _
	Public Function AtualizaIdVinculoExtCliente(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCliente", DbType:="Int")> ByVal idCliente As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdClienteExt", DbType:="Int")> ByVal idClienteExt As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idCliente, idClienteExt)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoFornecedor")>  _
	Public Function InsereNovoFornecedor( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Doc", DbType:="NText")> ByVal doc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nome", DbType:="NText")> ByVal nome As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cep", DbType:="NText")> ByVal cep As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdEndereco", DbType:="Int")> ByVal idEndereco As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Numero", DbType:="Int")> ByVal numero As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Compl", DbType:="NText")> ByVal compl As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdBairro", DbType:="Int")> ByVal idBairro As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Bairro", DbType:="NText")> ByVal bairro As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCidade", DbType:="Int")> ByVal idCidade As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cidade", DbType:="NText")> ByVal cidade As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdEstado", DbType:="Int")> ByVal idEstado As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Estado", DbType:="NText")> ByVal estado As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdPais", DbType:="Int")> ByVal idPais As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pais", DbType:="NText")> ByVal pais As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Telefone", DbType:="NText")> ByVal telefone As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Apelido", DbType:="NText")> ByVal apelido As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Fornecedor", DbType:="Bit")> ByVal fornecedor As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Prestador", DbType:="Bit")> ByVal prestador As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Comissionado", DbType:="Bit")> ByVal comissionado As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Beneficiario", DbType:="Bit")> ByVal beneficiario As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IE", DbType:="NText")> ByVal iE As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), doc, nome, cep, idEndereco, numero, compl, idBairro, bairro, idCidade, cidade, idEstado, estado, idPais, pais, telefone, apelido, fornecedor, prestador, comissionado, beneficiario, iE)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaNCM")>  _
	Public Function AtualizaNCM(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdProduto", DbType:="Int")> ByVal idProduto As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NCM", DbType:="NText")> ByVal nCM As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idProduto, nCM)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaEAN")>  _
	Public Function AtualizaEAN(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdProduto", DbType:="Int")> ByVal idProduto As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodBarras", DbType:="NText")> ByVal codBarras As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idProduto, codBarras)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaProduto")>  _
	Public Function AtualizaProduto( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdProduto", DbType:="Int")> ByVal idProduto As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFabricante", DbType:="Int")> ByVal idFabricante As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Fabricante", DbType:="NText")> ByVal fabricante As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodFabricante", DbType:="NText")> ByVal codFabricante As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodBarras", DbType:="NText")> ByVal codBarras As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCategoria", DbType:="Int")> ByVal idCategoria As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Categoria", DbType:="NText")> ByVal categoria As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IDSubCategoria", DbType:="Int")> ByVal iDSubCategoria As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SubCategoria", DbType:="NText")> ByVal subCategoria As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NCM", DbType:="NText")> ByVal nCM As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdUnComp", DbType:="Int")> ByVal idUnComp As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UnCompra", DbType:="NText")> ByVal unCompra As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdUnVenda", DbType:="Int")> ByVal idUnVenda As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UnVenda", DbType:="NText")> ByVal unVenda As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="VendaDireta", DbType:="Bit")> ByVal vendaDireta As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Insumo", DbType:="Bit")> ByVal insumo As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UsoInterno", DbType:="Bit")> ByVal usoInterno As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Reaproveitamento", DbType:="Bit")> ByVal reaproveitamento As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Altura", DbType:="Money")> ByVal altura As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Largura", DbType:="Money")> ByVal largura As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Profundidade", DbType:="Money")> ByVal profundidade As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Peso", DbType:="Money")> ByVal peso As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ControleValidade", DbType:="Bit")> ByVal controleValidade As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Validade", DbType:="Int")> ByVal validade As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Markup", DbType:="Money")> ByVal markup As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DisponvelOnLine", DbType:="Bit")> ByVal disponvelOnLine As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pctge", DbType:="Int")> ByVal pctge As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="QtMin", DbType:="Int")> ByVal qtMin As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="QtMax", DbType:="Int")> ByVal qtMax As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdProdutoExt", DbType:="Int")> ByVal idProdutoExt As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdTrib", DbType:="Int")> ByVal idTrib As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idProduto, descricao, idFabricante, fabricante, codFabricante, codBarras, idCategoria, categoria, iDSubCategoria, subCategoria, nCM, idUnComp, unCompra, idUnVenda, unVenda, vendaDireta, insumo, usoInterno, reaproveitamento, altura, largura, profundidade, peso, controleValidade, validade, markup, disponvelOnLine, pctge, qtMin, qtMax, idProdutoExt, idTrib)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoProduto")>  _
	Public Function InsereNovoProduto( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descricao", DbType:="NText")> ByVal descricao As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFabricante", DbType:="Int")> ByVal idFabricante As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Fabricante", DbType:="NText")> ByVal fabricante As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodFabricante", DbType:="NText")> ByVal codFabricante As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CodBarras", DbType:="NText")> ByVal codBarras As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCategoria", DbType:="Int")> ByVal idCategoria As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Categoria", DbType:="NText")> ByVal categoria As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IDSubCategoria", DbType:="Int")> ByVal iDSubCategoria As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SubCategoria", DbType:="NText")> ByVal subCategoria As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NCM", DbType:="NText")> ByVal nCM As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdUnComp", DbType:="Int")> ByVal idUnComp As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UnCompra", DbType:="NText")> ByVal unCompra As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdUnVenda", DbType:="Int")> ByVal idUnVenda As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UnVenda", DbType:="NText")> ByVal unVenda As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="VendaDireta", DbType:="Bit")> ByVal vendaDireta As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Insumo", DbType:="Bit")> ByVal insumo As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UsoInterno", DbType:="Bit")> ByVal usoInterno As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Reaproveitamento", DbType:="Bit")> ByVal reaproveitamento As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Altura", DbType:="Money")> ByVal altura As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Largura", DbType:="Money")> ByVal largura As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Profundidade", DbType:="Money")> ByVal profundidade As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Peso", DbType:="Money")> ByVal peso As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ControlaValidade", DbType:="Bit")> ByVal controlaValidade As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Validade", DbType:="Int")> ByVal validade As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Markup", DbType:="Money")> ByVal markup As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DisponvelOnLine", DbType:="Bit")> ByVal disponvelOnLine As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pctge", DbType:="Int")> ByVal pctge As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="QtMin", DbType:="Int")> ByVal qtMin As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="QtMax", DbType:="Int")> ByVal qtMax As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdProdutoExt", DbType:="Int")> ByVal idProdutoExt As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdTrib", DbType:="Int")> ByVal idTrib As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descricao, idFabricante, fabricante, codFabricante, codBarras, idCategoria, categoria, iDSubCategoria, subCategoria, nCM, idUnComp, unCompra, idUnVenda, unVenda, vendaDireta, insumo, usoInterno, reaproveitamento, altura, largura, profundidade, peso, controlaValidade, validade, markup, disponvelOnLine, pctge, qtMin, qtMax, idProdutoExt, idTrib)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletaImagemProduto")>  _
	Public Function DeletaImagemProduto(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdImagem", DbType:="Int")> ByVal idImagem As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idImagem)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletaServico")>  _
	Public Function DeletaServico(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServico", DbType:="Int")> ByVal idServico As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idServico)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoVinculoServico")>  _
	Public Function InsereNovoVinculoServico(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdProduto", DbType:="Int")> ByVal idProduto As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServico", DbType:="Int")> ByVal idServico As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idProduto, idServico)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletaVinculoServico")>  _
	Public Function DeletaVinculoServico(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServico", DbType:="Int")> ByVal idServico As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idServico)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletaVinculoProduto")>  _
	Public Function DeletaVinculoProduto(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdServico", DbType:="Int")> ByVal idServico As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idServico)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereNovoVinculoProduto")>  _
	Public Function InsereNovoVinculoProduto(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdProduto", DbType:="Int")> ByVal idProduto As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdProdutoFinal", DbType:="Int")> ByVal idProdutoFinal As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Qt", DbType:="Int")> ByVal qt As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idProduto, idProdutoFinal, qt)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletaCliente")>  _
	Public Function DeletaCliente(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCliente", DbType:="Int")> ByVal idCliente As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idCliente)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereCliente")>  _
	Public Function InsereCliente( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RazaoSocial_nome", DbType:="NText")> ByVal razaoSocial_nome As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CPF_CNPJ", DbType:="NText")> ByVal cPF_CNPJ As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RG_IE", DbType:="NText")> ByVal rG_IE As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TipoPersonalidade", DbType:="Bit")> ByVal tipoPersonalidade As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CEP", DbType:="NText")> ByVal cEP As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdEndereco", DbType:="Int")> ByVal idEndereco As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Endereco", DbType:="NText")> ByVal endereco As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Numero", DbType:="Int")> ByVal numero As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Complemento", DbType:="NText")> ByVal complemento As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Bairro", DbType:="NText")> ByVal bairro As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cidade", DbType:="NText")> ByVal cidade As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Estado", DbType:="NText")> ByVal estado As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pais", DbType:="NText")> ByVal pais As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Telefone", DbType:="NText")> ByVal telefone As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CElular", DbType:="NText")> ByVal cElular As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Email", DbType:="NText")> ByVal email As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdClienteExt", DbType:="Int")> ByVal idClienteExt As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Apelido", DbType:="NText")> ByVal apelido As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), razaoSocial_nome, cPF_CNPJ, rG_IE, tipoPersonalidade, cEP, idEndereco, endereco, numero, complemento, bairro, cidade, estado, pais, telefone, cElular, email, idClienteExt, apelido)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AtualizaFuncionario")>  _
	Public Function AtualizaFuncionario( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdFuncionario", DbType:="Int")> ByVal idFuncionario As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeCompleto", DbType:="NText")> ByVal nomeCompleto As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CPF", DbType:="NText")> ByVal cPF As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RG", DbType:="NText")> ByVal rG As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomePai", DbType:="NText")> ByVal nomePai As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeMae", DbType:="NText")> ByVal nomeMae As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CEP", DbType:="NText")> ByVal cEP As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdEndereco", DbType:="Int")> ByVal idEndereco As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Endereco", DbType:="NText")> ByVal endereco As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Numero", DbType:="Int")> ByVal numero As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Complemento", DbType:="NText")> ByVal complemento As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Bairro", DbType:="NText")> ByVal bairro As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cidade", DbType:="NText")> ByVal cidade As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Estado", DbType:="NText")> ByVal estado As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pais", DbType:="NText")> ByVal pais As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Telefone", DbType:="NText")> ByVal telefone As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CElular", DbType:="NText")> ByVal cElular As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Email", DbType:="NText")> ByVal email As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TelefoneCont1", DbType:="NText")> ByVal telefoneCont1 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeCont1", DbType:="NText")> ByVal nomeCont1 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TelefoneCont2", DbType:="NText")> ByVal telefoneCont2 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeCont2", DbType:="NText")> ByVal nomeCont2 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TelefoneCont3", DbType:="NText")> ByVal telefoneCont3 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeCont3", DbType:="NText")> ByVal nomeCont3 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Foto", DbType:="Image")> ByVal foto As System.Data.Linq.Binary,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCargo", DbType:="Int")> ByVal idCargo As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cargo", DbType:="NText")> ByVal cargo As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdNacionalidade", DbType:="Int")> ByVal idNacionalidade As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nacionalidade", DbType:="NText")> ByVal nacionalidade As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NumBanco", DbType:="Int")> ByVal numBanco As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeBanco", DbType:="NText")> ByVal nomeBanco As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdBanco", DbType:="Int")> ByVal idBanco As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Ag", DbType:="NText")> ByVal ag As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Conta", DbType:="NText")> ByVal conta As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Op", DbType:="NText")> ByVal op As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TipoConta", DbType:="Bit")> ByVal tipoConta As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TipoDocEspec", DbType:="NText")> ByVal tipoDocEspec As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NUmeroDoDOC", DbType:="NText")> ByVal nUmeroDoDOC As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idFuncionario, nomeCompleto, cPF, rG, nomePai, nomeMae, cEP, idEndereco, endereco, numero, complemento, bairro, cidade, estado, pais, telefone, cElular, email, telefoneCont1, nomeCont1, telefoneCont2, nomeCont2, telefoneCont3, nomeCont3, foto, idCargo, cargo, idNacionalidade, nacionalidade, numBanco, nomeBanco, idBanco, ag, conta, op, tipoConta, tipoDocEspec, nUmeroDoDOC)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsereColaborador")>  _
	Public Function InsereColaborador( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeCompleto", DbType:="NText")> ByVal nomeCompleto As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CPF", DbType:="NText")> ByVal cPF As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RG", DbType:="NText")> ByVal rG As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomePai", DbType:="NText")> ByVal nomePai As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeMae", DbType:="NText")> ByVal nomeMae As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CEP", DbType:="NText")> ByVal cEP As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdEndereco", DbType:="Int")> ByVal idEndereco As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Endereco", DbType:="NText")> ByVal endereco As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Numero", DbType:="Int")> ByVal numero As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Complemento", DbType:="NText")> ByVal complemento As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Bairro", DbType:="NText")> ByVal bairro As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cidade", DbType:="NText")> ByVal cidade As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Estado", DbType:="NText")> ByVal estado As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pais", DbType:="NText")> ByVal pais As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Telefone", DbType:="NText")> ByVal telefone As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CElular", DbType:="NText")> ByVal cElular As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Email", DbType:="NText")> ByVal email As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TelefoneCont1", DbType:="NText")> ByVal telefoneCont1 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeCont1", DbType:="NText")> ByVal nomeCont1 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TelefoneCont2", DbType:="NText")> ByVal telefoneCont2 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeCont2", DbType:="NText")> ByVal nomeCont2 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TelefoneCont3", DbType:="NText")> ByVal telefoneCont3 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeCont3", DbType:="NText")> ByVal nomeCont3 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Foto", DbType:="Image")> ByVal foto As System.Data.Linq.Binary,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdCargo", DbType:="Int")> ByVal idCargo As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cargo", DbType:="NText")> ByVal cargo As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdNacionalidade", DbType:="Int")> ByVal idNacionalidade As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nacionalidade", DbType:="NText")> ByVal nacionalidade As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdExterno", DbType:="Int")> ByVal idExterno As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NumBanco", DbType:="Int")> ByVal numBanco As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NomeBanco", DbType:="NText")> ByVal nomeBanco As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IdBanco", DbType:="Int")> ByVal idBanco As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Ag", DbType:="NText")> ByVal ag As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Conta", DbType:="NText")> ByVal conta As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Op", DbType:="NText")> ByVal op As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TipoConta", DbType:="Bit")> ByVal tipoConta As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TipoDocEspec", DbType:="NText")> ByVal tipoDocEspec As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NUmeroDoDOC", DbType:="NText")> ByVal nUmeroDoDOC As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), nomeCompleto, cPF, rG, nomePai, nomeMae, cEP, idEndereco, endereco, numero, complemento, bairro, cidade, estado, pais, telefone, cElular, email, telefoneCont1, nomeCont1, telefoneCont2, nomeCont2, telefoneCont3, nomeCont3, foto, idCargo, cargo, idNacionalidade, nacionalidade, idExterno, numBanco, nomeBanco, idBanco, ag, conta, op, tipoConta, tipoDocEspec, nUmeroDoDOC)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.insereSerialNumberCertificado")>  _
	Public Function insereSerialNumberCertificado(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ID_EMPRESA", DbType:="Int")> ByVal iD_EMPRESA As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CNPJ", DbType:="VarChar(14)")> ByVal cNPJ As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RAZAO", DbType:="VarChar(50)")> ByVal rAZAO As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SERIAL_CERITIFICADO", DbType:="VarChar(100)")> ByVal sERIAL_CERITIFICADO As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iD_EMPRESA, cNPJ, rAZAO, sERIAL_CERITIFICADO)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Login")>  _
Partial Public Class Login
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdLogin As Integer
	
	Private _Nick As String
	
	Private _Pass As String
	
	Private _IdColaborador As System.Nullable(Of Integer)
	
	Private _IdPermissões As System.Nullable(Of Integer)
	
	Private _Funcionarios As EntityRef(Of Funcionarios)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdLoginChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdLoginChanged()
    End Sub
    Partial Private Sub OnNickChanging(value As String)
    End Sub
    Partial Private Sub OnNickChanged()
    End Sub
    Partial Private Sub OnPassChanging(value As String)
    End Sub
    Partial Private Sub OnPassChanged()
    End Sub
    Partial Private Sub OnIdColaboradorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdColaboradorChanged()
    End Sub
    Partial Private Sub OnIdPermisssesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdPermisssesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Funcionarios = CType(Nothing, EntityRef(Of Funcionarios))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLogin", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdLogin() As Integer
		Get
			Return Me._IdLogin
		End Get
		Set
			If ((Me._IdLogin = value)  _
						= false) Then
				Me.OnIdLoginChanging(value)
				Me.SendPropertyChanging
				Me._IdLogin = value
				Me.SendPropertyChanged("IdLogin")
				Me.OnIdLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nick", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nick() As String
		Get
			Return Me._Nick
		End Get
		Set
			If (String.Equals(Me._Nick, value) = false) Then
				Me.OnNickChanging(value)
				Me.SendPropertyChanging
				Me._Nick = value
				Me.SendPropertyChanged("Nick")
				Me.OnNickChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pass", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pass() As String
		Get
			Return Me._Pass
		End Get
		Set
			If (String.Equals(Me._Pass, value) = false) Then
				Me.OnPassChanging(value)
				Me.SendPropertyChanging
				Me._Pass = value
				Me.SendPropertyChanged("Pass")
				Me.OnPassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdColaborador", DbType:="Int")>  _
	Public Property IdColaborador() As System.Nullable(Of Integer)
		Get
			Return Me._IdColaborador
		End Get
		Set
			If (Me._IdColaborador.Equals(value) = false) Then
				If Me._Funcionarios.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdColaboradorChanging(value)
				Me.SendPropertyChanging
				Me._IdColaborador = value
				Me.SendPropertyChanged("IdColaborador")
				Me.OnIdColaboradorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="IdPermissoes", Storage:="_IdPermissões", DbType:="Int")>  _
	Public Property IdPermissses() As System.Nullable(Of Integer)
		Get
			Return Me._IdPermissões
		End Get
		Set
			If (Me._IdPermissões.Equals(value) = false) Then
				Me.OnIdPermisssesChanging(value)
				Me.SendPropertyChanging
				Me._IdPermissões = value
				Me.SendPropertyChanged("IdPermissses")
				Me.OnIdPermisssesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Funcionarios_Login", Storage:="_Funcionarios", ThisKey:="IdColaborador", OtherKey:="IdFuncionario", IsForeignKey:=true)>  _
	Public Property Funcionarios() As Funcionarios
		Get
			Return Me._Funcionarios.Entity
		End Get
		Set
			Dim previousValue As Funcionarios = Me._Funcionarios.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Funcionarios.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Funcionarios.Entity = Nothing
					previousValue.Login.Remove(Me)
				End If
				Me._Funcionarios.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Login.Add(Me)
					Me._IdColaborador = value.IdFuncionario
				Else
					Me._IdColaborador = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Funcionarios")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PermissoesLogin")>  _
Partial Public Class PermissoesLogin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdPermissão As Integer
	
	Private _Descrição As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdPermissaoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPermissaoChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPermissão", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdPermissao() As Integer
		Get
			Return Me._IdPermissão
		End Get
		Set
			If ((Me._IdPermissão = value)  _
						= false) Then
				Me.OnIdPermissaoChanging(value)
				Me.SendPropertyChanging
				Me._IdPermissão = value
				Me.SendPropertyChanged("IdPermissao")
				Me.OnIdPermissaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrição", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descrição
		End Get
		Set
			If (String.Equals(Me._Descrição, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descrição = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PermissoesUsuarios")>  _
Partial Public Class PermissoesUsuarios
	
	Private _IdPermissao As System.Nullable(Of Integer)
	
	Private _IdUsuario As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPermissao", DbType:="Int")>  _
	Public Property IdPermissao() As System.Nullable(Of Integer)
		Get
			Return Me._IdPermissao
		End Get
		Set
			If (Me._IdPermissao.Equals(value) = false) Then
				Me._IdPermissao = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUsuario", DbType:="Int")>  _
	Public Property IdUsuario() As System.Nullable(Of Integer)
		Get
			Return Me._IdUsuario
		End Get
		Set
			If (Me._IdUsuario.Equals(value) = false) Then
				Me._IdUsuario = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Paises")>  _
Partial Public Class Paises
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdPais As Integer
	
	Private _Descrição As String
	
	Private _Sigla As String
	
	Private _CodTel As System.Nullable(Of Integer)
	
	Private _Nacionalidades As EntitySet(Of Nacionalidades)
	
	Private _Estados As EntitySet(Of Estados)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdPaisChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPaisChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnSiglaChanging(value As String)
    End Sub
    Partial Private Sub OnSiglaChanged()
    End Sub
    Partial Private Sub OnCodTelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCodTelChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Nacionalidades = New EntitySet(Of Nacionalidades)(AddressOf Me.attach_Nacionalidades, AddressOf Me.detach_Nacionalidades)
		Me._Estados = New EntitySet(Of Estados)(AddressOf Me.attach_Estados, AddressOf Me.detach_Estados)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPais", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdPais() As Integer
		Get
			Return Me._IdPais
		End Get
		Set
			If ((Me._IdPais = value)  _
						= false) Then
				Me.OnIdPaisChanging(value)
				Me.SendPropertyChanging
				Me._IdPais = value
				Me.SendPropertyChanged("IdPais")
				Me.OnIdPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrição", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descrição
		End Get
		Set
			If (String.Equals(Me._Descrição, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descrição = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sigla", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Sigla() As String
		Get
			Return Me._Sigla
		End Get
		Set
			If (String.Equals(Me._Sigla, value) = false) Then
				Me.OnSiglaChanging(value)
				Me.SendPropertyChanging
				Me._Sigla = value
				Me.SendPropertyChanged("Sigla")
				Me.OnSiglaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodTel", DbType:="Int")>  _
	Public Property CodTel() As System.Nullable(Of Integer)
		Get
			Return Me._CodTel
		End Get
		Set
			If (Me._CodTel.Equals(value) = false) Then
				Me.OnCodTelChanging(value)
				Me.SendPropertyChanging
				Me._CodTel = value
				Me.SendPropertyChanged("CodTel")
				Me.OnCodTelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Paises_Nacionalidades", Storage:="_Nacionalidades", ThisKey:="IdPais", OtherKey:="IdPais")>  _
	Public Property Nacionalidades() As EntitySet(Of Nacionalidades)
		Get
			Return Me._Nacionalidades
		End Get
		Set
			Me._Nacionalidades.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Paises_Estados", Storage:="_Estados", ThisKey:="IdPais", OtherKey:="IdPais")>  _
	Public Property Estados() As EntitySet(Of Estados)
		Get
			Return Me._Estados
		End Get
		Set
			Me._Estados.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Nacionalidades(ByVal entity As Nacionalidades)
		Me.SendPropertyChanging
		entity.Paises = Me
	End Sub
	
	Private Sub detach_Nacionalidades(ByVal entity As Nacionalidades)
		Me.SendPropertyChanging
		entity.Paises = Nothing
	End Sub
	
	Private Sub attach_Estados(ByVal entity As Estados)
		Me.SendPropertyChanging
		entity.Paises = Me
	End Sub
	
	Private Sub detach_Estados(ByVal entity As Estados)
		Me.SendPropertyChanging
		entity.Paises = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Nacionalidades")>  _
Partial Public Class Nacionalidades
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdNacionalidade As Integer
	
	Private _Nacionalidade As String
	
	Private _IdPais As System.Nullable(Of Integer)
	
	Private _Pais As String
	
	Private _Funcionarios As EntitySet(Of Funcionarios)
	
	Private _Paises As EntityRef(Of Paises)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdNacionalidadeChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdNacionalidadeChanged()
    End Sub
    Partial Private Sub OnNacionalidadeChanging(value As String)
    End Sub
    Partial Private Sub OnNacionalidadeChanged()
    End Sub
    Partial Private Sub OnIdPaisChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdPaisChanged()
    End Sub
    Partial Private Sub OnPaisChanging(value As String)
    End Sub
    Partial Private Sub OnPaisChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Funcionarios = New EntitySet(Of Funcionarios)(AddressOf Me.attach_Funcionarios, AddressOf Me.detach_Funcionarios)
		Me._Paises = CType(Nothing, EntityRef(Of Paises))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdNacionalidade", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdNacionalidade() As Integer
		Get
			Return Me._IdNacionalidade
		End Get
		Set
			If ((Me._IdNacionalidade = value)  _
						= false) Then
				Me.OnIdNacionalidadeChanging(value)
				Me.SendPropertyChanging
				Me._IdNacionalidade = value
				Me.SendPropertyChanged("IdNacionalidade")
				Me.OnIdNacionalidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nacionalidade", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nacionalidade() As String
		Get
			Return Me._Nacionalidade
		End Get
		Set
			If (String.Equals(Me._Nacionalidade, value) = false) Then
				Me.OnNacionalidadeChanging(value)
				Me.SendPropertyChanging
				Me._Nacionalidade = value
				Me.SendPropertyChanged("Nacionalidade")
				Me.OnNacionalidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPais", DbType:="Int")>  _
	Public Property IdPais() As System.Nullable(Of Integer)
		Get
			Return Me._IdPais
		End Get
		Set
			If (Me._IdPais.Equals(value) = false) Then
				If Me._Paises.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdPaisChanging(value)
				Me.SendPropertyChanging
				Me._IdPais = value
				Me.SendPropertyChanged("IdPais")
				Me.OnIdPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pais", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pais() As String
		Get
			Return Me._Pais
		End Get
		Set
			If (String.Equals(Me._Pais, value) = false) Then
				Me.OnPaisChanging(value)
				Me.SendPropertyChanging
				Me._Pais = value
				Me.SendPropertyChanged("Pais")
				Me.OnPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Nacionalidades_Funcionarios", Storage:="_Funcionarios", ThisKey:="IdNacionalidade", OtherKey:="IdNacionalidade")>  _
	Public Property Funcionarios() As EntitySet(Of Funcionarios)
		Get
			Return Me._Funcionarios
		End Get
		Set
			Me._Funcionarios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Paises_Nacionalidades", Storage:="_Paises", ThisKey:="IdPais", OtherKey:="IdPais", IsForeignKey:=true)>  _
	Public Property Paises() As Paises
		Get
			Return Me._Paises.Entity
		End Get
		Set
			Dim previousValue As Paises = Me._Paises.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Paises.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Paises.Entity = Nothing
					previousValue.Nacionalidades.Remove(Me)
				End If
				Me._Paises.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Nacionalidades.Add(Me)
					Me._IdPais = value.IdPais
				Else
					Me._IdPais = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Paises")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Funcionarios(ByVal entity As Funcionarios)
		Me.SendPropertyChanging
		entity.Nacionalidades = Me
	End Sub
	
	Private Sub detach_Funcionarios(ByVal entity As Funcionarios)
		Me.SendPropertyChanging
		entity.Nacionalidades = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Estados")>  _
Partial Public Class Estados
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEstado As Integer
	
	Private _IdPais As System.Nullable(Of Integer)
	
	Private _Descrição As String
	
	Private _Sigla As String
	
	Private _CodTel As System.Nullable(Of Integer)
	
	Private _Cidade As EntitySet(Of Cidade)
	
	Private _Paises As EntityRef(Of Paises)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEstadoChanged()
    End Sub
    Partial Private Sub OnIdPaisChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdPaisChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnSiglaChanging(value As String)
    End Sub
    Partial Private Sub OnSiglaChanged()
    End Sub
    Partial Private Sub OnCodTelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCodTelChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cidade = New EntitySet(Of Cidade)(AddressOf Me.attach_Cidade, AddressOf Me.detach_Cidade)
		Me._Paises = CType(Nothing, EntityRef(Of Paises))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdEstado() As Integer
		Get
			Return Me._IdEstado
		End Get
		Set
			If ((Me._IdEstado = value)  _
						= false) Then
				Me.OnIdEstadoChanging(value)
				Me.SendPropertyChanging
				Me._IdEstado = value
				Me.SendPropertyChanged("IdEstado")
				Me.OnIdEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPais", DbType:="Int")>  _
	Public Property IdPais() As System.Nullable(Of Integer)
		Get
			Return Me._IdPais
		End Get
		Set
			If (Me._IdPais.Equals(value) = false) Then
				If Me._Paises.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdPaisChanging(value)
				Me.SendPropertyChanging
				Me._IdPais = value
				Me.SendPropertyChanged("IdPais")
				Me.OnIdPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrição", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descrição
		End Get
		Set
			If (String.Equals(Me._Descrição, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descrição = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sigla", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Sigla() As String
		Get
			Return Me._Sigla
		End Get
		Set
			If (String.Equals(Me._Sigla, value) = false) Then
				Me.OnSiglaChanging(value)
				Me.SendPropertyChanging
				Me._Sigla = value
				Me.SendPropertyChanged("Sigla")
				Me.OnSiglaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodTel", DbType:="Int")>  _
	Public Property CodTel() As System.Nullable(Of Integer)
		Get
			Return Me._CodTel
		End Get
		Set
			If (Me._CodTel.Equals(value) = false) Then
				Me.OnCodTelChanging(value)
				Me.SendPropertyChanging
				Me._CodTel = value
				Me.SendPropertyChanged("CodTel")
				Me.OnCodTelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Estados_Cidade", Storage:="_Cidade", ThisKey:="IdEstado", OtherKey:="IdEstado")>  _
	Public Property Cidade() As EntitySet(Of Cidade)
		Get
			Return Me._Cidade
		End Get
		Set
			Me._Cidade.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Paises_Estados", Storage:="_Paises", ThisKey:="IdPais", OtherKey:="IdPais", IsForeignKey:=true)>  _
	Public Property Paises() As Paises
		Get
			Return Me._Paises.Entity
		End Get
		Set
			Dim previousValue As Paises = Me._Paises.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Paises.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Paises.Entity = Nothing
					previousValue.Estados.Remove(Me)
				End If
				Me._Paises.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Estados.Add(Me)
					Me._IdPais = value.IdPais
				Else
					Me._IdPais = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Paises")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cidade(ByVal entity As Cidade)
		Me.SendPropertyChanging
		entity.Estados = Me
	End Sub
	
	Private Sub detach_Cidade(ByVal entity As Cidade)
		Me.SendPropertyChanging
		entity.Estados = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cidade")>  _
Partial Public Class Cidade
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdCidade As Integer
	
	Private _IdEstado As System.Nullable(Of Integer)
	
	Private _Descrição As String
	
	Private _Bairro As EntitySet(Of Bairro)
	
	Private _Estados As EntityRef(Of Estados)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdCidadeChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCidadeChanged()
    End Sub
    Partial Private Sub OnIdEstadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdEstadoChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bairro = New EntitySet(Of Bairro)(AddressOf Me.attach_Bairro, AddressOf Me.detach_Bairro)
		Me._Estados = CType(Nothing, EntityRef(Of Estados))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCidade", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdCidade() As Integer
		Get
			Return Me._IdCidade
		End Get
		Set
			If ((Me._IdCidade = value)  _
						= false) Then
				Me.OnIdCidadeChanging(value)
				Me.SendPropertyChanging
				Me._IdCidade = value
				Me.SendPropertyChanged("IdCidade")
				Me.OnIdCidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstado", DbType:="Int")>  _
	Public Property IdEstado() As System.Nullable(Of Integer)
		Get
			Return Me._IdEstado
		End Get
		Set
			If (Me._IdEstado.Equals(value) = false) Then
				If Me._Estados.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdEstadoChanging(value)
				Me.SendPropertyChanging
				Me._IdEstado = value
				Me.SendPropertyChanged("IdEstado")
				Me.OnIdEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrição", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descrição
		End Get
		Set
			If (String.Equals(Me._Descrição, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descrição = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cidade_Bairro", Storage:="_Bairro", ThisKey:="IdCidade", OtherKey:="IdCidade")>  _
	Public Property Bairro() As EntitySet(Of Bairro)
		Get
			Return Me._Bairro
		End Get
		Set
			Me._Bairro.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Estados_Cidade", Storage:="_Estados", ThisKey:="IdEstado", OtherKey:="IdEstado", IsForeignKey:=true)>  _
	Public Property Estados() As Estados
		Get
			Return Me._Estados.Entity
		End Get
		Set
			Dim previousValue As Estados = Me._Estados.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Estados.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Estados.Entity = Nothing
					previousValue.Cidade.Remove(Me)
				End If
				Me._Estados.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cidade.Add(Me)
					Me._IdEstado = value.IdEstado
				Else
					Me._IdEstado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Estados")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Bairro(ByVal entity As Bairro)
		Me.SendPropertyChanging
		entity.Cidade = Me
	End Sub
	
	Private Sub detach_Bairro(ByVal entity As Bairro)
		Me.SendPropertyChanging
		entity.Cidade = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Bairro")>  _
Partial Public Class Bairro
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdBairro As Integer
	
	Private _IdCidade As System.Nullable(Of Integer)
	
	Private _Descrição As String
	
	Private _Endereços As EntitySet(Of Enderecos)
	
	Private _Cidade As EntityRef(Of Cidade)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdBairroChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBairroChanged()
    End Sub
    Partial Private Sub OnIdCidadeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdCidadeChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Endereços = New EntitySet(Of Enderecos)(AddressOf Me.attach_Endereços, AddressOf Me.detach_Endereços)
		Me._Cidade = CType(Nothing, EntityRef(Of Cidade))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBairro", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdBairro() As Integer
		Get
			Return Me._IdBairro
		End Get
		Set
			If ((Me._IdBairro = value)  _
						= false) Then
				Me.OnIdBairroChanging(value)
				Me.SendPropertyChanging
				Me._IdBairro = value
				Me.SendPropertyChanged("IdBairro")
				Me.OnIdBairroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCidade", DbType:="Int")>  _
	Public Property IdCidade() As System.Nullable(Of Integer)
		Get
			Return Me._IdCidade
		End Get
		Set
			If (Me._IdCidade.Equals(value) = false) Then
				If Me._Cidade.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdCidadeChanging(value)
				Me.SendPropertyChanging
				Me._IdCidade = value
				Me.SendPropertyChanged("IdCidade")
				Me.OnIdCidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrição", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descrição
		End Get
		Set
			If (String.Equals(Me._Descrição, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descrição = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bairro_Enderecos", Storage:="_Endereços", ThisKey:="IdBairro", OtherKey:="IdBairro")>  _
	Public Property Enderecos() As EntitySet(Of Enderecos)
		Get
			Return Me._Endereços
		End Get
		Set
			Me._Endereços.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cidade_Bairro", Storage:="_Cidade", ThisKey:="IdCidade", OtherKey:="IdCidade", IsForeignKey:=true)>  _
	Public Property Cidade() As Cidade
		Get
			Return Me._Cidade.Entity
		End Get
		Set
			Dim previousValue As Cidade = Me._Cidade.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cidade.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cidade.Entity = Nothing
					previousValue.Bairro.Remove(Me)
				End If
				Me._Cidade.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bairro.Add(Me)
					Me._IdCidade = value.IdCidade
				Else
					Me._IdCidade = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cidade")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Endereços(ByVal entity As Enderecos)
		Me.SendPropertyChanging
		entity.Bairro = Me
	End Sub
	
	Private Sub detach_Endereços(ByVal entity As Enderecos)
		Me.SendPropertyChanging
		entity.Bairro = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DescricaoLogradouros")>  _
Partial Public Class DescricaoLogradouros
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdDescriçãoLog As Integer
	
	Private _Descrição As String
	
	Private _Abreviação As String
	
	Private _Endereços As EntitySet(Of Enderecos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdDescricaoLogChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdDescricaoLogChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnAbreviacaoChanging(value As String)
    End Sub
    Partial Private Sub OnAbreviacaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Endereços = New EntitySet(Of Enderecos)(AddressOf Me.attach_Endereços, AddressOf Me.detach_Endereços)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDescriçãoLog", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdDescricaoLog() As Integer
		Get
			Return Me._IdDescriçãoLog
		End Get
		Set
			If ((Me._IdDescriçãoLog = value)  _
						= false) Then
				Me.OnIdDescricaoLogChanging(value)
				Me.SendPropertyChanging
				Me._IdDescriçãoLog = value
				Me.SendPropertyChanged("IdDescricaoLog")
				Me.OnIdDescricaoLogChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrição", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descrição
		End Get
		Set
			If (String.Equals(Me._Descrição, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descrição = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abreviação", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Abreviacao() As String
		Get
			Return Me._Abreviação
		End Get
		Set
			If (String.Equals(Me._Abreviação, value) = false) Then
				Me.OnAbreviacaoChanging(value)
				Me.SendPropertyChanging
				Me._Abreviação = value
				Me.SendPropertyChanged("Abreviacao")
				Me.OnAbreviacaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DescricaoLogradouros_Enderecos", Storage:="_Endereços", ThisKey:="IdDescricaoLog", OtherKey:="IdAbreviacao")>  _
	Public Property Enderecos() As EntitySet(Of Enderecos)
		Get
			Return Me._Endereços
		End Get
		Set
			Me._Endereços.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Endereços(ByVal entity As Enderecos)
		Me.SendPropertyChanging
		entity.DescricaoLogradouros = Me
	End Sub
	
	Private Sub detach_Endereços(ByVal entity As Enderecos)
		Me.SendPropertyChanging
		entity.DescricaoLogradouros = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Enderecos")>  _
Partial Public Class Enderecos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEndereço As Integer
	
	Private _IdBairro As System.Nullable(Of Integer)
	
	Private _Descrição As String
	
	Private _CEP As System.Nullable(Of Integer)
	
	Private _IdAbreviação As System.Nullable(Of Integer)
	
	Private _Bairro As EntityRef(Of Bairro)
	
	Private _DescriçãoLogradouros As EntityRef(Of DescricaoLogradouros)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEnderecoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEnderecoChanged()
    End Sub
    Partial Private Sub OnIdBairroChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdBairroChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnCEPChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCEPChanged()
    End Sub
    Partial Private Sub OnIdAbreviacaoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdAbreviacaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bairro = CType(Nothing, EntityRef(Of Bairro))
		Me._DescriçãoLogradouros = CType(Nothing, EntityRef(Of DescricaoLogradouros))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEndereço", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdEndereco() As Integer
		Get
			Return Me._IdEndereço
		End Get
		Set
			If ((Me._IdEndereço = value)  _
						= false) Then
				Me.OnIdEnderecoChanging(value)
				Me.SendPropertyChanging
				Me._IdEndereço = value
				Me.SendPropertyChanged("IdEndereco")
				Me.OnIdEnderecoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBairro", DbType:="Int")>  _
	Public Property IdBairro() As System.Nullable(Of Integer)
		Get
			Return Me._IdBairro
		End Get
		Set
			If (Me._IdBairro.Equals(value) = false) Then
				If Me._Bairro.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdBairroChanging(value)
				Me.SendPropertyChanging
				Me._IdBairro = value
				Me.SendPropertyChanged("IdBairro")
				Me.OnIdBairroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrição", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descrição
		End Get
		Set
			If (String.Equals(Me._Descrição, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descrição = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CEP", DbType:="Int")>  _
	Public Property CEP() As System.Nullable(Of Integer)
		Get
			Return Me._CEP
		End Get
		Set
			If (Me._CEP.Equals(value) = false) Then
				Me.OnCEPChanging(value)
				Me.SendPropertyChanging
				Me._CEP = value
				Me.SendPropertyChanged("CEP")
				Me.OnCEPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAbreviação", DbType:="Int")>  _
	Public Property IdAbreviacao() As System.Nullable(Of Integer)
		Get
			Return Me._IdAbreviação
		End Get
		Set
			If (Me._IdAbreviação.Equals(value) = false) Then
				If Me._DescriçãoLogradouros.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdAbreviacaoChanging(value)
				Me.SendPropertyChanging
				Me._IdAbreviação = value
				Me.SendPropertyChanged("IdAbreviacao")
				Me.OnIdAbreviacaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bairro_Enderecos", Storage:="_Bairro", ThisKey:="IdBairro", OtherKey:="IdBairro", IsForeignKey:=true)>  _
	Public Property Bairro() As Bairro
		Get
			Return Me._Bairro.Entity
		End Get
		Set
			Dim previousValue As Bairro = Me._Bairro.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Bairro.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Bairro.Entity = Nothing
					previousValue.Enderecos.Remove(Me)
				End If
				Me._Bairro.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Enderecos.Add(Me)
					Me._IdBairro = value.IdBairro
				Else
					Me._IdBairro = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Bairro")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DescricaoLogradouros_Enderecos", Storage:="_DescriçãoLogradouros", ThisKey:="IdAbreviacao", OtherKey:="IdDescricaoLog", IsForeignKey:=true)>  _
	Public Property DescricaoLogradouros() As DescricaoLogradouros
		Get
			Return Me._DescriçãoLogradouros.Entity
		End Get
		Set
			Dim previousValue As DescricaoLogradouros = Me._DescriçãoLogradouros.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DescriçãoLogradouros.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DescriçãoLogradouros.Entity = Nothing
					previousValue.Enderecos.Remove(Me)
				End If
				Me._DescriçãoLogradouros.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Enderecos.Add(Me)
					Me._IdAbreviação = value.IdDescricaoLog
				Else
					Me._IdAbreviação = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("DescricaoLogradouros")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Funcionarios")>  _
Partial Public Class Funcionarios
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdFuncionario As Integer
	
	Private _NomeCompleto As String
	
	Private _CPF As String
	
	Private _RG As String
	
	Private _NomePai As String
	
	Private _NomeMãe As String
	
	Private _CEP As String
	
	Private _IdEndereço As System.Nullable(Of Integer)
	
	Private _Endereço As String
	
	Private _Numero As System.Nullable(Of Integer)
	
	Private _Complemento As String
	
	Private _Bairro As String
	
	Private _CIdade As String
	
	Private _Estado As String
	
	Private _Pais As String
	
	Private _Telefone As String
	
	Private _Celular As String
	
	Private _Email As String
	
	Private _TelefoneCont1 As String
	
	Private _NomeCont1 As String
	
	Private _telefoneCont2 As String
	
	Private _NomeCont2 As String
	
	Private _telefoneCont3 As String
	
	Private _NomeCont3 As String
	
	Private _Foto As System.Data.Linq.Binary
	
	Private _IdCargo As System.Nullable(Of Integer)
	
	Private _Cargo As String
	
	Private _IdNacionalidade As System.Nullable(Of Integer)
	
	Private _Nacionalidade As String
	
	Private _IdExterno As Integer
	
	Private _NumBanco As Integer
	
	Private _NomeBanco As String
	
	Private _IdBanco As Integer
	
	Private _Ag As String
	
	Private _Conta As String
	
	Private _Op As String
	
	Private _TipoConta As Boolean
	
	Private _TipoDocEspec As String
	
	Private _NUmeroDoDOC As String
	
	Private _Login As EntitySet(Of Login)
	
	Private _DependentesFuncionarios As EntitySet(Of DependentesFuncionarios)
	
	Private _Nacionalidades As EntityRef(Of Nacionalidades)
	
	Private _Cargos As EntityRef(Of Cargos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdFuncionarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdFuncionarioChanged()
    End Sub
    Partial Private Sub OnNomeCompletoChanging(value As String)
    End Sub
    Partial Private Sub OnNomeCompletoChanged()
    End Sub
    Partial Private Sub OnCPFChanging(value As String)
    End Sub
    Partial Private Sub OnCPFChanged()
    End Sub
    Partial Private Sub OnRGChanging(value As String)
    End Sub
    Partial Private Sub OnRGChanged()
    End Sub
    Partial Private Sub OnNomePaiChanging(value As String)
    End Sub
    Partial Private Sub OnNomePaiChanged()
    End Sub
    Partial Private Sub OnNomeMaeChanging(value As String)
    End Sub
    Partial Private Sub OnNomeMaeChanged()
    End Sub
    Partial Private Sub OnCEPChanging(value As String)
    End Sub
    Partial Private Sub OnCEPChanged()
    End Sub
    Partial Private Sub OnIdEnderecoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdEnderecoChanged()
    End Sub
    Partial Private Sub OnEndereçoChanging(value As String)
    End Sub
    Partial Private Sub OnEndereçoChanged()
    End Sub
    Partial Private Sub OnNumeroChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumeroChanged()
    End Sub
    Partial Private Sub OnComplementoChanging(value As String)
    End Sub
    Partial Private Sub OnComplementoChanged()
    End Sub
    Partial Private Sub OnBairroChanging(value As String)
    End Sub
    Partial Private Sub OnBairroChanged()
    End Sub
    Partial Private Sub OnCIdadeChanging(value As String)
    End Sub
    Partial Private Sub OnCIdadeChanged()
    End Sub
    Partial Private Sub OnEstadoChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoChanged()
    End Sub
    Partial Private Sub OnPaisChanging(value As String)
    End Sub
    Partial Private Sub OnPaisChanged()
    End Sub
    Partial Private Sub OnTelefoneChanging(value As String)
    End Sub
    Partial Private Sub OnTelefoneChanged()
    End Sub
    Partial Private Sub OnCelularChanging(value As String)
    End Sub
    Partial Private Sub OnCelularChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTelefoneCont1Changing(value As String)
    End Sub
    Partial Private Sub OnTelefoneCont1Changed()
    End Sub
    Partial Private Sub OnNomeCont1Changing(value As String)
    End Sub
    Partial Private Sub OnNomeCont1Changed()
    End Sub
    Partial Private Sub OntelefoneCont2Changing(value As String)
    End Sub
    Partial Private Sub OntelefoneCont2Changed()
    End Sub
    Partial Private Sub OnNomeCont2Changing(value As String)
    End Sub
    Partial Private Sub OnNomeCont2Changed()
    End Sub
    Partial Private Sub OntelefoneCont3Changing(value As String)
    End Sub
    Partial Private Sub OntelefoneCont3Changed()
    End Sub
    Partial Private Sub OnNomeCont3Changing(value As String)
    End Sub
    Partial Private Sub OnNomeCont3Changed()
    End Sub
    Partial Private Sub OnFotoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFotoChanged()
    End Sub
    Partial Private Sub OnIdCargoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdCargoChanged()
    End Sub
    Partial Private Sub OnCargoChanging(value As String)
    End Sub
    Partial Private Sub OnCargoChanged()
    End Sub
    Partial Private Sub OnIdNacionalidadeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdNacionalidadeChanged()
    End Sub
    Partial Private Sub OnNacionalidadeChanging(value As String)
    End Sub
    Partial Private Sub OnNacionalidadeChanged()
    End Sub
    Partial Private Sub OnIdExternoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdExternoChanged()
    End Sub
    Partial Private Sub OnNumBancoChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumBancoChanged()
    End Sub
    Partial Private Sub OnNomeBancoChanging(value As String)
    End Sub
    Partial Private Sub OnNomeBancoChanged()
    End Sub
    Partial Private Sub OnIdBancoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBancoChanged()
    End Sub
    Partial Private Sub OnAgChanging(value As String)
    End Sub
    Partial Private Sub OnAgChanged()
    End Sub
    Partial Private Sub OnContaChanging(value As String)
    End Sub
    Partial Private Sub OnContaChanged()
    End Sub
    Partial Private Sub OnOpChanging(value As String)
    End Sub
    Partial Private Sub OnOpChanged()
    End Sub
    Partial Private Sub OnTipoContaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTipoContaChanged()
    End Sub
    Partial Private Sub OnTipoDocEspecChanging(value As String)
    End Sub
    Partial Private Sub OnTipoDocEspecChanged()
    End Sub
    Partial Private Sub OnNUmeroDoDOCChanging(value As String)
    End Sub
    Partial Private Sub OnNUmeroDoDOCChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Login = New EntitySet(Of Login)(AddressOf Me.attach_Login, AddressOf Me.detach_Login)
		Me._DependentesFuncionarios = New EntitySet(Of DependentesFuncionarios)(AddressOf Me.attach_DependentesFuncionarios, AddressOf Me.detach_DependentesFuncionarios)
		Me._Nacionalidades = CType(Nothing, EntityRef(Of Nacionalidades))
		Me._Cargos = CType(Nothing, EntityRef(Of Cargos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFuncionario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdFuncionario() As Integer
		Get
			Return Me._IdFuncionario
		End Get
		Set
			If ((Me._IdFuncionario = value)  _
						= false) Then
				Me.OnIdFuncionarioChanging(value)
				Me.SendPropertyChanging
				Me._IdFuncionario = value
				Me.SendPropertyChanged("IdFuncionario")
				Me.OnIdFuncionarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeCompleto", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeCompleto() As String
		Get
			Return Me._NomeCompleto
		End Get
		Set
			If (String.Equals(Me._NomeCompleto, value) = false) Then
				Me.OnNomeCompletoChanging(value)
				Me.SendPropertyChanging
				Me._NomeCompleto = value
				Me.SendPropertyChanged("NomeCompleto")
				Me.OnNomeCompletoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CPF", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CPF() As String
		Get
			Return Me._CPF
		End Get
		Set
			If (String.Equals(Me._CPF, value) = false) Then
				Me.OnCPFChanging(value)
				Me.SendPropertyChanging
				Me._CPF = value
				Me.SendPropertyChanged("CPF")
				Me.OnCPFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RG", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RG() As String
		Get
			Return Me._RG
		End Get
		Set
			If (String.Equals(Me._RG, value) = false) Then
				Me.OnRGChanging(value)
				Me.SendPropertyChanging
				Me._RG = value
				Me.SendPropertyChanged("RG")
				Me.OnRGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomePai", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomePai() As String
		Get
			Return Me._NomePai
		End Get
		Set
			If (String.Equals(Me._NomePai, value) = false) Then
				Me.OnNomePaiChanging(value)
				Me.SendPropertyChanging
				Me._NomePai = value
				Me.SendPropertyChanged("NomePai")
				Me.OnNomePaiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeMãe", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeMae() As String
		Get
			Return Me._NomeMãe
		End Get
		Set
			If (String.Equals(Me._NomeMãe, value) = false) Then
				Me.OnNomeMaeChanging(value)
				Me.SendPropertyChanging
				Me._NomeMãe = value
				Me.SendPropertyChanged("NomeMae")
				Me.OnNomeMaeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CEP", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CEP() As String
		Get
			Return Me._CEP
		End Get
		Set
			If (String.Equals(Me._CEP, value) = false) Then
				Me.OnCEPChanging(value)
				Me.SendPropertyChanging
				Me._CEP = value
				Me.SendPropertyChanged("CEP")
				Me.OnCEPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEndereço", DbType:="Int")>  _
	Public Property IdEndereco() As System.Nullable(Of Integer)
		Get
			Return Me._IdEndereço
		End Get
		Set
			If (Me._IdEndereço.Equals(value) = false) Then
				Me.OnIdEnderecoChanging(value)
				Me.SendPropertyChanging
				Me._IdEndereço = value
				Me.SendPropertyChanged("IdEndereco")
				Me.OnIdEnderecoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Endereço", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Endereço() As String
		Get
			Return Me._Endereço
		End Get
		Set
			If (String.Equals(Me._Endereço, value) = false) Then
				Me.OnEndereçoChanging(value)
				Me.SendPropertyChanging
				Me._Endereço = value
				Me.SendPropertyChanged("Endereço")
				Me.OnEndereçoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Numero", DbType:="Int")>  _
	Public Property Numero() As System.Nullable(Of Integer)
		Get
			Return Me._Numero
		End Get
		Set
			If (Me._Numero.Equals(value) = false) Then
				Me.OnNumeroChanging(value)
				Me.SendPropertyChanging
				Me._Numero = value
				Me.SendPropertyChanged("Numero")
				Me.OnNumeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Complemento", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Complemento() As String
		Get
			Return Me._Complemento
		End Get
		Set
			If (String.Equals(Me._Complemento, value) = false) Then
				Me.OnComplementoChanging(value)
				Me.SendPropertyChanging
				Me._Complemento = value
				Me.SendPropertyChanged("Complemento")
				Me.OnComplementoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bairro", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Bairro() As String
		Get
			Return Me._Bairro
		End Get
		Set
			If (String.Equals(Me._Bairro, value) = false) Then
				Me.OnBairroChanging(value)
				Me.SendPropertyChanging
				Me._Bairro = value
				Me.SendPropertyChanged("Bairro")
				Me.OnBairroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIdade", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CIdade() As String
		Get
			Return Me._CIdade
		End Get
		Set
			If (String.Equals(Me._CIdade, value) = false) Then
				Me.OnCIdadeChanging(value)
				Me.SendPropertyChanging
				Me._CIdade = value
				Me.SendPropertyChanged("CIdade")
				Me.OnCIdadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Estado", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Estado() As String
		Get
			Return Me._Estado
		End Get
		Set
			If (String.Equals(Me._Estado, value) = false) Then
				Me.OnEstadoChanging(value)
				Me.SendPropertyChanging
				Me._Estado = value
				Me.SendPropertyChanged("Estado")
				Me.OnEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pais", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pais() As String
		Get
			Return Me._Pais
		End Get
		Set
			If (String.Equals(Me._Pais, value) = false) Then
				Me.OnPaisChanging(value)
				Me.SendPropertyChanging
				Me._Pais = value
				Me.SendPropertyChanged("Pais")
				Me.OnPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefone", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefone() As String
		Get
			Return Me._Telefone
		End Get
		Set
			If (String.Equals(Me._Telefone, value) = false) Then
				Me.OnTelefoneChanging(value)
				Me.SendPropertyChanging
				Me._Telefone = value
				Me.SendPropertyChanged("Telefone")
				Me.OnTelefoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Celular", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Celular() As String
		Get
			Return Me._Celular
		End Get
		Set
			If (String.Equals(Me._Celular, value) = false) Then
				Me.OnCelularChanging(value)
				Me.SendPropertyChanging
				Me._Celular = value
				Me.SendPropertyChanged("Celular")
				Me.OnCelularChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelefoneCont1", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TelefoneCont1() As String
		Get
			Return Me._TelefoneCont1
		End Get
		Set
			If (String.Equals(Me._TelefoneCont1, value) = false) Then
				Me.OnTelefoneCont1Changing(value)
				Me.SendPropertyChanging
				Me._TelefoneCont1 = value
				Me.SendPropertyChanged("TelefoneCont1")
				Me.OnTelefoneCont1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeCont1", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeCont1() As String
		Get
			Return Me._NomeCont1
		End Get
		Set
			If (String.Equals(Me._NomeCont1, value) = false) Then
				Me.OnNomeCont1Changing(value)
				Me.SendPropertyChanging
				Me._NomeCont1 = value
				Me.SendPropertyChanged("NomeCont1")
				Me.OnNomeCont1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telefoneCont2", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property telefoneCont2() As String
		Get
			Return Me._telefoneCont2
		End Get
		Set
			If (String.Equals(Me._telefoneCont2, value) = false) Then
				Me.OntelefoneCont2Changing(value)
				Me.SendPropertyChanging
				Me._telefoneCont2 = value
				Me.SendPropertyChanged("telefoneCont2")
				Me.OntelefoneCont2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeCont2", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeCont2() As String
		Get
			Return Me._NomeCont2
		End Get
		Set
			If (String.Equals(Me._NomeCont2, value) = false) Then
				Me.OnNomeCont2Changing(value)
				Me.SendPropertyChanging
				Me._NomeCont2 = value
				Me.SendPropertyChanged("NomeCont2")
				Me.OnNomeCont2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telefoneCont3", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property telefoneCont3() As String
		Get
			Return Me._telefoneCont3
		End Get
		Set
			If (String.Equals(Me._telefoneCont3, value) = false) Then
				Me.OntelefoneCont3Changing(value)
				Me.SendPropertyChanging
				Me._telefoneCont3 = value
				Me.SendPropertyChanged("telefoneCont3")
				Me.OntelefoneCont3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeCont3", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeCont3() As String
		Get
			Return Me._NomeCont3
		End Get
		Set
			If (String.Equals(Me._NomeCont3, value) = false) Then
				Me.OnNomeCont3Changing(value)
				Me.SendPropertyChanging
				Me._NomeCont3 = value
				Me.SendPropertyChanged("NomeCont3")
				Me.OnNomeCont3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Foto", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Foto() As System.Data.Linq.Binary
		Get
			Return Me._Foto
		End Get
		Set
			If (Object.Equals(Me._Foto, value) = false) Then
				Me.OnFotoChanging(value)
				Me.SendPropertyChanging
				Me._Foto = value
				Me.SendPropertyChanged("Foto")
				Me.OnFotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCargo", DbType:="Int")>  _
	Public Property IdCargo() As System.Nullable(Of Integer)
		Get
			Return Me._IdCargo
		End Get
		Set
			If (Me._IdCargo.Equals(value) = false) Then
				If Me._Cargos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdCargoChanging(value)
				Me.SendPropertyChanging
				Me._IdCargo = value
				Me.SendPropertyChanged("IdCargo")
				Me.OnIdCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cargo", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cargo() As String
		Get
			Return Me._Cargo
		End Get
		Set
			If (String.Equals(Me._Cargo, value) = false) Then
				Me.OnCargoChanging(value)
				Me.SendPropertyChanging
				Me._Cargo = value
				Me.SendPropertyChanged("Cargo")
				Me.OnCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdNacionalidade", DbType:="Int")>  _
	Public Property IdNacionalidade() As System.Nullable(Of Integer)
		Get
			Return Me._IdNacionalidade
		End Get
		Set
			If (Me._IdNacionalidade.Equals(value) = false) Then
				If Me._Nacionalidades.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdNacionalidadeChanging(value)
				Me.SendPropertyChanging
				Me._IdNacionalidade = value
				Me.SendPropertyChanged("IdNacionalidade")
				Me.OnIdNacionalidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nacionalidade", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nacionalidade() As String
		Get
			Return Me._Nacionalidade
		End Get
		Set
			If (String.Equals(Me._Nacionalidade, value) = false) Then
				Me.OnNacionalidadeChanging(value)
				Me.SendPropertyChanging
				Me._Nacionalidade = value
				Me.SendPropertyChanged("Nacionalidade")
				Me.OnNacionalidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdExterno", DbType:="int")>  _
	Public Property IdExterno() As Integer
		Get
			Return Me._IdExterno
		End Get
		Set
			If ((Me._IdExterno = value)  _
						= false) Then
				Me.OnIdExternoChanging(value)
				Me.SendPropertyChanging
				Me._IdExterno = value
				Me.SendPropertyChanged("IdExterno")
				Me.OnIdExternoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumBanco", DbType:="int")>  _
	Public Property NumBanco() As Integer
		Get
			Return Me._NumBanco
		End Get
		Set
			If ((Me._NumBanco = value)  _
						= false) Then
				Me.OnNumBancoChanging(value)
				Me.SendPropertyChanging
				Me._NumBanco = value
				Me.SendPropertyChanged("NumBanco")
				Me.OnNumBancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeBanco", DbType:="ntext", CanBeNull:=false)>  _
	Public Property NomeBanco() As String
		Get
			Return Me._NomeBanco
		End Get
		Set
			If (String.Equals(Me._NomeBanco, value) = false) Then
				Me.OnNomeBancoChanging(value)
				Me.SendPropertyChanging
				Me._NomeBanco = value
				Me.SendPropertyChanged("NomeBanco")
				Me.OnNomeBancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBanco", DbType:="int")>  _
	Public Property IdBanco() As Integer
		Get
			Return Me._IdBanco
		End Get
		Set
			If ((Me._IdBanco = value)  _
						= false) Then
				Me.OnIdBancoChanging(value)
				Me.SendPropertyChanging
				Me._IdBanco = value
				Me.SendPropertyChanged("IdBanco")
				Me.OnIdBancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ag", DbType:="ntext", CanBeNull:=false)>  _
	Public Property Ag() As String
		Get
			Return Me._Ag
		End Get
		Set
			If (String.Equals(Me._Ag, value) = false) Then
				Me.OnAgChanging(value)
				Me.SendPropertyChanging
				Me._Ag = value
				Me.SendPropertyChanged("Ag")
				Me.OnAgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Conta", DbType:="ntext", CanBeNull:=false)>  _
	Public Property Conta() As String
		Get
			Return Me._Conta
		End Get
		Set
			If (String.Equals(Me._Conta, value) = false) Then
				Me.OnContaChanging(value)
				Me.SendPropertyChanging
				Me._Conta = value
				Me.SendPropertyChanged("Conta")
				Me.OnContaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Op", DbType:="Ntext", CanBeNull:=false)>  _
	Public Property Op() As String
		Get
			Return Me._Op
		End Get
		Set
			If (String.Equals(Me._Op, value) = false) Then
				Me.OnOpChanging(value)
				Me.SendPropertyChanging
				Me._Op = value
				Me.SendPropertyChanged("Op")
				Me.OnOpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoConta", DbType:="bit")>  _
	Public Property TipoConta() As Boolean
		Get
			Return Me._TipoConta
		End Get
		Set
			If ((Me._TipoConta = value)  _
						= false) Then
				Me.OnTipoContaChanging(value)
				Me.SendPropertyChanging
				Me._TipoConta = value
				Me.SendPropertyChanged("TipoConta")
				Me.OnTipoContaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoDocEspec", DbType:="ntext", CanBeNull:=false)>  _
	Public Property TipoDocEspec() As String
		Get
			Return Me._TipoDocEspec
		End Get
		Set
			If (String.Equals(Me._TipoDocEspec, value) = false) Then
				Me.OnTipoDocEspecChanging(value)
				Me.SendPropertyChanging
				Me._TipoDocEspec = value
				Me.SendPropertyChanged("TipoDocEspec")
				Me.OnTipoDocEspecChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUmeroDoDOC", DbType:="ntext", CanBeNull:=false)>  _
	Public Property NUmeroDoDOC() As String
		Get
			Return Me._NUmeroDoDOC
		End Get
		Set
			If (String.Equals(Me._NUmeroDoDOC, value) = false) Then
				Me.OnNUmeroDoDOCChanging(value)
				Me.SendPropertyChanging
				Me._NUmeroDoDOC = value
				Me.SendPropertyChanged("NUmeroDoDOC")
				Me.OnNUmeroDoDOCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Funcionarios_Login", Storage:="_Login", ThisKey:="IdFuncionario", OtherKey:="IdColaborador")>  _
	Public Property Login() As EntitySet(Of Login)
		Get
			Return Me._Login
		End Get
		Set
			Me._Login.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Funcionarios_DependentesFuncionarios", Storage:="_DependentesFuncionarios", ThisKey:="IdFuncionario", OtherKey:="IdFuncionario")>  _
	Public Property DependentesFuncionarios() As EntitySet(Of DependentesFuncionarios)
		Get
			Return Me._DependentesFuncionarios
		End Get
		Set
			Me._DependentesFuncionarios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Nacionalidades_Funcionarios", Storage:="_Nacionalidades", ThisKey:="IdNacionalidade", OtherKey:="IdNacionalidade", IsForeignKey:=true)>  _
	Public Property Nacionalidades() As Nacionalidades
		Get
			Return Me._Nacionalidades.Entity
		End Get
		Set
			Dim previousValue As Nacionalidades = Me._Nacionalidades.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Nacionalidades.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Nacionalidades.Entity = Nothing
					previousValue.Funcionarios.Remove(Me)
				End If
				Me._Nacionalidades.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Funcionarios.Add(Me)
					Me._IdNacionalidade = value.IdNacionalidade
				Else
					Me._IdNacionalidade = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Nacionalidades")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cargos_Funcionarios", Storage:="_Cargos", ThisKey:="IdCargo", OtherKey:="IdCargo", IsForeignKey:=true)>  _
	Public Property Cargos() As Cargos
		Get
			Return Me._Cargos.Entity
		End Get
		Set
			Dim previousValue As Cargos = Me._Cargos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cargos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cargos.Entity = Nothing
					previousValue.Funcionarios.Remove(Me)
				End If
				Me._Cargos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Funcionarios.Add(Me)
					Me._IdCargo = value.IdCargo
				Else
					Me._IdCargo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cargos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Login(ByVal entity As Login)
		Me.SendPropertyChanging
		entity.Funcionarios = Me
	End Sub
	
	Private Sub detach_Login(ByVal entity As Login)
		Me.SendPropertyChanging
		entity.Funcionarios = Nothing
	End Sub
	
	Private Sub attach_DependentesFuncionarios(ByVal entity As DependentesFuncionarios)
		Me.SendPropertyChanging
		entity.Funcionarios = Me
	End Sub
	
	Private Sub detach_DependentesFuncionarios(ByVal entity As DependentesFuncionarios)
		Me.SendPropertyChanging
		entity.Funcionarios = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DependentesFuncionarios")>  _
Partial Public Class DependentesFuncionarios
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdDependente As Integer
	
	Private _IdFuncionario As System.Nullable(Of Integer)
	
	Private _Nome As String
	
	Private _IdVinculo As System.Nullable(Of Integer)
	
	Private _Vinculo As String
	
	Private _Funcionarios As EntityRef(Of Funcionarios)
	
	Private _VinculosParentais As EntityRef(Of VinculosParentais)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdDependenteChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdDependenteChanged()
    End Sub
    Partial Private Sub OnIdFuncionarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdFuncionarioChanged()
    End Sub
    Partial Private Sub OnNomeChanging(value As String)
    End Sub
    Partial Private Sub OnNomeChanged()
    End Sub
    Partial Private Sub OnIdVinculoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdVinculoChanged()
    End Sub
    Partial Private Sub OnVinculoChanging(value As String)
    End Sub
    Partial Private Sub OnVinculoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Funcionarios = CType(Nothing, EntityRef(Of Funcionarios))
		Me._VinculosParentais = CType(Nothing, EntityRef(Of VinculosParentais))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDependente", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdDependente() As Integer
		Get
			Return Me._IdDependente
		End Get
		Set
			If ((Me._IdDependente = value)  _
						= false) Then
				Me.OnIdDependenteChanging(value)
				Me.SendPropertyChanging
				Me._IdDependente = value
				Me.SendPropertyChanged("IdDependente")
				Me.OnIdDependenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFuncionario", DbType:="Int")>  _
	Public Property IdFuncionario() As System.Nullable(Of Integer)
		Get
			Return Me._IdFuncionario
		End Get
		Set
			If (Me._IdFuncionario.Equals(value) = false) Then
				If Me._Funcionarios.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdFuncionarioChanging(value)
				Me.SendPropertyChanging
				Me._IdFuncionario = value
				Me.SendPropertyChanged("IdFuncionario")
				Me.OnIdFuncionarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nome", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nome() As String
		Get
			Return Me._Nome
		End Get
		Set
			If (String.Equals(Me._Nome, value) = false) Then
				Me.OnNomeChanging(value)
				Me.SendPropertyChanging
				Me._Nome = value
				Me.SendPropertyChanged("Nome")
				Me.OnNomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdVinculo", DbType:="Int")>  _
	Public Property IdVinculo() As System.Nullable(Of Integer)
		Get
			Return Me._IdVinculo
		End Get
		Set
			If (Me._IdVinculo.Equals(value) = false) Then
				If Me._VinculosParentais.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdVinculoChanging(value)
				Me.SendPropertyChanging
				Me._IdVinculo = value
				Me.SendPropertyChanged("IdVinculo")
				Me.OnIdVinculoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vinculo", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Vinculo() As String
		Get
			Return Me._Vinculo
		End Get
		Set
			If (String.Equals(Me._Vinculo, value) = false) Then
				Me.OnVinculoChanging(value)
				Me.SendPropertyChanging
				Me._Vinculo = value
				Me.SendPropertyChanged("Vinculo")
				Me.OnVinculoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Funcionarios_DependentesFuncionarios", Storage:="_Funcionarios", ThisKey:="IdFuncionario", OtherKey:="IdFuncionario", IsForeignKey:=true)>  _
	Public Property Funcionarios() As Funcionarios
		Get
			Return Me._Funcionarios.Entity
		End Get
		Set
			Dim previousValue As Funcionarios = Me._Funcionarios.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Funcionarios.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Funcionarios.Entity = Nothing
					previousValue.DependentesFuncionarios.Remove(Me)
				End If
				Me._Funcionarios.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DependentesFuncionarios.Add(Me)
					Me._IdFuncionario = value.IdFuncionario
				Else
					Me._IdFuncionario = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Funcionarios")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VinculosParentais_DependentesFuncionarios", Storage:="_VinculosParentais", ThisKey:="IdVinculo", OtherKey:="IDVinculoParentesco", IsForeignKey:=true)>  _
	Public Property VinculosParentais() As VinculosParentais
		Get
			Return Me._VinculosParentais.Entity
		End Get
		Set
			Dim previousValue As VinculosParentais = Me._VinculosParentais.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VinculosParentais.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VinculosParentais.Entity = Nothing
					previousValue.DependentesFuncionarios.Remove(Me)
				End If
				Me._VinculosParentais.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DependentesFuncionarios.Add(Me)
					Me._IdVinculo = value.IDVinculoParentesco
				Else
					Me._IdVinculo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("VinculosParentais")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VinculosParentais")>  _
Partial Public Class VinculosParentais
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDVinculoParentesco As Integer
	
	Private _Descrição As String
	
	Private _DependentesFuncionarios As EntitySet(Of DependentesFuncionarios)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDVinculoParentescoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDVinculoParentescoChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DependentesFuncionarios = New EntitySet(Of DependentesFuncionarios)(AddressOf Me.attach_DependentesFuncionarios, AddressOf Me.detach_DependentesFuncionarios)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDVinculoParentesco", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDVinculoParentesco() As Integer
		Get
			Return Me._IDVinculoParentesco
		End Get
		Set
			If ((Me._IDVinculoParentesco = value)  _
						= false) Then
				Me.OnIDVinculoParentescoChanging(value)
				Me.SendPropertyChanging
				Me._IDVinculoParentesco = value
				Me.SendPropertyChanged("IDVinculoParentesco")
				Me.OnIDVinculoParentescoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrição", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descrição
		End Get
		Set
			If (String.Equals(Me._Descrição, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descrição = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VinculosParentais_DependentesFuncionarios", Storage:="_DependentesFuncionarios", ThisKey:="IDVinculoParentesco", OtherKey:="IdVinculo")>  _
	Public Property DependentesFuncionarios() As EntitySet(Of DependentesFuncionarios)
		Get
			Return Me._DependentesFuncionarios
		End Get
		Set
			Me._DependentesFuncionarios.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DependentesFuncionarios(ByVal entity As DependentesFuncionarios)
		Me.SendPropertyChanging
		entity.VinculosParentais = Me
	End Sub
	
	Private Sub detach_DependentesFuncionarios(ByVal entity As DependentesFuncionarios)
		Me.SendPropertyChanging
		entity.VinculosParentais = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VinculosDocumentos")>  _
Partial Public Class VinculosDocumentos
	
	Private _IdVinculo As System.Nullable(Of Integer)
	
	Private _IdDocumento As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdVinculo", DbType:="Int")>  _
	Public Property IdVinculo() As System.Nullable(Of Integer)
		Get
			Return Me._IdVinculo
		End Get
		Set
			If (Me._IdVinculo.Equals(value) = false) Then
				Me._IdVinculo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDocumento", DbType:="Int")>  _
	Public Property IdDocumento() As System.Nullable(Of Integer)
		Get
			Return Me._IdDocumento
		End Get
		Set
			If (Me._IdDocumento.Equals(value) = false) Then
				Me._IdDocumento = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Documentos")>  _
Partial Public Class Documentos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdDocumento As Integer
	
	Private _Descrição As String
	
	Private _Sigla As String
	
	Private _Mascara As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdDocumentoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdDocumentoChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnSiglaChanging(value As String)
    End Sub
    Partial Private Sub OnSiglaChanged()
    End Sub
    Partial Private Sub OnMascaraChanging(value As String)
    End Sub
    Partial Private Sub OnMascaraChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDocumento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdDocumento() As Integer
		Get
			Return Me._IdDocumento
		End Get
		Set
			If ((Me._IdDocumento = value)  _
						= false) Then
				Me.OnIdDocumentoChanging(value)
				Me.SendPropertyChanging
				Me._IdDocumento = value
				Me.SendPropertyChanged("IdDocumento")
				Me.OnIdDocumentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrição", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descrição
		End Get
		Set
			If (String.Equals(Me._Descrição, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descrição = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sigla", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Sigla() As String
		Get
			Return Me._Sigla
		End Get
		Set
			If (String.Equals(Me._Sigla, value) = false) Then
				Me.OnSiglaChanging(value)
				Me.SendPropertyChanging
				Me._Sigla = value
				Me.SendPropertyChanged("Sigla")
				Me.OnSiglaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mascara", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Mascara() As String
		Get
			Return Me._Mascara
		End Get
		Set
			If (String.Equals(Me._Mascara, value) = false) Then
				Me.OnMascaraChanging(value)
				Me.SendPropertyChanging
				Me._Mascara = value
				Me.SendPropertyChanged("Mascara")
				Me.OnMascaraChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Clientes")>  _
Partial Public Class Clientes
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdCliente As Integer
	
	Private _RazãoSocial_nome As String
	
	Private _CPF_CNPJ As String
	
	Private _RG_IE As String
	
	Private _TipoPersonalidade As System.Nullable(Of Boolean)
	
	Private _CEP As String
	
	Private _IdEndereço As System.Nullable(Of Integer)
	
	Private _Endereço As String
	
	Private _Numero As System.Nullable(Of Integer)
	
	Private _Complemento As String
	
	Private _Bairro As String
	
	Private _CIdade As String
	
	Private _Estado As String
	
	Private _Pais As String
	
	Private _Telefone As String
	
	Private _Celular As String
	
	Private _Email As String
	
	Private _IdClienteExt As Integer
	
	Private _Apelido As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdClienteChanged()
    End Sub
    Partial Private Sub OnRazaoSocial_nomeChanging(value As String)
    End Sub
    Partial Private Sub OnRazaoSocial_nomeChanged()
    End Sub
    Partial Private Sub OnCPF_CNPJChanging(value As String)
    End Sub
    Partial Private Sub OnCPF_CNPJChanged()
    End Sub
    Partial Private Sub OnRG_IEChanging(value As String)
    End Sub
    Partial Private Sub OnRG_IEChanged()
    End Sub
    Partial Private Sub OnTipoPersonalidadeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTipoPersonalidadeChanged()
    End Sub
    Partial Private Sub OnCEPChanging(value As String)
    End Sub
    Partial Private Sub OnCEPChanged()
    End Sub
    Partial Private Sub OnIdEnderecoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdEnderecoChanged()
    End Sub
    Partial Private Sub OnEnderecoChanging(value As String)
    End Sub
    Partial Private Sub OnEnderecoChanged()
    End Sub
    Partial Private Sub OnNumeroChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumeroChanged()
    End Sub
    Partial Private Sub OnComplementoChanging(value As String)
    End Sub
    Partial Private Sub OnComplementoChanged()
    End Sub
    Partial Private Sub OnBairroChanging(value As String)
    End Sub
    Partial Private Sub OnBairroChanged()
    End Sub
    Partial Private Sub OnCIdadeChanging(value As String)
    End Sub
    Partial Private Sub OnCIdadeChanged()
    End Sub
    Partial Private Sub OnEstadoChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoChanged()
    End Sub
    Partial Private Sub OnPaisChanging(value As String)
    End Sub
    Partial Private Sub OnPaisChanged()
    End Sub
    Partial Private Sub OnTelefoneChanging(value As String)
    End Sub
    Partial Private Sub OnTelefoneChanged()
    End Sub
    Partial Private Sub OnCelularChanging(value As String)
    End Sub
    Partial Private Sub OnCelularChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnIdClienteExtChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdClienteExtChanged()
    End Sub
    Partial Private Sub OnApelidoChanging(value As String)
    End Sub
    Partial Private Sub OnApelidoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCliente", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdCliente() As Integer
		Get
			Return Me._IdCliente
		End Get
		Set
			If ((Me._IdCliente = value)  _
						= false) Then
				Me.OnIdClienteChanging(value)
				Me.SendPropertyChanging
				Me._IdCliente = value
				Me.SendPropertyChanged("IdCliente")
				Me.OnIdClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RazãoSocial_nome", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RazaoSocial_nome() As String
		Get
			Return Me._RazãoSocial_nome
		End Get
		Set
			If (String.Equals(Me._RazãoSocial_nome, value) = false) Then
				Me.OnRazaoSocial_nomeChanging(value)
				Me.SendPropertyChanging
				Me._RazãoSocial_nome = value
				Me.SendPropertyChanged("RazaoSocial_nome")
				Me.OnRazaoSocial_nomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CPF_CNPJ", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CPF_CNPJ() As String
		Get
			Return Me._CPF_CNPJ
		End Get
		Set
			If (String.Equals(Me._CPF_CNPJ, value) = false) Then
				Me.OnCPF_CNPJChanging(value)
				Me.SendPropertyChanging
				Me._CPF_CNPJ = value
				Me.SendPropertyChanged("CPF_CNPJ")
				Me.OnCPF_CNPJChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RG_IE", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RG_IE() As String
		Get
			Return Me._RG_IE
		End Get
		Set
			If (String.Equals(Me._RG_IE, value) = false) Then
				Me.OnRG_IEChanging(value)
				Me.SendPropertyChanging
				Me._RG_IE = value
				Me.SendPropertyChanged("RG_IE")
				Me.OnRG_IEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoPersonalidade", DbType:="Bit")>  _
	Public Property TipoPersonalidade() As System.Nullable(Of Boolean)
		Get
			Return Me._TipoPersonalidade
		End Get
		Set
			If (Me._TipoPersonalidade.Equals(value) = false) Then
				Me.OnTipoPersonalidadeChanging(value)
				Me.SendPropertyChanging
				Me._TipoPersonalidade = value
				Me.SendPropertyChanged("TipoPersonalidade")
				Me.OnTipoPersonalidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CEP", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CEP() As String
		Get
			Return Me._CEP
		End Get
		Set
			If (String.Equals(Me._CEP, value) = false) Then
				Me.OnCEPChanging(value)
				Me.SendPropertyChanging
				Me._CEP = value
				Me.SendPropertyChanged("CEP")
				Me.OnCEPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEndereço", DbType:="Int")>  _
	Public Property IdEndereco() As System.Nullable(Of Integer)
		Get
			Return Me._IdEndereço
		End Get
		Set
			If (Me._IdEndereço.Equals(value) = false) Then
				Me.OnIdEnderecoChanging(value)
				Me.SendPropertyChanging
				Me._IdEndereço = value
				Me.SendPropertyChanged("IdEndereco")
				Me.OnIdEnderecoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Endereço", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Endereco() As String
		Get
			Return Me._Endereço
		End Get
		Set
			If (String.Equals(Me._Endereço, value) = false) Then
				Me.OnEnderecoChanging(value)
				Me.SendPropertyChanging
				Me._Endereço = value
				Me.SendPropertyChanged("Endereco")
				Me.OnEnderecoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Numero", DbType:="Int")>  _
	Public Property Numero() As System.Nullable(Of Integer)
		Get
			Return Me._Numero
		End Get
		Set
			If (Me._Numero.Equals(value) = false) Then
				Me.OnNumeroChanging(value)
				Me.SendPropertyChanging
				Me._Numero = value
				Me.SendPropertyChanged("Numero")
				Me.OnNumeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Complemento", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Complemento() As String
		Get
			Return Me._Complemento
		End Get
		Set
			If (String.Equals(Me._Complemento, value) = false) Then
				Me.OnComplementoChanging(value)
				Me.SendPropertyChanging
				Me._Complemento = value
				Me.SendPropertyChanged("Complemento")
				Me.OnComplementoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bairro", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Bairro() As String
		Get
			Return Me._Bairro
		End Get
		Set
			If (String.Equals(Me._Bairro, value) = false) Then
				Me.OnBairroChanging(value)
				Me.SendPropertyChanging
				Me._Bairro = value
				Me.SendPropertyChanged("Bairro")
				Me.OnBairroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIdade", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CIdade() As String
		Get
			Return Me._CIdade
		End Get
		Set
			If (String.Equals(Me._CIdade, value) = false) Then
				Me.OnCIdadeChanging(value)
				Me.SendPropertyChanging
				Me._CIdade = value
				Me.SendPropertyChanged("CIdade")
				Me.OnCIdadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Estado", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Estado() As String
		Get
			Return Me._Estado
		End Get
		Set
			If (String.Equals(Me._Estado, value) = false) Then
				Me.OnEstadoChanging(value)
				Me.SendPropertyChanging
				Me._Estado = value
				Me.SendPropertyChanged("Estado")
				Me.OnEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pais", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pais() As String
		Get
			Return Me._Pais
		End Get
		Set
			If (String.Equals(Me._Pais, value) = false) Then
				Me.OnPaisChanging(value)
				Me.SendPropertyChanging
				Me._Pais = value
				Me.SendPropertyChanged("Pais")
				Me.OnPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefone", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefone() As String
		Get
			Return Me._Telefone
		End Get
		Set
			If (String.Equals(Me._Telefone, value) = false) Then
				Me.OnTelefoneChanging(value)
				Me.SendPropertyChanging
				Me._Telefone = value
				Me.SendPropertyChanged("Telefone")
				Me.OnTelefoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Celular", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Celular() As String
		Get
			Return Me._Celular
		End Get
		Set
			If (String.Equals(Me._Celular, value) = false) Then
				Me.OnCelularChanging(value)
				Me.SendPropertyChanging
				Me._Celular = value
				Me.SendPropertyChanged("Celular")
				Me.OnCelularChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdClienteExt", DbType:="int")>  _
	Public Property IdClienteExt() As Integer
		Get
			Return Me._IdClienteExt
		End Get
		Set
			If ((Me._IdClienteExt = value)  _
						= false) Then
				Me.OnIdClienteExtChanging(value)
				Me.SendPropertyChanging
				Me._IdClienteExt = value
				Me.SendPropertyChanged("IdClienteExt")
				Me.OnIdClienteExtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Apelido", DbType:="Ntext", CanBeNull:=false)>  _
	Public Property Apelido() As String
		Get
			Return Me._Apelido
		End Get
		Set
			If (String.Equals(Me._Apelido, value) = false) Then
				Me.OnApelidoChanging(value)
				Me.SendPropertyChanging
				Me._Apelido = value
				Me.SendPropertyChanged("Apelido")
				Me.OnApelidoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CategoriasProdutos")>  _
Partial Public Class CategoriasProdutos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdCategoriaProduto As Integer
	
	Private _Descrição As String
	
	Private _SubCategoriasProduto As EntitySet(Of SubCategoriasProduto)
	
	Private _Produtos As EntitySet(Of Produtos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdCategoriaProdutoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCategoriaProdutoChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SubCategoriasProduto = New EntitySet(Of SubCategoriasProduto)(AddressOf Me.attach_SubCategoriasProduto, AddressOf Me.detach_SubCategoriasProduto)
		Me._Produtos = New EntitySet(Of Produtos)(AddressOf Me.attach_Produtos, AddressOf Me.detach_Produtos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCategoriaProduto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdCategoriaProduto() As Integer
		Get
			Return Me._IdCategoriaProduto
		End Get
		Set
			If ((Me._IdCategoriaProduto = value)  _
						= false) Then
				Me.OnIdCategoriaProdutoChanging(value)
				Me.SendPropertyChanging
				Me._IdCategoriaProduto = value
				Me.SendPropertyChanged("IdCategoriaProduto")
				Me.OnIdCategoriaProdutoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrição", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descrição
		End Get
		Set
			If (String.Equals(Me._Descrição, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descrição = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CategoriasProdutos_SubCategoriasProduto", Storage:="_SubCategoriasProduto", ThisKey:="IdCategoriaProduto", OtherKey:="IdCategoria")>  _
	Public Property SubCategoriasProduto() As EntitySet(Of SubCategoriasProduto)
		Get
			Return Me._SubCategoriasProduto
		End Get
		Set
			Me._SubCategoriasProduto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CategoriasProdutos_Produtos", Storage:="_Produtos", ThisKey:="IdCategoriaProduto", OtherKey:="IdCategoria")>  _
	Public Property Produtos() As EntitySet(Of Produtos)
		Get
			Return Me._Produtos
		End Get
		Set
			Me._Produtos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SubCategoriasProduto(ByVal entity As SubCategoriasProduto)
		Me.SendPropertyChanging
		entity.CategoriasProdutos = Me
	End Sub
	
	Private Sub detach_SubCategoriasProduto(ByVal entity As SubCategoriasProduto)
		Me.SendPropertyChanging
		entity.CategoriasProdutos = Nothing
	End Sub
	
	Private Sub attach_Produtos(ByVal entity As Produtos)
		Me.SendPropertyChanging
		entity.CategoriasProdutos = Me
	End Sub
	
	Private Sub detach_Produtos(ByVal entity As Produtos)
		Me.SendPropertyChanging
		entity.CategoriasProdutos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SubCategoriasProduto")>  _
Partial Public Class SubCategoriasProduto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdSubCategoria As Integer
	
	Private _IdCategoria As System.Nullable(Of Integer)
	
	Private _Descrição As String
	
	Private _MarkupSugerido As System.Nullable(Of Decimal)
	
	Private _Produtos As EntitySet(Of Produtos)
	
	Private _CategoriasProdutos As EntityRef(Of CategoriasProdutos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdSubCategoriaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSubCategoriaChanged()
    End Sub
    Partial Private Sub OnIdCategoriaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdCategoriaChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnMarkupSugeridoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMarkupSugeridoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Produtos = New EntitySet(Of Produtos)(AddressOf Me.attach_Produtos, AddressOf Me.detach_Produtos)
		Me._CategoriasProdutos = CType(Nothing, EntityRef(Of CategoriasProdutos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSubCategoria", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdSubCategoria() As Integer
		Get
			Return Me._IdSubCategoria
		End Get
		Set
			If ((Me._IdSubCategoria = value)  _
						= false) Then
				Me.OnIdSubCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._IdSubCategoria = value
				Me.SendPropertyChanged("IdSubCategoria")
				Me.OnIdSubCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCategoria", DbType:="Int")>  _
	Public Property IdCategoria() As System.Nullable(Of Integer)
		Get
			Return Me._IdCategoria
		End Get
		Set
			If (Me._IdCategoria.Equals(value) = false) Then
				If Me._CategoriasProdutos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._IdCategoria = value
				Me.SendPropertyChanged("IdCategoria")
				Me.OnIdCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrição", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descrição
		End Get
		Set
			If (String.Equals(Me._Descrição, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descrição = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarkupSugerido", DbType:="Money")>  _
	Public Property MarkupSugerido() As System.Nullable(Of Decimal)
		Get
			Return Me._MarkupSugerido
		End Get
		Set
			If (Me._MarkupSugerido.Equals(value) = false) Then
				Me.OnMarkupSugeridoChanging(value)
				Me.SendPropertyChanging
				Me._MarkupSugerido = value
				Me.SendPropertyChanged("MarkupSugerido")
				Me.OnMarkupSugeridoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SubCategoriasProduto_Produtos", Storage:="_Produtos", ThisKey:="IdSubCategoria", OtherKey:="IDSubCategoria")>  _
	Public Property Produtos() As EntitySet(Of Produtos)
		Get
			Return Me._Produtos
		End Get
		Set
			Me._Produtos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CategoriasProdutos_SubCategoriasProduto", Storage:="_CategoriasProdutos", ThisKey:="IdCategoria", OtherKey:="IdCategoriaProduto", IsForeignKey:=true)>  _
	Public Property CategoriasProdutos() As CategoriasProdutos
		Get
			Return Me._CategoriasProdutos.Entity
		End Get
		Set
			Dim previousValue As CategoriasProdutos = Me._CategoriasProdutos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CategoriasProdutos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CategoriasProdutos.Entity = Nothing
					previousValue.SubCategoriasProduto.Remove(Me)
				End If
				Me._CategoriasProdutos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SubCategoriasProduto.Add(Me)
					Me._IdCategoria = value.IdCategoriaProduto
				Else
					Me._IdCategoria = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CategoriasProdutos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Produtos(ByVal entity As Produtos)
		Me.SendPropertyChanging
		entity.SubCategoriasProduto = Me
	End Sub
	
	Private Sub detach_Produtos(ByVal entity As Produtos)
		Me.SendPropertyChanging
		entity.SubCategoriasProduto = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UnidadeParametro")>  _
Partial Public Class UnidadeParametro
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdUnidade As Integer
	
	Private _Descrição As String
	
	Private _Sigla As String
	
	Private _UnidadesGeral As EntitySet(Of UnidadesGeral)
	
	Private _Produtos As EntitySet(Of Produtos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdUnidadeChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUnidadeChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnSiglaChanging(value As String)
    End Sub
    Partial Private Sub OnSiglaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UnidadesGeral = New EntitySet(Of UnidadesGeral)(AddressOf Me.attach_UnidadesGeral, AddressOf Me.detach_UnidadesGeral)
		Me._Produtos = New EntitySet(Of Produtos)(AddressOf Me.attach_Produtos, AddressOf Me.detach_Produtos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUnidade", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdUnidade() As Integer
		Get
			Return Me._IdUnidade
		End Get
		Set
			If ((Me._IdUnidade = value)  _
						= false) Then
				Me.OnIdUnidadeChanging(value)
				Me.SendPropertyChanging
				Me._IdUnidade = value
				Me.SendPropertyChanged("IdUnidade")
				Me.OnIdUnidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrição", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descrição
		End Get
		Set
			If (String.Equals(Me._Descrição, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descrição = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sigla", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Sigla() As String
		Get
			Return Me._Sigla
		End Get
		Set
			If (String.Equals(Me._Sigla, value) = false) Then
				Me.OnSiglaChanging(value)
				Me.SendPropertyChanging
				Me._Sigla = value
				Me.SendPropertyChanged("Sigla")
				Me.OnSiglaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UnidadeParametro_UnidadesGeral", Storage:="_UnidadesGeral", ThisKey:="IdUnidade", OtherKey:="IdUnidade")>  _
	Public Property UnidadesGeral() As EntitySet(Of UnidadesGeral)
		Get
			Return Me._UnidadesGeral
		End Get
		Set
			Me._UnidadesGeral.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UnidadeParametro_Produtos", Storage:="_Produtos", ThisKey:="IdUnidade", OtherKey:="IdUnComp")>  _
	Public Property Produtos() As EntitySet(Of Produtos)
		Get
			Return Me._Produtos
		End Get
		Set
			Me._Produtos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UnidadesGeral(ByVal entity As UnidadesGeral)
		Me.SendPropertyChanging
		entity.UnidadeParametro = Me
	End Sub
	
	Private Sub detach_UnidadesGeral(ByVal entity As UnidadesGeral)
		Me.SendPropertyChanging
		entity.UnidadeParametro = Nothing
	End Sub
	
	Private Sub attach_Produtos(ByVal entity As Produtos)
		Me.SendPropertyChanging
		entity.UnidadeParametro = Me
	End Sub
	
	Private Sub detach_Produtos(ByVal entity As Produtos)
		Me.SendPropertyChanging
		entity.UnidadeParametro = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UnidadesGeral")>  _
Partial Public Class UnidadesGeral
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdUnidadeX As Integer
	
	Private _IdUnidade As System.Nullable(Of Integer)
	
	Private _ft_X As System.Nullable(Of Integer)
	
	Private _ChaveValidada As System.Nullable(Of Integer)
	
	Private _Operação As System.Nullable(Of Boolean)
	
	Private _Produtos As EntitySet(Of Produtos)
	
	Private _UnidadeParametro As EntityRef(Of UnidadeParametro)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdUnidadeXChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUnidadeXChanged()
    End Sub
    Partial Private Sub OnIdUnidadeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUnidadeChanged()
    End Sub
    Partial Private Sub Onft_XChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onft_XChanged()
    End Sub
    Partial Private Sub OnChaveValidadaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnChaveValidadaChanged()
    End Sub
    Partial Private Sub OnOperacaoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnOperacaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Produtos = New EntitySet(Of Produtos)(AddressOf Me.attach_Produtos, AddressOf Me.detach_Produtos)
		Me._UnidadeParametro = CType(Nothing, EntityRef(Of UnidadeParametro))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUnidadeX", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdUnidadeX() As Integer
		Get
			Return Me._IdUnidadeX
		End Get
		Set
			If ((Me._IdUnidadeX = value)  _
						= false) Then
				Me.OnIdUnidadeXChanging(value)
				Me.SendPropertyChanging
				Me._IdUnidadeX = value
				Me.SendPropertyChanged("IdUnidadeX")
				Me.OnIdUnidadeXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUnidade", DbType:="Int")>  _
	Public Property IdUnidade() As System.Nullable(Of Integer)
		Get
			Return Me._IdUnidade
		End Get
		Set
			If (Me._IdUnidade.Equals(value) = false) Then
				If Me._UnidadeParametro.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUnidadeChanging(value)
				Me.SendPropertyChanging
				Me._IdUnidade = value
				Me.SendPropertyChanged("IdUnidade")
				Me.OnIdUnidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ft_X", DbType:="Int")>  _
	Public Property ft_X() As System.Nullable(Of Integer)
		Get
			Return Me._ft_X
		End Get
		Set
			If (Me._ft_X.Equals(value) = false) Then
				Me.Onft_XChanging(value)
				Me.SendPropertyChanging
				Me._ft_X = value
				Me.SendPropertyChanged("ft_X")
				Me.Onft_XChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChaveValidada", DbType:="Int")>  _
	Public Property ChaveValidada() As System.Nullable(Of Integer)
		Get
			Return Me._ChaveValidada
		End Get
		Set
			If (Me._ChaveValidada.Equals(value) = false) Then
				Me.OnChaveValidadaChanging(value)
				Me.SendPropertyChanging
				Me._ChaveValidada = value
				Me.SendPropertyChanged("ChaveValidada")
				Me.OnChaveValidadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Operação", DbType:="Bit")>  _
	Public Property Operacao() As System.Nullable(Of Boolean)
		Get
			Return Me._Operação
		End Get
		Set
			If (Me._Operação.Equals(value) = false) Then
				Me.OnOperacaoChanging(value)
				Me.SendPropertyChanging
				Me._Operação = value
				Me.SendPropertyChanged("Operacao")
				Me.OnOperacaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UnidadesGeral_Produtos", Storage:="_Produtos", ThisKey:="ChaveValidada", OtherKey:="IdUnVenda")>  _
	Public Property Produtos() As EntitySet(Of Produtos)
		Get
			Return Me._Produtos
		End Get
		Set
			Me._Produtos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UnidadeParametro_UnidadesGeral", Storage:="_UnidadeParametro", ThisKey:="IdUnidade", OtherKey:="IdUnidade", IsForeignKey:=true)>  _
	Public Property UnidadeParametro() As UnidadeParametro
		Get
			Return Me._UnidadeParametro.Entity
		End Get
		Set
			Dim previousValue As UnidadeParametro = Me._UnidadeParametro.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UnidadeParametro.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UnidadeParametro.Entity = Nothing
					previousValue.UnidadesGeral.Remove(Me)
				End If
				Me._UnidadeParametro.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UnidadesGeral.Add(Me)
					Me._IdUnidade = value.IdUnidade
				Else
					Me._IdUnidade = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("UnidadeParametro")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Produtos(ByVal entity As Produtos)
		Me.SendPropertyChanging
		entity.UnidadesGeral = Me
	End Sub
	
	Private Sub detach_Produtos(ByVal entity As Produtos)
		Me.SendPropertyChanging
		entity.UnidadesGeral = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Produtos")>  _
Partial Public Class Produtos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdProduto As Integer
	
	Private _CodFabricante As String
	
	Private _CodBarras As String
	
	Private _IdCategoria As System.Nullable(Of Integer)
	
	Private _Categoria As String
	
	Private _IDSubCategoria As System.Nullable(Of Integer)
	
	Private _SubCategoria As String
	
	Private _NCM As String
	
	Private _IdUnComp As System.Nullable(Of Integer)
	
	Private _UnCompra As String
	
	Private _IdUnVenda As System.Nullable(Of Integer)
	
	Private _UnVenda As String
	
	Private _VendaDireta As System.Nullable(Of Boolean)
	
	Private _Insumo As System.Nullable(Of Boolean)
	
	Private _UsoInterno As System.Nullable(Of Boolean)
	
	Private _Reaproveitamento As System.Nullable(Of Boolean)
	
	Private _Descrição As String
	
	Private _IdFabricante As Integer
	
	Private _Fabricante As String
	
	Private _Altura As Decimal
	
	Private _Largura As Decimal
	
	Private _Profundidade As Decimal
	
	Private _Peso As Decimal
	
	Private _Validade As Integer
	
	Private _Markup As Decimal
	
	Private _ControleValidade As Boolean
	
	Private _DisponivelOnLine As Boolean
	
	Private _Pctge As Integer
	
	Private _QtMin As Integer
	
	Private _QtMax As Integer
	
	Private _IdProdutoExt As Integer
	
	Private _IdTrib As Integer
	
	Private _ImagemProduto As EntitySet(Of ImagemProduto)
	
	Private _VinculoProdutoFornecedor As EntitySet(Of VinculoProdutoFornecedor)
	
	Private _CategoriasProdutos As EntityRef(Of CategoriasProdutos)
	
	Private _SubCategoriasProduto As EntityRef(Of SubCategoriasProduto)
	
	Private _UnidadeParametro As EntityRef(Of UnidadeParametro)
	
	Private _UnidadesGeral As EntityRef(Of UnidadesGeral)
	
	Private _Fabricantes As EntityRef(Of Fabricantes)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdProdutoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProdutoChanged()
    End Sub
    Partial Private Sub OnCodFabricanteChanging(value As String)
    End Sub
    Partial Private Sub OnCodFabricanteChanged()
    End Sub
    Partial Private Sub OnCodBarrasChanging(value As String)
    End Sub
    Partial Private Sub OnCodBarrasChanged()
    End Sub
    Partial Private Sub OnIdCategoriaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdCategoriaChanged()
    End Sub
    Partial Private Sub OnCategoriaChanging(value As String)
    End Sub
    Partial Private Sub OnCategoriaChanged()
    End Sub
    Partial Private Sub OnIDSubCategoriaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDSubCategoriaChanged()
    End Sub
    Partial Private Sub OnSubCategoriaChanging(value As String)
    End Sub
    Partial Private Sub OnSubCategoriaChanged()
    End Sub
    Partial Private Sub OnNCMChanging(value As String)
    End Sub
    Partial Private Sub OnNCMChanged()
    End Sub
    Partial Private Sub OnIdUnCompChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUnCompChanged()
    End Sub
    Partial Private Sub OnUnCompraChanging(value As String)
    End Sub
    Partial Private Sub OnUnCompraChanged()
    End Sub
    Partial Private Sub OnIdUnVendaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUnVendaChanged()
    End Sub
    Partial Private Sub OnUnVendaChanging(value As String)
    End Sub
    Partial Private Sub OnUnVendaChanged()
    End Sub
    Partial Private Sub OnVendaDiretaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnVendaDiretaChanged()
    End Sub
    Partial Private Sub OnInsumoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnInsumoChanged()
    End Sub
    Partial Private Sub OnUsoInternoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnUsoInternoChanged()
    End Sub
    Partial Private Sub OnReaproveitamentoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnReaproveitamentoChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnIdFabricanteChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdFabricanteChanged()
    End Sub
    Partial Private Sub OnFabricanteChanging(value As String)
    End Sub
    Partial Private Sub OnFabricanteChanged()
    End Sub
    Partial Private Sub OnAlturaChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAlturaChanged()
    End Sub
    Partial Private Sub OnLarguraChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLarguraChanged()
    End Sub
    Partial Private Sub OnProfundidadeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnProfundidadeChanged()
    End Sub
    Partial Private Sub OnPesoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPesoChanged()
    End Sub
    Partial Private Sub OnValidadeChanging(value As Integer)
    End Sub
    Partial Private Sub OnValidadeChanged()
    End Sub
    Partial Private Sub OnMarkupChanging(value As Decimal)
    End Sub
    Partial Private Sub OnMarkupChanged()
    End Sub
    Partial Private Sub OnControleValidadeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnControleValidadeChanged()
    End Sub
    Partial Private Sub OnDisponivelOnLineChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDisponivelOnLineChanged()
    End Sub
    Partial Private Sub OnPctgeChanging(value As Integer)
    End Sub
    Partial Private Sub OnPctgeChanged()
    End Sub
    Partial Private Sub OnQtMinChanging(value As Integer)
    End Sub
    Partial Private Sub OnQtMinChanged()
    End Sub
    Partial Private Sub OnQtMaxChanging(value As Integer)
    End Sub
    Partial Private Sub OnQtMaxChanged()
    End Sub
    Partial Private Sub OnIdProdutoExtChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProdutoExtChanged()
    End Sub
    Partial Private Sub OnIdTribChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTribChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ImagemProduto = New EntitySet(Of ImagemProduto)(AddressOf Me.attach_ImagemProduto, AddressOf Me.detach_ImagemProduto)
		Me._VinculoProdutoFornecedor = New EntitySet(Of VinculoProdutoFornecedor)(AddressOf Me.attach_VinculoProdutoFornecedor, AddressOf Me.detach_VinculoProdutoFornecedor)
		Me._CategoriasProdutos = CType(Nothing, EntityRef(Of CategoriasProdutos))
		Me._SubCategoriasProduto = CType(Nothing, EntityRef(Of SubCategoriasProduto))
		Me._UnidadeParametro = CType(Nothing, EntityRef(Of UnidadeParametro))
		Me._UnidadesGeral = CType(Nothing, EntityRef(Of UnidadesGeral))
		Me._Fabricantes = CType(Nothing, EntityRef(Of Fabricantes))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProduto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdProduto() As Integer
		Get
			Return Me._IdProduto
		End Get
		Set
			If ((Me._IdProduto = value)  _
						= false) Then
				Me.OnIdProdutoChanging(value)
				Me.SendPropertyChanging
				Me._IdProduto = value
				Me.SendPropertyChanged("IdProduto")
				Me.OnIdProdutoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodFabricante", DbType:="ntext")>  _
	Public Property CodFabricante() As String
		Get
			Return Me._CodFabricante
		End Get
		Set
			If (String.Equals(Me._CodFabricante, value) = false) Then
				Me.OnCodFabricanteChanging(value)
				Me.SendPropertyChanging
				Me._CodFabricante = value
				Me.SendPropertyChanged("CodFabricante")
				Me.OnCodFabricanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodBarras", DbType:="ntext")>  _
	Public Property CodBarras() As String
		Get
			Return Me._CodBarras
		End Get
		Set
			If (String.Equals(Me._CodBarras, value) = false) Then
				Me.OnCodBarrasChanging(value)
				Me.SendPropertyChanging
				Me._CodBarras = value
				Me.SendPropertyChanged("CodBarras")
				Me.OnCodBarrasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCategoria", DbType:="Int")>  _
	Public Property IdCategoria() As System.Nullable(Of Integer)
		Get
			Return Me._IdCategoria
		End Get
		Set
			If (Me._IdCategoria.Equals(value) = false) Then
				If Me._CategoriasProdutos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._IdCategoria = value
				Me.SendPropertyChanged("IdCategoria")
				Me.OnIdCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Categoria", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Categoria() As String
		Get
			Return Me._Categoria
		End Get
		Set
			If (String.Equals(Me._Categoria, value) = false) Then
				Me.OnCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._Categoria = value
				Me.SendPropertyChanged("Categoria")
				Me.OnCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDSubCategoria", DbType:="Int")>  _
	Public Property IDSubCategoria() As System.Nullable(Of Integer)
		Get
			Return Me._IDSubCategoria
		End Get
		Set
			If (Me._IDSubCategoria.Equals(value) = false) Then
				If Me._SubCategoriasProduto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDSubCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._IDSubCategoria = value
				Me.SendPropertyChanged("IDSubCategoria")
				Me.OnIDSubCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubCategoria", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SubCategoria() As String
		Get
			Return Me._SubCategoria
		End Get
		Set
			If (String.Equals(Me._SubCategoria, value) = false) Then
				Me.OnSubCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._SubCategoria = value
				Me.SendPropertyChanged("SubCategoria")
				Me.OnSubCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCM", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NCM() As String
		Get
			Return Me._NCM
		End Get
		Set
			If (String.Equals(Me._NCM, value) = false) Then
				Me.OnNCMChanging(value)
				Me.SendPropertyChanging
				Me._NCM = value
				Me.SendPropertyChanged("NCM")
				Me.OnNCMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUnComp", DbType:="Int")>  _
	Public Property IdUnComp() As System.Nullable(Of Integer)
		Get
			Return Me._IdUnComp
		End Get
		Set
			If (Me._IdUnComp.Equals(value) = false) Then
				If Me._UnidadeParametro.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUnCompChanging(value)
				Me.SendPropertyChanging
				Me._IdUnComp = value
				Me.SendPropertyChanged("IdUnComp")
				Me.OnIdUnCompChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnCompra", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UnCompra() As String
		Get
			Return Me._UnCompra
		End Get
		Set
			If (String.Equals(Me._UnCompra, value) = false) Then
				Me.OnUnCompraChanging(value)
				Me.SendPropertyChanging
				Me._UnCompra = value
				Me.SendPropertyChanged("UnCompra")
				Me.OnUnCompraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUnVenda", DbType:="Int")>  _
	Public Property IdUnVenda() As System.Nullable(Of Integer)
		Get
			Return Me._IdUnVenda
		End Get
		Set
			If (Me._IdUnVenda.Equals(value) = false) Then
				If Me._UnidadesGeral.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUnVendaChanging(value)
				Me.SendPropertyChanging
				Me._IdUnVenda = value
				Me.SendPropertyChanged("IdUnVenda")
				Me.OnIdUnVendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnVenda", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UnVenda() As String
		Get
			Return Me._UnVenda
		End Get
		Set
			If (String.Equals(Me._UnVenda, value) = false) Then
				Me.OnUnVendaChanging(value)
				Me.SendPropertyChanging
				Me._UnVenda = value
				Me.SendPropertyChanged("UnVenda")
				Me.OnUnVendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VendaDireta", DbType:="Bit")>  _
	Public Property VendaDireta() As System.Nullable(Of Boolean)
		Get
			Return Me._VendaDireta
		End Get
		Set
			If (Me._VendaDireta.Equals(value) = false) Then
				Me.OnVendaDiretaChanging(value)
				Me.SendPropertyChanging
				Me._VendaDireta = value
				Me.SendPropertyChanged("VendaDireta")
				Me.OnVendaDiretaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Insumo", DbType:="Bit")>  _
	Public Property Insumo() As System.Nullable(Of Boolean)
		Get
			Return Me._Insumo
		End Get
		Set
			If (Me._Insumo.Equals(value) = false) Then
				Me.OnInsumoChanging(value)
				Me.SendPropertyChanging
				Me._Insumo = value
				Me.SendPropertyChanged("Insumo")
				Me.OnInsumoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UsoInterno", DbType:="Bit")>  _
	Public Property UsoInterno() As System.Nullable(Of Boolean)
		Get
			Return Me._UsoInterno
		End Get
		Set
			If (Me._UsoInterno.Equals(value) = false) Then
				Me.OnUsoInternoChanging(value)
				Me.SendPropertyChanging
				Me._UsoInterno = value
				Me.SendPropertyChanged("UsoInterno")
				Me.OnUsoInternoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reaproveitamento", DbType:="Bit")>  _
	Public Property Reaproveitamento() As System.Nullable(Of Boolean)
		Get
			Return Me._Reaproveitamento
		End Get
		Set
			If (Me._Reaproveitamento.Equals(value) = false) Then
				Me.OnReaproveitamentoChanging(value)
				Me.SendPropertyChanging
				Me._Reaproveitamento = value
				Me.SendPropertyChanged("Reaproveitamento")
				Me.OnReaproveitamentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrição", DbType:="Ntext", CanBeNull:=false)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descrição
		End Get
		Set
			If (String.Equals(Me._Descrição, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descrição = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFabricante", DbType:="int")>  _
	Public Property IdFabricante() As Integer
		Get
			Return Me._IdFabricante
		End Get
		Set
			If ((Me._IdFabricante = value)  _
						= false) Then
				If Me._Fabricantes.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdFabricanteChanging(value)
				Me.SendPropertyChanging
				Me._IdFabricante = value
				Me.SendPropertyChanged("IdFabricante")
				Me.OnIdFabricanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fabricante", DbType:="ntext", CanBeNull:=false)>  _
	Public Property Fabricante() As String
		Get
			Return Me._Fabricante
		End Get
		Set
			If (String.Equals(Me._Fabricante, value) = false) Then
				Me.OnFabricanteChanging(value)
				Me.SendPropertyChanging
				Me._Fabricante = value
				Me.SendPropertyChanged("Fabricante")
				Me.OnFabricanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Altura", DbType:="money")>  _
	Public Property Altura() As Decimal
		Get
			Return Me._Altura
		End Get
		Set
			If ((Me._Altura = value)  _
						= false) Then
				Me.OnAlturaChanging(value)
				Me.SendPropertyChanging
				Me._Altura = value
				Me.SendPropertyChanged("Altura")
				Me.OnAlturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Largura", DbType:="money")>  _
	Public Property Largura() As Decimal
		Get
			Return Me._Largura
		End Get
		Set
			If ((Me._Largura = value)  _
						= false) Then
				Me.OnLarguraChanging(value)
				Me.SendPropertyChanging
				Me._Largura = value
				Me.SendPropertyChanged("Largura")
				Me.OnLarguraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Profundidade", DbType:="money")>  _
	Public Property Profundidade() As Decimal
		Get
			Return Me._Profundidade
		End Get
		Set
			If ((Me._Profundidade = value)  _
						= false) Then
				Me.OnProfundidadeChanging(value)
				Me.SendPropertyChanging
				Me._Profundidade = value
				Me.SendPropertyChanged("Profundidade")
				Me.OnProfundidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Peso", DbType:="money")>  _
	Public Property Peso() As Decimal
		Get
			Return Me._Peso
		End Get
		Set
			If ((Me._Peso = value)  _
						= false) Then
				Me.OnPesoChanging(value)
				Me.SendPropertyChanging
				Me._Peso = value
				Me.SendPropertyChanged("Peso")
				Me.OnPesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="validade", Storage:="_Validade", DbType:="int")>  _
	Public Property Validade() As Integer
		Get
			Return Me._Validade
		End Get
		Set
			If ((Me._Validade = value)  _
						= false) Then
				Me.OnValidadeChanging(value)
				Me.SendPropertyChanging
				Me._Validade = value
				Me.SendPropertyChanged("Validade")
				Me.OnValidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Markup", DbType:="money")>  _
	Public Property Markup() As Decimal
		Get
			Return Me._Markup
		End Get
		Set
			If ((Me._Markup = value)  _
						= false) Then
				Me.OnMarkupChanging(value)
				Me.SendPropertyChanging
				Me._Markup = value
				Me.SendPropertyChanged("Markup")
				Me.OnMarkupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ControleValidade", DbType:="bit")>  _
	Public Property ControleValidade() As Boolean
		Get
			Return Me._ControleValidade
		End Get
		Set
			If ((Me._ControleValidade = value)  _
						= false) Then
				Me.OnControleValidadeChanging(value)
				Me.SendPropertyChanging
				Me._ControleValidade = value
				Me.SendPropertyChanged("ControleValidade")
				Me.OnControleValidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisponivelOnLine", DbType:="Bit")>  _
	Public Property DisponivelOnLine() As Boolean
		Get
			Return Me._DisponivelOnLine
		End Get
		Set
			If ((Me._DisponivelOnLine = value)  _
						= false) Then
				Me.OnDisponivelOnLineChanging(value)
				Me.SendPropertyChanging
				Me._DisponivelOnLine = value
				Me.SendPropertyChanged("DisponivelOnLine")
				Me.OnDisponivelOnLineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pctge", DbType:="int")>  _
	Public Property Pctge() As Integer
		Get
			Return Me._Pctge
		End Get
		Set
			If ((Me._Pctge = value)  _
						= false) Then
				Me.OnPctgeChanging(value)
				Me.SendPropertyChanging
				Me._Pctge = value
				Me.SendPropertyChanged("Pctge")
				Me.OnPctgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QtMin", DbType:="int")>  _
	Public Property QtMin() As Integer
		Get
			Return Me._QtMin
		End Get
		Set
			If ((Me._QtMin = value)  _
						= false) Then
				Me.OnQtMinChanging(value)
				Me.SendPropertyChanging
				Me._QtMin = value
				Me.SendPropertyChanged("QtMin")
				Me.OnQtMinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QtMax", DbType:="int")>  _
	Public Property QtMax() As Integer
		Get
			Return Me._QtMax
		End Get
		Set
			If ((Me._QtMax = value)  _
						= false) Then
				Me.OnQtMaxChanging(value)
				Me.SendPropertyChanging
				Me._QtMax = value
				Me.SendPropertyChanged("QtMax")
				Me.OnQtMaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProdutoExt", DbType:="int")>  _
	Public Property IdProdutoExt() As Integer
		Get
			Return Me._IdProdutoExt
		End Get
		Set
			If ((Me._IdProdutoExt = value)  _
						= false) Then
				Me.OnIdProdutoExtChanging(value)
				Me.SendPropertyChanging
				Me._IdProdutoExt = value
				Me.SendPropertyChanged("IdProdutoExt")
				Me.OnIdProdutoExtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTrib", DbType:="Int")>  _
	Public Property IdTrib() As Integer
		Get
			Return Me._IdTrib
		End Get
		Set
			If ((Me._IdTrib = value)  _
						= false) Then
				Me.OnIdTribChanging(value)
				Me.SendPropertyChanging
				Me._IdTrib = value
				Me.SendPropertyChanged("IdTrib")
				Me.OnIdTribChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Produtos_ImagemProduto", Storage:="_ImagemProduto", ThisKey:="IdProduto", OtherKey:="IdProduto")>  _
	Public Property ImagemProduto() As EntitySet(Of ImagemProduto)
		Get
			Return Me._ImagemProduto
		End Get
		Set
			Me._ImagemProduto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Produtos_VinculoProdutoFornecedor", Storage:="_VinculoProdutoFornecedor", ThisKey:="IdProduto", OtherKey:="IdProduto")>  _
	Public Property VinculoProdutoFornecedor() As EntitySet(Of VinculoProdutoFornecedor)
		Get
			Return Me._VinculoProdutoFornecedor
		End Get
		Set
			Me._VinculoProdutoFornecedor.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CategoriasProdutos_Produtos", Storage:="_CategoriasProdutos", ThisKey:="IdCategoria", OtherKey:="IdCategoriaProduto", IsForeignKey:=true)>  _
	Public Property CategoriasProdutos() As CategoriasProdutos
		Get
			Return Me._CategoriasProdutos.Entity
		End Get
		Set
			Dim previousValue As CategoriasProdutos = Me._CategoriasProdutos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CategoriasProdutos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CategoriasProdutos.Entity = Nothing
					previousValue.Produtos.Remove(Me)
				End If
				Me._CategoriasProdutos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Produtos.Add(Me)
					Me._IdCategoria = value.IdCategoriaProduto
				Else
					Me._IdCategoria = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CategoriasProdutos")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SubCategoriasProduto_Produtos", Storage:="_SubCategoriasProduto", ThisKey:="IDSubCategoria", OtherKey:="IdSubCategoria", IsForeignKey:=true)>  _
	Public Property SubCategoriasProduto() As SubCategoriasProduto
		Get
			Return Me._SubCategoriasProduto.Entity
		End Get
		Set
			Dim previousValue As SubCategoriasProduto = Me._SubCategoriasProduto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SubCategoriasProduto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SubCategoriasProduto.Entity = Nothing
					previousValue.Produtos.Remove(Me)
				End If
				Me._SubCategoriasProduto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Produtos.Add(Me)
					Me._IDSubCategoria = value.IdSubCategoria
				Else
					Me._IDSubCategoria = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("SubCategoriasProduto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UnidadeParametro_Produtos", Storage:="_UnidadeParametro", ThisKey:="IdUnComp", OtherKey:="IdUnidade", IsForeignKey:=true)>  _
	Public Property UnidadeParametro() As UnidadeParametro
		Get
			Return Me._UnidadeParametro.Entity
		End Get
		Set
			Dim previousValue As UnidadeParametro = Me._UnidadeParametro.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UnidadeParametro.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UnidadeParametro.Entity = Nothing
					previousValue.Produtos.Remove(Me)
				End If
				Me._UnidadeParametro.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Produtos.Add(Me)
					Me._IdUnComp = value.IdUnidade
				Else
					Me._IdUnComp = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("UnidadeParametro")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UnidadesGeral_Produtos", Storage:="_UnidadesGeral", ThisKey:="IdUnVenda", OtherKey:="ChaveValidada", IsForeignKey:=true)>  _
	Public Property UnidadesGeral() As UnidadesGeral
		Get
			Return Me._UnidadesGeral.Entity
		End Get
		Set
			Dim previousValue As UnidadesGeral = Me._UnidadesGeral.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UnidadesGeral.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UnidadesGeral.Entity = Nothing
					previousValue.Produtos.Remove(Me)
				End If
				Me._UnidadesGeral.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Produtos.Add(Me)
					Me._IdUnVenda = value.ChaveValidada
				Else
					Me._IdUnVenda = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("UnidadesGeral")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Fabricantes_Produtos", Storage:="_Fabricantes", ThisKey:="IdFabricante", OtherKey:="IdFabricante", IsForeignKey:=true)>  _
	Public Property Fabricantes() As Fabricantes
		Get
			Return Me._Fabricantes.Entity
		End Get
		Set
			Dim previousValue As Fabricantes = Me._Fabricantes.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Fabricantes.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Fabricantes.Entity = Nothing
					previousValue.Produtos.Remove(Me)
				End If
				Me._Fabricantes.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Produtos.Add(Me)
					Me._IdFabricante = value.IdFabricante
				Else
					Me._IdFabricante = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Fabricantes")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ImagemProduto(ByVal entity As ImagemProduto)
		Me.SendPropertyChanging
		entity.Produtos = Me
	End Sub
	
	Private Sub detach_ImagemProduto(ByVal entity As ImagemProduto)
		Me.SendPropertyChanging
		entity.Produtos = Nothing
	End Sub
	
	Private Sub attach_VinculoProdutoFornecedor(ByVal entity As VinculoProdutoFornecedor)
		Me.SendPropertyChanging
		entity.Produtos = Me
	End Sub
	
	Private Sub detach_VinculoProdutoFornecedor(ByVal entity As VinculoProdutoFornecedor)
		Me.SendPropertyChanging
		entity.Produtos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImagemProduto")>  _
Partial Public Class ImagemProduto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdImagem As Integer
	
	Private _IdProduto As System.Nullable(Of Integer)
	
	Private _Imagem As System.Data.Linq.Binary
	
	Private _Produtos As EntityRef(Of Produtos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdImagemChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdImagemChanged()
    End Sub
    Partial Private Sub OnIdProdutoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProdutoChanged()
    End Sub
    Partial Private Sub OnImagemChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImagemChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Produtos = CType(Nothing, EntityRef(Of Produtos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdImagem", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdImagem() As Integer
		Get
			Return Me._IdImagem
		End Get
		Set
			If ((Me._IdImagem = value)  _
						= false) Then
				Me.OnIdImagemChanging(value)
				Me.SendPropertyChanging
				Me._IdImagem = value
				Me.SendPropertyChanged("IdImagem")
				Me.OnIdImagemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProduto", DbType:="Int")>  _
	Public Property IdProduto() As System.Nullable(Of Integer)
		Get
			Return Me._IdProduto
		End Get
		Set
			If (Me._IdProduto.Equals(value) = false) Then
				If Me._Produtos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdProdutoChanging(value)
				Me.SendPropertyChanging
				Me._IdProduto = value
				Me.SendPropertyChanged("IdProduto")
				Me.OnIdProdutoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Imagem", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Imagem() As System.Data.Linq.Binary
		Get
			Return Me._Imagem
		End Get
		Set
			If (Object.Equals(Me._Imagem, value) = false) Then
				Me.OnImagemChanging(value)
				Me.SendPropertyChanging
				Me._Imagem = value
				Me.SendPropertyChanged("Imagem")
				Me.OnImagemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Produtos_ImagemProduto", Storage:="_Produtos", ThisKey:="IdProduto", OtherKey:="IdProduto", IsForeignKey:=true)>  _
	Public Property Produtos() As Produtos
		Get
			Return Me._Produtos.Entity
		End Get
		Set
			Dim previousValue As Produtos = Me._Produtos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Produtos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Produtos.Entity = Nothing
					previousValue.ImagemProduto.Remove(Me)
				End If
				Me._Produtos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ImagemProduto.Add(Me)
					Me._IdProduto = value.IdProduto
				Else
					Me._IdProduto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Produtos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Fabricantes")>  _
Partial Public Class Fabricantes
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdFabricante As Integer
	
	Private _Fabricante As String
	
	Private _Produtos As EntitySet(Of Produtos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdFabricanteChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdFabricanteChanged()
    End Sub
    Partial Private Sub OnFabricanteChanging(value As String)
    End Sub
    Partial Private Sub OnFabricanteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Produtos = New EntitySet(Of Produtos)(AddressOf Me.attach_Produtos, AddressOf Me.detach_Produtos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFabricante", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdFabricante() As Integer
		Get
			Return Me._IdFabricante
		End Get
		Set
			If ((Me._IdFabricante = value)  _
						= false) Then
				Me.OnIdFabricanteChanging(value)
				Me.SendPropertyChanging
				Me._IdFabricante = value
				Me.SendPropertyChanged("IdFabricante")
				Me.OnIdFabricanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fabricante", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fabricante() As String
		Get
			Return Me._Fabricante
		End Get
		Set
			If (String.Equals(Me._Fabricante, value) = false) Then
				Me.OnFabricanteChanging(value)
				Me.SendPropertyChanging
				Me._Fabricante = value
				Me.SendPropertyChanged("Fabricante")
				Me.OnFabricanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Fabricantes_Produtos", Storage:="_Produtos", ThisKey:="IdFabricante", OtherKey:="IdFabricante")>  _
	Public Property Produtos() As EntitySet(Of Produtos)
		Get
			Return Me._Produtos
		End Get
		Set
			Me._Produtos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Produtos(ByVal entity As Produtos)
		Me.SendPropertyChanging
		entity.Fabricantes = Me
	End Sub
	
	Private Sub detach_Produtos(ByVal entity As Produtos)
		Me.SendPropertyChanging
		entity.Fabricantes = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AndarEstoque")>  _
Partial Public Class AndarEstoque
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdAndarEstoque As Integer
	
	Private _IdPredioEstoqeu As System.Nullable(Of Integer)
	
	Private _NomeMatriz As String
	
	Private _EndereçoEstoque As EntitySet(Of EnderecoEstoque)
	
	Private _PredioEstoque As EntityRef(Of PredioEstoque)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdAndarEstoqueChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdAndarEstoqueChanged()
    End Sub
    Partial Private Sub OnIdPredioEstoqeuChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdPredioEstoqeuChanged()
    End Sub
    Partial Private Sub OnNomeMatrizChanging(value As String)
    End Sub
    Partial Private Sub OnNomeMatrizChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EndereçoEstoque = New EntitySet(Of EnderecoEstoque)(AddressOf Me.attach_EndereçoEstoque, AddressOf Me.detach_EndereçoEstoque)
		Me._PredioEstoque = CType(Nothing, EntityRef(Of PredioEstoque))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAndarEstoque", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdAndarEstoque() As Integer
		Get
			Return Me._IdAndarEstoque
		End Get
		Set
			If ((Me._IdAndarEstoque = value)  _
						= false) Then
				Me.OnIdAndarEstoqueChanging(value)
				Me.SendPropertyChanging
				Me._IdAndarEstoque = value
				Me.SendPropertyChanged("IdAndarEstoque")
				Me.OnIdAndarEstoqueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPredioEstoqeu", DbType:="Int")>  _
	Public Property IdPredioEstoqeu() As System.Nullable(Of Integer)
		Get
			Return Me._IdPredioEstoqeu
		End Get
		Set
			If (Me._IdPredioEstoqeu.Equals(value) = false) Then
				If Me._PredioEstoque.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdPredioEstoqeuChanging(value)
				Me.SendPropertyChanging
				Me._IdPredioEstoqeu = value
				Me.SendPropertyChanged("IdPredioEstoqeu")
				Me.OnIdPredioEstoqeuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeMatriz", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeMatriz() As String
		Get
			Return Me._NomeMatriz
		End Get
		Set
			If (String.Equals(Me._NomeMatriz, value) = false) Then
				Me.OnNomeMatrizChanging(value)
				Me.SendPropertyChanging
				Me._NomeMatriz = value
				Me.SendPropertyChanged("NomeMatriz")
				Me.OnNomeMatrizChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AndarEstoque_EnderecoEstoque", Storage:="_EndereçoEstoque", ThisKey:="IdAndarEstoque", OtherKey:="IdAndarEstoque")>  _
	Public Property EnderecoEstoque() As EntitySet(Of EnderecoEstoque)
		Get
			Return Me._EndereçoEstoque
		End Get
		Set
			Me._EndereçoEstoque.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PredioEstoque_AndarEstoque", Storage:="_PredioEstoque", ThisKey:="IdPredioEstoqeu", OtherKey:="IdPredioEstoque", IsForeignKey:=true)>  _
	Public Property PredioEstoque() As PredioEstoque
		Get
			Return Me._PredioEstoque.Entity
		End Get
		Set
			Dim previousValue As PredioEstoque = Me._PredioEstoque.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PredioEstoque.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PredioEstoque.Entity = Nothing
					previousValue.AndarEstoque.Remove(Me)
				End If
				Me._PredioEstoque.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AndarEstoque.Add(Me)
					Me._IdPredioEstoqeu = value.IdPredioEstoque
				Else
					Me._IdPredioEstoqeu = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PredioEstoque")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_EndereçoEstoque(ByVal entity As EnderecoEstoque)
		Me.SendPropertyChanging
		entity.AndarEstoque = Me
	End Sub
	
	Private Sub detach_EndereçoEstoque(ByVal entity As EnderecoEstoque)
		Me.SendPropertyChanging
		entity.AndarEstoque = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EnderecoEstoque")>  _
Partial Public Class EnderecoEstoque
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEndereçoEstoque As Integer
	
	Private _IdAndarEstoque As System.Nullable(Of Integer)
	
	Private _NomeMatriz As String
	
	Private _AndarEstoque As EntityRef(Of AndarEstoque)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEnderecoEstoqueChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEnderecoEstoqueChanged()
    End Sub
    Partial Private Sub OnIdAndarEstoqueChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdAndarEstoqueChanged()
    End Sub
    Partial Private Sub OnNomeMatrizChanging(value As String)
    End Sub
    Partial Private Sub OnNomeMatrizChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AndarEstoque = CType(Nothing, EntityRef(Of AndarEstoque))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="IdEndereçoEstoque", Storage:="_IdEndereçoEstoque", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdEnderecoEstoque() As Integer
		Get
			Return Me._IdEndereçoEstoque
		End Get
		Set
			If ((Me._IdEndereçoEstoque = value)  _
						= false) Then
				Me.OnIdEnderecoEstoqueChanging(value)
				Me.SendPropertyChanging
				Me._IdEndereçoEstoque = value
				Me.SendPropertyChanged("IdEnderecoEstoque")
				Me.OnIdEnderecoEstoqueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAndarEstoque", DbType:="Int")>  _
	Public Property IdAndarEstoque() As System.Nullable(Of Integer)
		Get
			Return Me._IdAndarEstoque
		End Get
		Set
			If (Me._IdAndarEstoque.Equals(value) = false) Then
				If Me._AndarEstoque.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdAndarEstoqueChanging(value)
				Me.SendPropertyChanging
				Me._IdAndarEstoque = value
				Me.SendPropertyChanged("IdAndarEstoque")
				Me.OnIdAndarEstoqueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeMatriz", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeMatriz() As String
		Get
			Return Me._NomeMatriz
		End Get
		Set
			If (String.Equals(Me._NomeMatriz, value) = false) Then
				Me.OnNomeMatrizChanging(value)
				Me.SendPropertyChanging
				Me._NomeMatriz = value
				Me.SendPropertyChanged("NomeMatriz")
				Me.OnNomeMatrizChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AndarEstoque_EnderecoEstoque", Storage:="_AndarEstoque", ThisKey:="IdAndarEstoque", OtherKey:="IdAndarEstoque", IsForeignKey:=true)>  _
	Public Property AndarEstoque() As AndarEstoque
		Get
			Return Me._AndarEstoque.Entity
		End Get
		Set
			Dim previousValue As AndarEstoque = Me._AndarEstoque.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AndarEstoque.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AndarEstoque.Entity = Nothing
					previousValue.EnderecoEstoque.Remove(Me)
				End If
				Me._AndarEstoque.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EnderecoEstoque.Add(Me)
					Me._IdAndarEstoque = value.IdAndarEstoque
				Else
					Me._IdAndarEstoque = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("AndarEstoque")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Estoques")>  _
Partial Public Class Estoques
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEstoque As Integer
	
	Private _NomeEstoque As String
	
	Private _CepEstoque As String
	
	Private _IdEndereço As System.Nullable(Of Integer)
	
	Private _Endereço As String
	
	Private _Bairro As String
	
	Private _Cidade As String
	
	Private _Estado As String
	
	Private _Pais As String
	
	Private _Numero As System.Nullable(Of Integer)
	
	Private _Complemento As String
	
	Private _QuadraEstoque As EntitySet(Of QuadraEstoque)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEstoqueChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEstoqueChanged()
    End Sub
    Partial Private Sub OnNomeEstoqueChanging(value As String)
    End Sub
    Partial Private Sub OnNomeEstoqueChanged()
    End Sub
    Partial Private Sub OnCepEstoqueChanging(value As String)
    End Sub
    Partial Private Sub OnCepEstoqueChanged()
    End Sub
    Partial Private Sub OnIdEnderecoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdEnderecoChanged()
    End Sub
    Partial Private Sub OnEnderecoChanging(value As String)
    End Sub
    Partial Private Sub OnEnderecoChanged()
    End Sub
    Partial Private Sub OnBairroChanging(value As String)
    End Sub
    Partial Private Sub OnBairroChanged()
    End Sub
    Partial Private Sub OnCidadeChanging(value As String)
    End Sub
    Partial Private Sub OnCidadeChanged()
    End Sub
    Partial Private Sub OnEstadoChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoChanged()
    End Sub
    Partial Private Sub OnPaisChanging(value As String)
    End Sub
    Partial Private Sub OnPaisChanged()
    End Sub
    Partial Private Sub OnNumeroChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumeroChanged()
    End Sub
    Partial Private Sub OnComplementoChanging(value As String)
    End Sub
    Partial Private Sub OnComplementoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._QuadraEstoque = New EntitySet(Of QuadraEstoque)(AddressOf Me.attach_QuadraEstoque, AddressOf Me.detach_QuadraEstoque)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstoque", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdEstoque() As Integer
		Get
			Return Me._IdEstoque
		End Get
		Set
			If ((Me._IdEstoque = value)  _
						= false) Then
				Me.OnIdEstoqueChanging(value)
				Me.SendPropertyChanging
				Me._IdEstoque = value
				Me.SendPropertyChanged("IdEstoque")
				Me.OnIdEstoqueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeEstoque", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeEstoque() As String
		Get
			Return Me._NomeEstoque
		End Get
		Set
			If (String.Equals(Me._NomeEstoque, value) = false) Then
				Me.OnNomeEstoqueChanging(value)
				Me.SendPropertyChanging
				Me._NomeEstoque = value
				Me.SendPropertyChanged("NomeEstoque")
				Me.OnNomeEstoqueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CepEstoque", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CepEstoque() As String
		Get
			Return Me._CepEstoque
		End Get
		Set
			If (String.Equals(Me._CepEstoque, value) = false) Then
				Me.OnCepEstoqueChanging(value)
				Me.SendPropertyChanging
				Me._CepEstoque = value
				Me.SendPropertyChanged("CepEstoque")
				Me.OnCepEstoqueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEndereço", DbType:="Int")>  _
	Public Property IdEndereco() As System.Nullable(Of Integer)
		Get
			Return Me._IdEndereço
		End Get
		Set
			If (Me._IdEndereço.Equals(value) = false) Then
				Me.OnIdEnderecoChanging(value)
				Me.SendPropertyChanging
				Me._IdEndereço = value
				Me.SendPropertyChanged("IdEndereco")
				Me.OnIdEnderecoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Endereço", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Endereco() As String
		Get
			Return Me._Endereço
		End Get
		Set
			If (String.Equals(Me._Endereço, value) = false) Then
				Me.OnEnderecoChanging(value)
				Me.SendPropertyChanging
				Me._Endereço = value
				Me.SendPropertyChanged("Endereco")
				Me.OnEnderecoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bairro", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Bairro() As String
		Get
			Return Me._Bairro
		End Get
		Set
			If (String.Equals(Me._Bairro, value) = false) Then
				Me.OnBairroChanging(value)
				Me.SendPropertyChanging
				Me._Bairro = value
				Me.SendPropertyChanged("Bairro")
				Me.OnBairroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cidade", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cidade() As String
		Get
			Return Me._Cidade
		End Get
		Set
			If (String.Equals(Me._Cidade, value) = false) Then
				Me.OnCidadeChanging(value)
				Me.SendPropertyChanging
				Me._Cidade = value
				Me.SendPropertyChanged("Cidade")
				Me.OnCidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Estado", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Estado() As String
		Get
			Return Me._Estado
		End Get
		Set
			If (String.Equals(Me._Estado, value) = false) Then
				Me.OnEstadoChanging(value)
				Me.SendPropertyChanging
				Me._Estado = value
				Me.SendPropertyChanged("Estado")
				Me.OnEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pais", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pais() As String
		Get
			Return Me._Pais
		End Get
		Set
			If (String.Equals(Me._Pais, value) = false) Then
				Me.OnPaisChanging(value)
				Me.SendPropertyChanging
				Me._Pais = value
				Me.SendPropertyChanged("Pais")
				Me.OnPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Numero", DbType:="Int")>  _
	Public Property Numero() As System.Nullable(Of Integer)
		Get
			Return Me._Numero
		End Get
		Set
			If (Me._Numero.Equals(value) = false) Then
				Me.OnNumeroChanging(value)
				Me.SendPropertyChanging
				Me._Numero = value
				Me.SendPropertyChanged("Numero")
				Me.OnNumeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Complemento", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Complemento() As String
		Get
			Return Me._Complemento
		End Get
		Set
			If (String.Equals(Me._Complemento, value) = false) Then
				Me.OnComplementoChanging(value)
				Me.SendPropertyChanging
				Me._Complemento = value
				Me.SendPropertyChanged("Complemento")
				Me.OnComplementoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Estoques_QuadraEstoque", Storage:="_QuadraEstoque", ThisKey:="IdEstoque", OtherKey:="IdEstoque")>  _
	Public Property QuadraEstoque() As EntitySet(Of QuadraEstoque)
		Get
			Return Me._QuadraEstoque
		End Get
		Set
			Me._QuadraEstoque.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_QuadraEstoque(ByVal entity As QuadraEstoque)
		Me.SendPropertyChanging
		entity.Estoques = Me
	End Sub
	
	Private Sub detach_QuadraEstoque(ByVal entity As QuadraEstoque)
		Me.SendPropertyChanging
		entity.Estoques = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QuadraEstoque")>  _
Partial Public Class QuadraEstoque
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdQuadraEstoque As Integer
	
	Private _IdEstoque As System.Nullable(Of Integer)
	
	Private _NomeMatriz As String
	
	Private _RuaEstoque As EntitySet(Of RuaEstoque)
	
	Private _Estoques As EntityRef(Of Estoques)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdQuadraEstoqueChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdQuadraEstoqueChanged()
    End Sub
    Partial Private Sub OnIdEstoqueChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdEstoqueChanged()
    End Sub
    Partial Private Sub OnNomeMatrizChanging(value As String)
    End Sub
    Partial Private Sub OnNomeMatrizChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RuaEstoque = New EntitySet(Of RuaEstoque)(AddressOf Me.attach_RuaEstoque, AddressOf Me.detach_RuaEstoque)
		Me._Estoques = CType(Nothing, EntityRef(Of Estoques))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdQuadraEstoque", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdQuadraEstoque() As Integer
		Get
			Return Me._IdQuadraEstoque
		End Get
		Set
			If ((Me._IdQuadraEstoque = value)  _
						= false) Then
				Me.OnIdQuadraEstoqueChanging(value)
				Me.SendPropertyChanging
				Me._IdQuadraEstoque = value
				Me.SendPropertyChanged("IdQuadraEstoque")
				Me.OnIdQuadraEstoqueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstoque", DbType:="Int")>  _
	Public Property IdEstoque() As System.Nullable(Of Integer)
		Get
			Return Me._IdEstoque
		End Get
		Set
			If (Me._IdEstoque.Equals(value) = false) Then
				If Me._Estoques.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdEstoqueChanging(value)
				Me.SendPropertyChanging
				Me._IdEstoque = value
				Me.SendPropertyChanged("IdEstoque")
				Me.OnIdEstoqueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeMatriz", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeMatriz() As String
		Get
			Return Me._NomeMatriz
		End Get
		Set
			If (String.Equals(Me._NomeMatriz, value) = false) Then
				Me.OnNomeMatrizChanging(value)
				Me.SendPropertyChanging
				Me._NomeMatriz = value
				Me.SendPropertyChanged("NomeMatriz")
				Me.OnNomeMatrizChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QuadraEstoque_RuaEstoque", Storage:="_RuaEstoque", ThisKey:="IdQuadraEstoque", OtherKey:="IdQuadra")>  _
	Public Property RuaEstoque() As EntitySet(Of RuaEstoque)
		Get
			Return Me._RuaEstoque
		End Get
		Set
			Me._RuaEstoque.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Estoques_QuadraEstoque", Storage:="_Estoques", ThisKey:="IdEstoque", OtherKey:="IdEstoque", IsForeignKey:=true)>  _
	Public Property Estoques() As Estoques
		Get
			Return Me._Estoques.Entity
		End Get
		Set
			Dim previousValue As Estoques = Me._Estoques.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Estoques.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Estoques.Entity = Nothing
					previousValue.QuadraEstoque.Remove(Me)
				End If
				Me._Estoques.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.QuadraEstoque.Add(Me)
					Me._IdEstoque = value.IdEstoque
				Else
					Me._IdEstoque = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Estoques")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RuaEstoque(ByVal entity As RuaEstoque)
		Me.SendPropertyChanging
		entity.QuadraEstoque = Me
	End Sub
	
	Private Sub detach_RuaEstoque(ByVal entity As RuaEstoque)
		Me.SendPropertyChanging
		entity.QuadraEstoque = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RuaEstoque")>  _
Partial Public Class RuaEstoque
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdRuaEstoque As Integer
	
	Private _IdQuadra As System.Nullable(Of Integer)
	
	Private _NomeMatriz As String
	
	Private _PredioEstoque As EntitySet(Of PredioEstoque)
	
	Private _QuadraEstoque As EntityRef(Of QuadraEstoque)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdRuaEstoqueChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdRuaEstoqueChanged()
    End Sub
    Partial Private Sub OnIdQuadraChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdQuadraChanged()
    End Sub
    Partial Private Sub OnNomeMatrizChanging(value As String)
    End Sub
    Partial Private Sub OnNomeMatrizChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PredioEstoque = New EntitySet(Of PredioEstoque)(AddressOf Me.attach_PredioEstoque, AddressOf Me.detach_PredioEstoque)
		Me._QuadraEstoque = CType(Nothing, EntityRef(Of QuadraEstoque))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdRuaEstoque", DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true)>  _
	Public Property IdRuaEstoque() As Integer
		Get
			Return Me._IdRuaEstoque
		End Get
		Set
			If ((Me._IdRuaEstoque = value)  _
						= false) Then
				Me.OnIdRuaEstoqueChanging(value)
				Me.SendPropertyChanging
				Me._IdRuaEstoque = value
				Me.SendPropertyChanged("IdRuaEstoque")
				Me.OnIdRuaEstoqueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdQuadra", DbType:="Int")>  _
	Public Property IdQuadra() As System.Nullable(Of Integer)
		Get
			Return Me._IdQuadra
		End Get
		Set
			If (Me._IdQuadra.Equals(value) = false) Then
				If Me._QuadraEstoque.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdQuadraChanging(value)
				Me.SendPropertyChanging
				Me._IdQuadra = value
				Me.SendPropertyChanged("IdQuadra")
				Me.OnIdQuadraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeMatriz", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeMatriz() As String
		Get
			Return Me._NomeMatriz
		End Get
		Set
			If (String.Equals(Me._NomeMatriz, value) = false) Then
				Me.OnNomeMatrizChanging(value)
				Me.SendPropertyChanging
				Me._NomeMatriz = value
				Me.SendPropertyChanged("NomeMatriz")
				Me.OnNomeMatrizChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RuaEstoque_PredioEstoque", Storage:="_PredioEstoque", ThisKey:="IdRuaEstoque", OtherKey:="IdRuaEstoque")>  _
	Public Property PredioEstoque() As EntitySet(Of PredioEstoque)
		Get
			Return Me._PredioEstoque
		End Get
		Set
			Me._PredioEstoque.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QuadraEstoque_RuaEstoque", Storage:="_QuadraEstoque", ThisKey:="IdQuadra", OtherKey:="IdQuadraEstoque", IsForeignKey:=true)>  _
	Public Property QuadraEstoque() As QuadraEstoque
		Get
			Return Me._QuadraEstoque.Entity
		End Get
		Set
			Dim previousValue As QuadraEstoque = Me._QuadraEstoque.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._QuadraEstoque.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._QuadraEstoque.Entity = Nothing
					previousValue.RuaEstoque.Remove(Me)
				End If
				Me._QuadraEstoque.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RuaEstoque.Add(Me)
					Me._IdQuadra = value.IdQuadraEstoque
				Else
					Me._IdQuadra = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("QuadraEstoque")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PredioEstoque(ByVal entity As PredioEstoque)
		Me.SendPropertyChanging
		entity.RuaEstoque = Me
	End Sub
	
	Private Sub detach_PredioEstoque(ByVal entity As PredioEstoque)
		Me.SendPropertyChanging
		entity.RuaEstoque = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PredioEstoque")>  _
Partial Public Class PredioEstoque
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdPredioEstoque As Integer
	
	Private _IdRuaEstoque As System.Nullable(Of Integer)
	
	Private _NomeMatriz As String
	
	Private _AndarEstoque As EntitySet(Of AndarEstoque)
	
	Private _RuaEstoque As EntityRef(Of RuaEstoque)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdPredioEstoqueChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPredioEstoqueChanged()
    End Sub
    Partial Private Sub OnIdRuaEstoqueChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdRuaEstoqueChanged()
    End Sub
    Partial Private Sub OnNomeMatrizChanging(value As String)
    End Sub
    Partial Private Sub OnNomeMatrizChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AndarEstoque = New EntitySet(Of AndarEstoque)(AddressOf Me.attach_AndarEstoque, AddressOf Me.detach_AndarEstoque)
		Me._RuaEstoque = CType(Nothing, EntityRef(Of RuaEstoque))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPredioEstoque", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdPredioEstoque() As Integer
		Get
			Return Me._IdPredioEstoque
		End Get
		Set
			If ((Me._IdPredioEstoque = value)  _
						= false) Then
				Me.OnIdPredioEstoqueChanging(value)
				Me.SendPropertyChanging
				Me._IdPredioEstoque = value
				Me.SendPropertyChanged("IdPredioEstoque")
				Me.OnIdPredioEstoqueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdRuaEstoque", DbType:="Int")>  _
	Public Property IdRuaEstoque() As System.Nullable(Of Integer)
		Get
			Return Me._IdRuaEstoque
		End Get
		Set
			If (Me._IdRuaEstoque.Equals(value) = false) Then
				If Me._RuaEstoque.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdRuaEstoqueChanging(value)
				Me.SendPropertyChanging
				Me._IdRuaEstoque = value
				Me.SendPropertyChanged("IdRuaEstoque")
				Me.OnIdRuaEstoqueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeMatriz", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeMatriz() As String
		Get
			Return Me._NomeMatriz
		End Get
		Set
			If (String.Equals(Me._NomeMatriz, value) = false) Then
				Me.OnNomeMatrizChanging(value)
				Me.SendPropertyChanging
				Me._NomeMatriz = value
				Me.SendPropertyChanged("NomeMatriz")
				Me.OnNomeMatrizChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PredioEstoque_AndarEstoque", Storage:="_AndarEstoque", ThisKey:="IdPredioEstoque", OtherKey:="IdPredioEstoqeu")>  _
	Public Property AndarEstoque() As EntitySet(Of AndarEstoque)
		Get
			Return Me._AndarEstoque
		End Get
		Set
			Me._AndarEstoque.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RuaEstoque_PredioEstoque", Storage:="_RuaEstoque", ThisKey:="IdRuaEstoque", OtherKey:="IdRuaEstoque", IsForeignKey:=true)>  _
	Public Property RuaEstoque() As RuaEstoque
		Get
			Return Me._RuaEstoque.Entity
		End Get
		Set
			Dim previousValue As RuaEstoque = Me._RuaEstoque.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RuaEstoque.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RuaEstoque.Entity = Nothing
					previousValue.PredioEstoque.Remove(Me)
				End If
				Me._RuaEstoque.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PredioEstoque.Add(Me)
					Me._IdRuaEstoque = value.IdRuaEstoque
				Else
					Me._IdRuaEstoque = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("RuaEstoque")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AndarEstoque(ByVal entity As AndarEstoque)
		Me.SendPropertyChanging
		entity.PredioEstoque = Me
	End Sub
	
	Private Sub detach_AndarEstoque(ByVal entity As AndarEstoque)
		Me.SendPropertyChanging
		entity.PredioEstoque = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ParceirosComerciais")>  _
Partial Public Class ParceirosComerciais
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdParceiro As Integer
	
	Private _RazãoSocial_nome As String
	
	Private _CPF_CNPJ As String
	
	Private _RG_IE As String
	
	Private _TipoPersonalidade As System.Nullable(Of Boolean)
	
	Private _CEP As String
	
	Private _IdEndereço As System.Nullable(Of Integer)
	
	Private _Endereço As String
	
	Private _Numero As System.Nullable(Of Integer)
	
	Private _Complemento As String
	
	Private _Bairro As String
	
	Private _CIdade As String
	
	Private _Estado As String
	
	Private _Pais As String
	
	Private _Telefone As String
	
	Private _Celular As String
	
	Private _Email As String
	
	Private _TipoParceiro As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdParceiroChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdParceiroChanged()
    End Sub
    Partial Private Sub OnRazaoSocial_nomeChanging(value As String)
    End Sub
    Partial Private Sub OnRazaoSocial_nomeChanged()
    End Sub
    Partial Private Sub OnCPF_CNPJChanging(value As String)
    End Sub
    Partial Private Sub OnCPF_CNPJChanged()
    End Sub
    Partial Private Sub OnRG_IEChanging(value As String)
    End Sub
    Partial Private Sub OnRG_IEChanged()
    End Sub
    Partial Private Sub OnTipoPersonalidadeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTipoPersonalidadeChanged()
    End Sub
    Partial Private Sub OnCEPChanging(value As String)
    End Sub
    Partial Private Sub OnCEPChanged()
    End Sub
    Partial Private Sub OnIdEnderecoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdEnderecoChanged()
    End Sub
    Partial Private Sub OnEnderecoChanging(value As String)
    End Sub
    Partial Private Sub OnEnderecoChanged()
    End Sub
    Partial Private Sub OnNumeroChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumeroChanged()
    End Sub
    Partial Private Sub OnComplementoChanging(value As String)
    End Sub
    Partial Private Sub OnComplementoChanged()
    End Sub
    Partial Private Sub OnBairroChanging(value As String)
    End Sub
    Partial Private Sub OnBairroChanged()
    End Sub
    Partial Private Sub OnCIdadeChanging(value As String)
    End Sub
    Partial Private Sub OnCIdadeChanged()
    End Sub
    Partial Private Sub OnEstadoChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoChanged()
    End Sub
    Partial Private Sub OnPaisChanging(value As String)
    End Sub
    Partial Private Sub OnPaisChanged()
    End Sub
    Partial Private Sub OnTelefoneChanging(value As String)
    End Sub
    Partial Private Sub OnTelefoneChanged()
    End Sub
    Partial Private Sub OnCelularChanging(value As String)
    End Sub
    Partial Private Sub OnCelularChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTipoParceiroChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTipoParceiroChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdParceiro", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdParceiro() As Integer
		Get
			Return Me._IdParceiro
		End Get
		Set
			If ((Me._IdParceiro = value)  _
						= false) Then
				Me.OnIdParceiroChanging(value)
				Me.SendPropertyChanging
				Me._IdParceiro = value
				Me.SendPropertyChanged("IdParceiro")
				Me.OnIdParceiroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RazãoSocial_nome", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RazaoSocial_nome() As String
		Get
			Return Me._RazãoSocial_nome
		End Get
		Set
			If (String.Equals(Me._RazãoSocial_nome, value) = false) Then
				Me.OnRazaoSocial_nomeChanging(value)
				Me.SendPropertyChanging
				Me._RazãoSocial_nome = value
				Me.SendPropertyChanged("RazaoSocial_nome")
				Me.OnRazaoSocial_nomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CPF_CNPJ", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CPF_CNPJ() As String
		Get
			Return Me._CPF_CNPJ
		End Get
		Set
			If (String.Equals(Me._CPF_CNPJ, value) = false) Then
				Me.OnCPF_CNPJChanging(value)
				Me.SendPropertyChanging
				Me._CPF_CNPJ = value
				Me.SendPropertyChanged("CPF_CNPJ")
				Me.OnCPF_CNPJChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RG_IE", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RG_IE() As String
		Get
			Return Me._RG_IE
		End Get
		Set
			If (String.Equals(Me._RG_IE, value) = false) Then
				Me.OnRG_IEChanging(value)
				Me.SendPropertyChanging
				Me._RG_IE = value
				Me.SendPropertyChanged("RG_IE")
				Me.OnRG_IEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoPersonalidade", DbType:="Bit")>  _
	Public Property TipoPersonalidade() As System.Nullable(Of Boolean)
		Get
			Return Me._TipoPersonalidade
		End Get
		Set
			If (Me._TipoPersonalidade.Equals(value) = false) Then
				Me.OnTipoPersonalidadeChanging(value)
				Me.SendPropertyChanging
				Me._TipoPersonalidade = value
				Me.SendPropertyChanged("TipoPersonalidade")
				Me.OnTipoPersonalidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CEP", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CEP() As String
		Get
			Return Me._CEP
		End Get
		Set
			If (String.Equals(Me._CEP, value) = false) Then
				Me.OnCEPChanging(value)
				Me.SendPropertyChanging
				Me._CEP = value
				Me.SendPropertyChanged("CEP")
				Me.OnCEPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEndereço", DbType:="Int")>  _
	Public Property IdEndereco() As System.Nullable(Of Integer)
		Get
			Return Me._IdEndereço
		End Get
		Set
			If (Me._IdEndereço.Equals(value) = false) Then
				Me.OnIdEnderecoChanging(value)
				Me.SendPropertyChanging
				Me._IdEndereço = value
				Me.SendPropertyChanged("IdEndereco")
				Me.OnIdEnderecoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Endereço", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Endereco() As String
		Get
			Return Me._Endereço
		End Get
		Set
			If (String.Equals(Me._Endereço, value) = false) Then
				Me.OnEnderecoChanging(value)
				Me.SendPropertyChanging
				Me._Endereço = value
				Me.SendPropertyChanged("Endereco")
				Me.OnEnderecoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Numero", DbType:="Int")>  _
	Public Property Numero() As System.Nullable(Of Integer)
		Get
			Return Me._Numero
		End Get
		Set
			If (Me._Numero.Equals(value) = false) Then
				Me.OnNumeroChanging(value)
				Me.SendPropertyChanging
				Me._Numero = value
				Me.SendPropertyChanged("Numero")
				Me.OnNumeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Complemento", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Complemento() As String
		Get
			Return Me._Complemento
		End Get
		Set
			If (String.Equals(Me._Complemento, value) = false) Then
				Me.OnComplementoChanging(value)
				Me.SendPropertyChanging
				Me._Complemento = value
				Me.SendPropertyChanged("Complemento")
				Me.OnComplementoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bairro", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Bairro() As String
		Get
			Return Me._Bairro
		End Get
		Set
			If (String.Equals(Me._Bairro, value) = false) Then
				Me.OnBairroChanging(value)
				Me.SendPropertyChanging
				Me._Bairro = value
				Me.SendPropertyChanged("Bairro")
				Me.OnBairroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIdade", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CIdade() As String
		Get
			Return Me._CIdade
		End Get
		Set
			If (String.Equals(Me._CIdade, value) = false) Then
				Me.OnCIdadeChanging(value)
				Me.SendPropertyChanging
				Me._CIdade = value
				Me.SendPropertyChanged("CIdade")
				Me.OnCIdadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Estado", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Estado() As String
		Get
			Return Me._Estado
		End Get
		Set
			If (String.Equals(Me._Estado, value) = false) Then
				Me.OnEstadoChanging(value)
				Me.SendPropertyChanging
				Me._Estado = value
				Me.SendPropertyChanged("Estado")
				Me.OnEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pais", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pais() As String
		Get
			Return Me._Pais
		End Get
		Set
			If (String.Equals(Me._Pais, value) = false) Then
				Me.OnPaisChanging(value)
				Me.SendPropertyChanging
				Me._Pais = value
				Me.SendPropertyChanged("Pais")
				Me.OnPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefone", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefone() As String
		Get
			Return Me._Telefone
		End Get
		Set
			If (String.Equals(Me._Telefone, value) = false) Then
				Me.OnTelefoneChanging(value)
				Me.SendPropertyChanging
				Me._Telefone = value
				Me.SendPropertyChanged("Telefone")
				Me.OnTelefoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Celular", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Celular() As String
		Get
			Return Me._Celular
		End Get
		Set
			If (String.Equals(Me._Celular, value) = false) Then
				Me.OnCelularChanging(value)
				Me.SendPropertyChanging
				Me._Celular = value
				Me.SendPropertyChanged("Celular")
				Me.OnCelularChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoParceiro", DbType:="Int")>  _
	Public Property TipoParceiro() As System.Nullable(Of Integer)
		Get
			Return Me._TipoParceiro
		End Get
		Set
			If (Me._TipoParceiro.Equals(value) = false) Then
				Me.OnTipoParceiroChanging(value)
				Me.SendPropertyChanging
				Me._TipoParceiro = value
				Me.SendPropertyChanged("TipoParceiro")
				Me.OnTipoParceiroChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FormasPgFornecedores")>  _
Partial Public Class FormasPgFornecedores
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdFormaPgFornec As Integer
	
	Private _IdFornecedor As System.Nullable(Of Integer)
	
	Private _MaximoPc As System.Nullable(Of Integer)
	
	Private _Intervalo As System.Nullable(Of Integer)
	
	Private _D_M As System.Nullable(Of Boolean)
	
	Private _IdFormaPgSaída As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdFormaPgFornecChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdFormaPgFornecChanged()
    End Sub
    Partial Private Sub OnIdFornecedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdFornecedorChanged()
    End Sub
    Partial Private Sub OnMaximoPcChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMaximoPcChanged()
    End Sub
    Partial Private Sub OnIntervaloChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIntervaloChanged()
    End Sub
    Partial Private Sub OnD_MChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnD_MChanged()
    End Sub
    Partial Private Sub OnIdFormaPgSaídaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdFormaPgSaídaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFormaPgFornec", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdFormaPgFornec() As Integer
		Get
			Return Me._IdFormaPgFornec
		End Get
		Set
			If ((Me._IdFormaPgFornec = value)  _
						= false) Then
				Me.OnIdFormaPgFornecChanging(value)
				Me.SendPropertyChanging
				Me._IdFormaPgFornec = value
				Me.SendPropertyChanged("IdFormaPgFornec")
				Me.OnIdFormaPgFornecChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFornecedor", DbType:="Int")>  _
	Public Property IdFornecedor() As System.Nullable(Of Integer)
		Get
			Return Me._IdFornecedor
		End Get
		Set
			If (Me._IdFornecedor.Equals(value) = false) Then
				Me.OnIdFornecedorChanging(value)
				Me.SendPropertyChanging
				Me._IdFornecedor = value
				Me.SendPropertyChanged("IdFornecedor")
				Me.OnIdFornecedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaximoPc", DbType:="Int")>  _
	Public Property MaximoPc() As System.Nullable(Of Integer)
		Get
			Return Me._MaximoPc
		End Get
		Set
			If (Me._MaximoPc.Equals(value) = false) Then
				Me.OnMaximoPcChanging(value)
				Me.SendPropertyChanging
				Me._MaximoPc = value
				Me.SendPropertyChanged("MaximoPc")
				Me.OnMaximoPcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Intervalo", DbType:="Int")>  _
	Public Property Intervalo() As System.Nullable(Of Integer)
		Get
			Return Me._Intervalo
		End Get
		Set
			If (Me._Intervalo.Equals(value) = false) Then
				Me.OnIntervaloChanging(value)
				Me.SendPropertyChanging
				Me._Intervalo = value
				Me.SendPropertyChanged("Intervalo")
				Me.OnIntervaloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_D_M", DbType:="Bit")>  _
	Public Property D_M() As System.Nullable(Of Boolean)
		Get
			Return Me._D_M
		End Get
		Set
			If (Me._D_M.Equals(value) = false) Then
				Me.OnD_MChanging(value)
				Me.SendPropertyChanging
				Me._D_M = value
				Me.SendPropertyChanged("D_M")
				Me.OnD_MChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="IdFormaPgSaida", Storage:="_IdFormaPgSaída", DbType:="Int")>  _
	Public Property IdFormaPgSaída() As System.Nullable(Of Integer)
		Get
			Return Me._IdFormaPgSaída
		End Get
		Set
			If (Me._IdFormaPgSaída.Equals(value) = false) Then
				Me.OnIdFormaPgSaídaChanging(value)
				Me.SendPropertyChanging
				Me._IdFormaPgSaída = value
				Me.SendPropertyChanged("IdFormaPgSaída")
				Me.OnIdFormaPgSaídaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VinculoProdutoFornecedor")>  _
Partial Public Class VinculoProdutoFornecedor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdVinculoProdutoFornecedor As Integer
	
	Private _IdProduto As System.Nullable(Of Integer)
	
	Private _IdForncedor As String
	
	Private _CodFornecedor As String
	
	Private _Produtos As EntityRef(Of Produtos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdVinculoProdutoFornecedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdVinculoProdutoFornecedorChanged()
    End Sub
    Partial Private Sub OnIdProdutoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProdutoChanged()
    End Sub
    Partial Private Sub OnIdForncedorChanging(value As String)
    End Sub
    Partial Private Sub OnIdForncedorChanged()
    End Sub
    Partial Private Sub OnCodFornecedorChanging(value As String)
    End Sub
    Partial Private Sub OnCodFornecedorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Produtos = CType(Nothing, EntityRef(Of Produtos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdVinculoProdutoFornecedor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdVinculoProdutoFornecedor() As Integer
		Get
			Return Me._IdVinculoProdutoFornecedor
		End Get
		Set
			If ((Me._IdVinculoProdutoFornecedor = value)  _
						= false) Then
				Me.OnIdVinculoProdutoFornecedorChanging(value)
				Me.SendPropertyChanging
				Me._IdVinculoProdutoFornecedor = value
				Me.SendPropertyChanged("IdVinculoProdutoFornecedor")
				Me.OnIdVinculoProdutoFornecedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProduto", DbType:="Int")>  _
	Public Property IdProduto() As System.Nullable(Of Integer)
		Get
			Return Me._IdProduto
		End Get
		Set
			If (Me._IdProduto.Equals(value) = false) Then
				If Me._Produtos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdProdutoChanging(value)
				Me.SendPropertyChanging
				Me._IdProduto = value
				Me.SendPropertyChanged("IdProduto")
				Me.OnIdProdutoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdForncedor", DbType:="ntext")>  _
	Public Property IdForncedor() As String
		Get
			Return Me._IdForncedor
		End Get
		Set
			If (String.Equals(Me._IdForncedor, value) = false) Then
				Me.OnIdForncedorChanging(value)
				Me.SendPropertyChanging
				Me._IdForncedor = value
				Me.SendPropertyChanged("IdForncedor")
				Me.OnIdForncedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodFornecedor", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CodFornecedor() As String
		Get
			Return Me._CodFornecedor
		End Get
		Set
			If (String.Equals(Me._CodFornecedor, value) = false) Then
				Me.OnCodFornecedorChanging(value)
				Me.SendPropertyChanging
				Me._CodFornecedor = value
				Me.SendPropertyChanged("CodFornecedor")
				Me.OnCodFornecedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Produtos_VinculoProdutoFornecedor", Storage:="_Produtos", ThisKey:="IdProduto", OtherKey:="IdProduto", IsForeignKey:=true)>  _
	Public Property Produtos() As Produtos
		Get
			Return Me._Produtos.Entity
		End Get
		Set
			Dim previousValue As Produtos = Me._Produtos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Produtos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Produtos.Entity = Nothing
					previousValue.VinculoProdutoFornecedor.Remove(Me)
				End If
				Me._Produtos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VinculoProdutoFornecedor.Add(Me)
					Me._IdProduto = value.IdProduto
				Else
					Me._IdProduto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Produtos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Beneficios")>  _
Partial Public Class Beneficios
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdBeneficio As Integer
	
	Private _Descricao As String
	
	Private _BeneficiosCargo As EntitySet(Of BeneficiosCargo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdBeneficioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficioChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BeneficiosCargo = New EntitySet(Of BeneficiosCargo)(AddressOf Me.attach_BeneficiosCargo, AddressOf Me.detach_BeneficiosCargo)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficio", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdBeneficio() As Integer
		Get
			Return Me._IdBeneficio
		End Get
		Set
			If ((Me._IdBeneficio = value)  _
						= false) Then
				Me.OnIdBeneficioChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficio = value
				Me.SendPropertyChanged("IdBeneficio")
				Me.OnIdBeneficioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descricao", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descricao
		End Get
		Set
			If (String.Equals(Me._Descricao, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descricao = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficios_BeneficiosCargo", Storage:="_BeneficiosCargo", ThisKey:="IdBeneficio", OtherKey:="IdBeneficio")>  _
	Public Property BeneficiosCargo() As EntitySet(Of BeneficiosCargo)
		Get
			Return Me._BeneficiosCargo
		End Get
		Set
			Me._BeneficiosCargo.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BeneficiosCargo(ByVal entity As BeneficiosCargo)
		Me.SendPropertyChanging
		entity.Beneficios = Me
	End Sub
	
	Private Sub detach_BeneficiosCargo(ByVal entity As BeneficiosCargo)
		Me.SendPropertyChanging
		entity.Beneficios = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cargos")>  _
Partial Public Class Cargos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdCargo As Integer
	
	Private _Descricao As String
	
	Private _RemuneracaoBase As System.Nullable(Of Decimal)
	
	Private _ComVenda As System.Nullable(Of Decimal)
	
	Private _RemMensal As System.Nullable(Of Boolean)
	
	Private _RemHR As System.Nullable(Of Boolean)
	
	Private _Fechamento As System.Nullable(Of Integer)
	
	Private _IdExterno As Integer
	
	Private _Funcionarios As EntitySet(Of Funcionarios)
	
	Private _BeneficiosCargo As EntitySet(Of BeneficiosCargo)
	
	Private _EscalaCargos As EntitySet(Of EscalaCargos)
	
	Private _VinculoFerramentasCargos As EntitySet(Of VinculoFerramentasCargos)
	
	Private _ProfissionalServico As EntitySet(Of ProfissionalServico)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdCargoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCargoChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnRemuneracaoBaseChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRemuneracaoBaseChanged()
    End Sub
    Partial Private Sub OnComVendaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnComVendaChanged()
    End Sub
    Partial Private Sub OnRemMensalChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRemMensalChanged()
    End Sub
    Partial Private Sub OnRemHRChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRemHRChanged()
    End Sub
    Partial Private Sub OnFechamentoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFechamentoChanged()
    End Sub
    Partial Private Sub OnIdExternoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdExternoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Funcionarios = New EntitySet(Of Funcionarios)(AddressOf Me.attach_Funcionarios, AddressOf Me.detach_Funcionarios)
		Me._BeneficiosCargo = New EntitySet(Of BeneficiosCargo)(AddressOf Me.attach_BeneficiosCargo, AddressOf Me.detach_BeneficiosCargo)
		Me._EscalaCargos = New EntitySet(Of EscalaCargos)(AddressOf Me.attach_EscalaCargos, AddressOf Me.detach_EscalaCargos)
		Me._VinculoFerramentasCargos = New EntitySet(Of VinculoFerramentasCargos)(AddressOf Me.attach_VinculoFerramentasCargos, AddressOf Me.detach_VinculoFerramentasCargos)
		Me._ProfissionalServico = New EntitySet(Of ProfissionalServico)(AddressOf Me.attach_ProfissionalServico, AddressOf Me.detach_ProfissionalServico)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCargo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdCargo() As Integer
		Get
			Return Me._IdCargo
		End Get
		Set
			If ((Me._IdCargo = value)  _
						= false) Then
				Me.OnIdCargoChanging(value)
				Me.SendPropertyChanging
				Me._IdCargo = value
				Me.SendPropertyChanged("IdCargo")
				Me.OnIdCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descricao", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descricao
		End Get
		Set
			If (String.Equals(Me._Descricao, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descricao = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RemuneracaoBase", DbType:="Money")>  _
	Public Property RemuneracaoBase() As System.Nullable(Of Decimal)
		Get
			Return Me._RemuneracaoBase
		End Get
		Set
			If (Me._RemuneracaoBase.Equals(value) = false) Then
				Me.OnRemuneracaoBaseChanging(value)
				Me.SendPropertyChanging
				Me._RemuneracaoBase = value
				Me.SendPropertyChanged("RemuneracaoBase")
				Me.OnRemuneracaoBaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComVenda", DbType:="Money")>  _
	Public Property ComVenda() As System.Nullable(Of Decimal)
		Get
			Return Me._ComVenda
		End Get
		Set
			If (Me._ComVenda.Equals(value) = false) Then
				Me.OnComVendaChanging(value)
				Me.SendPropertyChanging
				Me._ComVenda = value
				Me.SendPropertyChanged("ComVenda")
				Me.OnComVendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RemMensal", DbType:="Bit")>  _
	Public Property RemMensal() As System.Nullable(Of Boolean)
		Get
			Return Me._RemMensal
		End Get
		Set
			If (Me._RemMensal.Equals(value) = false) Then
				Me.OnRemMensalChanging(value)
				Me.SendPropertyChanging
				Me._RemMensal = value
				Me.SendPropertyChanged("RemMensal")
				Me.OnRemMensalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RemHR", DbType:="Bit")>  _
	Public Property RemHR() As System.Nullable(Of Boolean)
		Get
			Return Me._RemHR
		End Get
		Set
			If (Me._RemHR.Equals(value) = false) Then
				Me.OnRemHRChanging(value)
				Me.SendPropertyChanging
				Me._RemHR = value
				Me.SendPropertyChanged("RemHR")
				Me.OnRemHRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fechamento", DbType:="Int")>  _
	Public Property Fechamento() As System.Nullable(Of Integer)
		Get
			Return Me._Fechamento
		End Get
		Set
			If (Me._Fechamento.Equals(value) = false) Then
				Me.OnFechamentoChanging(value)
				Me.SendPropertyChanging
				Me._Fechamento = value
				Me.SendPropertyChanged("Fechamento")
				Me.OnFechamentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdExterno", DbType:="int")>  _
	Public Property IdExterno() As Integer
		Get
			Return Me._IdExterno
		End Get
		Set
			If ((Me._IdExterno = value)  _
						= false) Then
				Me.OnIdExternoChanging(value)
				Me.SendPropertyChanging
				Me._IdExterno = value
				Me.SendPropertyChanged("IdExterno")
				Me.OnIdExternoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cargos_Funcionarios", Storage:="_Funcionarios", ThisKey:="IdCargo", OtherKey:="IdCargo")>  _
	Public Property Funcionarios() As EntitySet(Of Funcionarios)
		Get
			Return Me._Funcionarios
		End Get
		Set
			Me._Funcionarios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cargos_BeneficiosCargo", Storage:="_BeneficiosCargo", ThisKey:="IdCargo", OtherKey:="IdCargo")>  _
	Public Property BeneficiosCargo() As EntitySet(Of BeneficiosCargo)
		Get
			Return Me._BeneficiosCargo
		End Get
		Set
			Me._BeneficiosCargo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cargos_EscalaCargos", Storage:="_EscalaCargos", ThisKey:="IdCargo", OtherKey:="IdCargo")>  _
	Public Property EscalaCargos() As EntitySet(Of EscalaCargos)
		Get
			Return Me._EscalaCargos
		End Get
		Set
			Me._EscalaCargos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cargos_VinculoFerramentasCargos", Storage:="_VinculoFerramentasCargos", ThisKey:="IdCargo", OtherKey:="IdCargo")>  _
	Public Property VinculoFerramentasCargos() As EntitySet(Of VinculoFerramentasCargos)
		Get
			Return Me._VinculoFerramentasCargos
		End Get
		Set
			Me._VinculoFerramentasCargos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cargos_ProfissionalServico", Storage:="_ProfissionalServico", ThisKey:="IdCargo", OtherKey:="IdProfissional")>  _
	Public Property ProfissionalServico() As EntitySet(Of ProfissionalServico)
		Get
			Return Me._ProfissionalServico
		End Get
		Set
			Me._ProfissionalServico.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Funcionarios(ByVal entity As Funcionarios)
		Me.SendPropertyChanging
		entity.Cargos = Me
	End Sub
	
	Private Sub detach_Funcionarios(ByVal entity As Funcionarios)
		Me.SendPropertyChanging
		entity.Cargos = Nothing
	End Sub
	
	Private Sub attach_BeneficiosCargo(ByVal entity As BeneficiosCargo)
		Me.SendPropertyChanging
		entity.Cargos = Me
	End Sub
	
	Private Sub detach_BeneficiosCargo(ByVal entity As BeneficiosCargo)
		Me.SendPropertyChanging
		entity.Cargos = Nothing
	End Sub
	
	Private Sub attach_EscalaCargos(ByVal entity As EscalaCargos)
		Me.SendPropertyChanging
		entity.Cargos = Me
	End Sub
	
	Private Sub detach_EscalaCargos(ByVal entity As EscalaCargos)
		Me.SendPropertyChanging
		entity.Cargos = Nothing
	End Sub
	
	Private Sub attach_VinculoFerramentasCargos(ByVal entity As VinculoFerramentasCargos)
		Me.SendPropertyChanging
		entity.Cargos = Me
	End Sub
	
	Private Sub detach_VinculoFerramentasCargos(ByVal entity As VinculoFerramentasCargos)
		Me.SendPropertyChanging
		entity.Cargos = Nothing
	End Sub
	
	Private Sub attach_ProfissionalServico(ByVal entity As ProfissionalServico)
		Me.SendPropertyChanging
		entity.Cargos = Me
	End Sub
	
	Private Sub detach_ProfissionalServico(ByVal entity As ProfissionalServico)
		Me.SendPropertyChanging
		entity.Cargos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BeneficiosCargo")>  _
Partial Public Class BeneficiosCargo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdBeneficioCargo As Integer
	
	Private _IdCargo As System.Nullable(Of Integer)
	
	Private _IdBeneficio As System.Nullable(Of Integer)
	
	Private _Descricao As String
	
	Private _Desconto As System.Nullable(Of Boolean)
	
	Private _Valor As System.Nullable(Of Decimal)
	
	Private _Atribuicao As String
	
	Private _Cargos As EntityRef(Of Cargos)
	
	Private _Beneficios As EntityRef(Of Beneficios)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdBeneficioCargoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficioCargoChanged()
    End Sub
    Partial Private Sub OnIdCargoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdCargoChanged()
    End Sub
    Partial Private Sub OnIdBeneficioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdBeneficioChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnDescontoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDescontoChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    Partial Private Sub OnAtribuicaoChanging(value As String)
    End Sub
    Partial Private Sub OnAtribuicaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cargos = CType(Nothing, EntityRef(Of Cargos))
		Me._Beneficios = CType(Nothing, EntityRef(Of Beneficios))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficioCargo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdBeneficioCargo() As Integer
		Get
			Return Me._IdBeneficioCargo
		End Get
		Set
			If ((Me._IdBeneficioCargo = value)  _
						= false) Then
				Me.OnIdBeneficioCargoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficioCargo = value
				Me.SendPropertyChanged("IdBeneficioCargo")
				Me.OnIdBeneficioCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCargo", DbType:="Int")>  _
	Public Property IdCargo() As System.Nullable(Of Integer)
		Get
			Return Me._IdCargo
		End Get
		Set
			If (Me._IdCargo.Equals(value) = false) Then
				If Me._Cargos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdCargoChanging(value)
				Me.SendPropertyChanging
				Me._IdCargo = value
				Me.SendPropertyChanged("IdCargo")
				Me.OnIdCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficio", DbType:="Int")>  _
	Public Property IdBeneficio() As System.Nullable(Of Integer)
		Get
			Return Me._IdBeneficio
		End Get
		Set
			If (Me._IdBeneficio.Equals(value) = false) Then
				If Me._Beneficios.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdBeneficioChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficio = value
				Me.SendPropertyChanged("IdBeneficio")
				Me.OnIdBeneficioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descricao", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descricao
		End Get
		Set
			If (String.Equals(Me._Descricao, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descricao = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Desconto", DbType:="Bit")>  _
	Public Property Desconto() As System.Nullable(Of Boolean)
		Get
			Return Me._Desconto
		End Get
		Set
			If (Me._Desconto.Equals(value) = false) Then
				Me.OnDescontoChanging(value)
				Me.SendPropertyChanging
				Me._Desconto = value
				Me.SendPropertyChanged("Desconto")
				Me.OnDescontoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="Money")>  _
	Public Property Valor() As System.Nullable(Of Decimal)
		Get
			Return Me._Valor
		End Get
		Set
			If (Me._Valor.Equals(value) = false) Then
				Me.OnValorChanging(value)
				Me.SendPropertyChanging
				Me._Valor = value
				Me.SendPropertyChanged("Valor")
				Me.OnValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Atribuicao", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Atribuicao() As String
		Get
			Return Me._Atribuicao
		End Get
		Set
			If (String.Equals(Me._Atribuicao, value) = false) Then
				Me.OnAtribuicaoChanging(value)
				Me.SendPropertyChanging
				Me._Atribuicao = value
				Me.SendPropertyChanged("Atribuicao")
				Me.OnAtribuicaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cargos_BeneficiosCargo", Storage:="_Cargos", ThisKey:="IdCargo", OtherKey:="IdCargo", IsForeignKey:=true)>  _
	Public Property Cargos() As Cargos
		Get
			Return Me._Cargos.Entity
		End Get
		Set
			Dim previousValue As Cargos = Me._Cargos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cargos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cargos.Entity = Nothing
					previousValue.BeneficiosCargo.Remove(Me)
				End If
				Me._Cargos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BeneficiosCargo.Add(Me)
					Me._IdCargo = value.IdCargo
				Else
					Me._IdCargo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cargos")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficios_BeneficiosCargo", Storage:="_Beneficios", ThisKey:="IdBeneficio", OtherKey:="IdBeneficio", IsForeignKey:=true)>  _
	Public Property Beneficios() As Beneficios
		Get
			Return Me._Beneficios.Entity
		End Get
		Set
			Dim previousValue As Beneficios = Me._Beneficios.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Beneficios.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Beneficios.Entity = Nothing
					previousValue.BeneficiosCargo.Remove(Me)
				End If
				Me._Beneficios.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BeneficiosCargo.Add(Me)
					Me._IdBeneficio = value.IdBeneficio
				Else
					Me._IdBeneficio = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Beneficios")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EscalaCargos")>  _
Partial Public Class EscalaCargos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEscalaCargo As Integer
	
	Private _IdCargo As System.Nullable(Of Integer)
	
	Private _DiaDaSemana As System.Nullable(Of Integer)
	
	Private _HrEntrada As System.Nullable(Of System.TimeSpan)
	
	Private _HrSaida As System.Nullable(Of System.TimeSpan)
	
	Private _Intervalo As System.Nullable(Of System.TimeSpan)
	
	Private _FolgaEscalaEquipe As System.Nullable(Of Boolean)
	
	Private _Cargos As EntityRef(Of Cargos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEscalaCargoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEscalaCargoChanged()
    End Sub
    Partial Private Sub OnIdCargoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdCargoChanged()
    End Sub
    Partial Private Sub OnDiaDaSemanaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDiaDaSemanaChanged()
    End Sub
    Partial Private Sub OnHrEntradaChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnHrEntradaChanged()
    End Sub
    Partial Private Sub OnHrSaidaChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnHrSaidaChanged()
    End Sub
    Partial Private Sub OnIntervaloChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnIntervaloChanged()
    End Sub
    Partial Private Sub OnFolgaEscalaEquipeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnFolgaEscalaEquipeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cargos = CType(Nothing, EntityRef(Of Cargos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEscalaCargo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdEscalaCargo() As Integer
		Get
			Return Me._IdEscalaCargo
		End Get
		Set
			If ((Me._IdEscalaCargo = value)  _
						= false) Then
				Me.OnIdEscalaCargoChanging(value)
				Me.SendPropertyChanging
				Me._IdEscalaCargo = value
				Me.SendPropertyChanged("IdEscalaCargo")
				Me.OnIdEscalaCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCargo", DbType:="Int")>  _
	Public Property IdCargo() As System.Nullable(Of Integer)
		Get
			Return Me._IdCargo
		End Get
		Set
			If (Me._IdCargo.Equals(value) = false) Then
				If Me._Cargos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdCargoChanging(value)
				Me.SendPropertyChanging
				Me._IdCargo = value
				Me.SendPropertyChanged("IdCargo")
				Me.OnIdCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiaDaSemana", DbType:="Int")>  _
	Public Property DiaDaSemana() As System.Nullable(Of Integer)
		Get
			Return Me._DiaDaSemana
		End Get
		Set
			If (Me._DiaDaSemana.Equals(value) = false) Then
				Me.OnDiaDaSemanaChanging(value)
				Me.SendPropertyChanging
				Me._DiaDaSemana = value
				Me.SendPropertyChanged("DiaDaSemana")
				Me.OnDiaDaSemanaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HrEntrada", DbType:="Time")>  _
	Public Property HrEntrada() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._HrEntrada
		End Get
		Set
			If (Me._HrEntrada.Equals(value) = false) Then
				Me.OnHrEntradaChanging(value)
				Me.SendPropertyChanging
				Me._HrEntrada = value
				Me.SendPropertyChanged("HrEntrada")
				Me.OnHrEntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HrSaida", DbType:="Time")>  _
	Public Property HrSaida() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._HrSaida
		End Get
		Set
			If (Me._HrSaida.Equals(value) = false) Then
				Me.OnHrSaidaChanging(value)
				Me.SendPropertyChanging
				Me._HrSaida = value
				Me.SendPropertyChanged("HrSaida")
				Me.OnHrSaidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Intervalo", DbType:="Time")>  _
	Public Property Intervalo() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._Intervalo
		End Get
		Set
			If (Me._Intervalo.Equals(value) = false) Then
				Me.OnIntervaloChanging(value)
				Me.SendPropertyChanging
				Me._Intervalo = value
				Me.SendPropertyChanged("Intervalo")
				Me.OnIntervaloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FolgaEscalaEquipe", DbType:="Bit")>  _
	Public Property FolgaEscalaEquipe() As System.Nullable(Of Boolean)
		Get
			Return Me._FolgaEscalaEquipe
		End Get
		Set
			If (Me._FolgaEscalaEquipe.Equals(value) = false) Then
				Me.OnFolgaEscalaEquipeChanging(value)
				Me.SendPropertyChanging
				Me._FolgaEscalaEquipe = value
				Me.SendPropertyChanged("FolgaEscalaEquipe")
				Me.OnFolgaEscalaEquipeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cargos_EscalaCargos", Storage:="_Cargos", ThisKey:="IdCargo", OtherKey:="IdCargo", IsForeignKey:=true)>  _
	Public Property Cargos() As Cargos
		Get
			Return Me._Cargos.Entity
		End Get
		Set
			Dim previousValue As Cargos = Me._Cargos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cargos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cargos.Entity = Nothing
					previousValue.EscalaCargos.Remove(Me)
				End If
				Me._Cargos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EscalaCargos.Add(Me)
					Me._IdCargo = value.IdCargo
				Else
					Me._IdCargo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cargos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ferramentas")>  _
Partial Public Class Ferramentas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdFerramenta As Integer
	
	Private _Descricao As String
	
	Private _NVinculado As System.Nullable(Of Boolean)
	
	Private _Modulo As String
	
	Private _VinculoFerramentasCargos As EntitySet(Of VinculoFerramentasCargos)
	
	Private _Insumos As EntitySet(Of Insumos)
	
	Private _EPI As EntitySet(Of EPI)
	
	Private _FerramentasServico As EntitySet(Of FerramentasServico)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdFerramentaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdFerramentaChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnNVinculadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNVinculadoChanged()
    End Sub
    Partial Private Sub OnModuloChanging(value As String)
    End Sub
    Partial Private Sub OnModuloChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._VinculoFerramentasCargos = New EntitySet(Of VinculoFerramentasCargos)(AddressOf Me.attach_VinculoFerramentasCargos, AddressOf Me.detach_VinculoFerramentasCargos)
		Me._Insumos = New EntitySet(Of Insumos)(AddressOf Me.attach_Insumos, AddressOf Me.detach_Insumos)
		Me._EPI = New EntitySet(Of EPI)(AddressOf Me.attach_EPI, AddressOf Me.detach_EPI)
		Me._FerramentasServico = New EntitySet(Of FerramentasServico)(AddressOf Me.attach_FerramentasServico, AddressOf Me.detach_FerramentasServico)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFerramenta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdFerramenta() As Integer
		Get
			Return Me._IdFerramenta
		End Get
		Set
			If ((Me._IdFerramenta = value)  _
						= false) Then
				Me.OnIdFerramentaChanging(value)
				Me.SendPropertyChanging
				Me._IdFerramenta = value
				Me.SendPropertyChanged("IdFerramenta")
				Me.OnIdFerramentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descricao", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descricao
		End Get
		Set
			If (String.Equals(Me._Descricao, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descricao = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NVinculado", DbType:="Bit")>  _
	Public Property NVinculado() As System.Nullable(Of Boolean)
		Get
			Return Me._NVinculado
		End Get
		Set
			If (Me._NVinculado.Equals(value) = false) Then
				Me.OnNVinculadoChanging(value)
				Me.SendPropertyChanging
				Me._NVinculado = value
				Me.SendPropertyChanged("NVinculado")
				Me.OnNVinculadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Modulo", DbType:="Ntext", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Modulo() As String
		Get
			Return Me._Modulo
		End Get
		Set
			If (String.Equals(Me._Modulo, value) = false) Then
				Me.OnModuloChanging(value)
				Me.SendPropertyChanging
				Me._Modulo = value
				Me.SendPropertyChanged("Modulo")
				Me.OnModuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ferramentas_VinculoFerramentasCargos", Storage:="_VinculoFerramentasCargos", ThisKey:="IdFerramenta", OtherKey:="IdFerramenta")>  _
	Public Property VinculoFerramentasCargos() As EntitySet(Of VinculoFerramentasCargos)
		Get
			Return Me._VinculoFerramentasCargos
		End Get
		Set
			Me._VinculoFerramentasCargos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ferramentas_Insumos", Storage:="_Insumos", ThisKey:="IdFerramenta", OtherKey:="IdInsumo")>  _
	Public Property Insumos() As EntitySet(Of Insumos)
		Get
			Return Me._Insumos
		End Get
		Set
			Me._Insumos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ferramentas_EPI", Storage:="_EPI", ThisKey:="IdFerramenta", OtherKey:="IdFerramenta")>  _
	Public Property EPI() As EntitySet(Of EPI)
		Get
			Return Me._EPI
		End Get
		Set
			Me._EPI.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ferramentas_FerramentasServico", Storage:="_FerramentasServico", ThisKey:="IdFerramenta", OtherKey:="IdFerramenta")>  _
	Public Property FerramentasServico() As EntitySet(Of FerramentasServico)
		Get
			Return Me._FerramentasServico
		End Get
		Set
			Me._FerramentasServico.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_VinculoFerramentasCargos(ByVal entity As VinculoFerramentasCargos)
		Me.SendPropertyChanging
		entity.Ferramentas = Me
	End Sub
	
	Private Sub detach_VinculoFerramentasCargos(ByVal entity As VinculoFerramentasCargos)
		Me.SendPropertyChanging
		entity.Ferramentas = Nothing
	End Sub
	
	Private Sub attach_Insumos(ByVal entity As Insumos)
		Me.SendPropertyChanging
		entity.Ferramentas = Me
	End Sub
	
	Private Sub detach_Insumos(ByVal entity As Insumos)
		Me.SendPropertyChanging
		entity.Ferramentas = Nothing
	End Sub
	
	Private Sub attach_EPI(ByVal entity As EPI)
		Me.SendPropertyChanging
		entity.Ferramentas = Me
	End Sub
	
	Private Sub detach_EPI(ByVal entity As EPI)
		Me.SendPropertyChanging
		entity.Ferramentas = Nothing
	End Sub
	
	Private Sub attach_FerramentasServico(ByVal entity As FerramentasServico)
		Me.SendPropertyChanging
		entity.Ferramentas = Me
	End Sub
	
	Private Sub detach_FerramentasServico(ByVal entity As FerramentasServico)
		Me.SendPropertyChanging
		entity.Ferramentas = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VinculoFerramentasCargos")>  _
Partial Public Class VinculoFerramentasCargos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdFerramentaCargo As Integer
	
	Private _IdCargo As System.Nullable(Of Integer)
	
	Private _IdFerramenta As System.Nullable(Of Integer)
	
	Private _Descricao As String
	
	Private _Ferramentas As EntityRef(Of Ferramentas)
	
	Private _Cargos As EntityRef(Of Cargos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdFerramentaCargoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdFerramentaCargoChanged()
    End Sub
    Partial Private Sub OnIdCargoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdCargoChanged()
    End Sub
    Partial Private Sub OnIdFerramentaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdFerramentaChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ferramentas = CType(Nothing, EntityRef(Of Ferramentas))
		Me._Cargos = CType(Nothing, EntityRef(Of Cargos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFerramentaCargo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true)>  _
	Public Property IdFerramentaCargo() As Integer
		Get
			Return Me._IdFerramentaCargo
		End Get
		Set
			If ((Me._IdFerramentaCargo = value)  _
						= false) Then
				Me.OnIdFerramentaCargoChanging(value)
				Me.SendPropertyChanging
				Me._IdFerramentaCargo = value
				Me.SendPropertyChanged("IdFerramentaCargo")
				Me.OnIdFerramentaCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCargo", DbType:="Int")>  _
	Public Property IdCargo() As System.Nullable(Of Integer)
		Get
			Return Me._IdCargo
		End Get
		Set
			If (Me._IdCargo.Equals(value) = false) Then
				If Me._Cargos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdCargoChanging(value)
				Me.SendPropertyChanging
				Me._IdCargo = value
				Me.SendPropertyChanged("IdCargo")
				Me.OnIdCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFerramenta", DbType:="Int")>  _
	Public Property IdFerramenta() As System.Nullable(Of Integer)
		Get
			Return Me._IdFerramenta
		End Get
		Set
			If (Me._IdFerramenta.Equals(value) = false) Then
				If Me._Ferramentas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdFerramentaChanging(value)
				Me.SendPropertyChanging
				Me._IdFerramenta = value
				Me.SendPropertyChanged("IdFerramenta")
				Me.OnIdFerramentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descricao", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descricao
		End Get
		Set
			If (String.Equals(Me._Descricao, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descricao = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ferramentas_VinculoFerramentasCargos", Storage:="_Ferramentas", ThisKey:="IdFerramenta", OtherKey:="IdFerramenta", IsForeignKey:=true)>  _
	Public Property Ferramentas() As Ferramentas
		Get
			Return Me._Ferramentas.Entity
		End Get
		Set
			Dim previousValue As Ferramentas = Me._Ferramentas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ferramentas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ferramentas.Entity = Nothing
					previousValue.VinculoFerramentasCargos.Remove(Me)
				End If
				Me._Ferramentas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VinculoFerramentasCargos.Add(Me)
					Me._IdFerramenta = value.IdFerramenta
				Else
					Me._IdFerramenta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Ferramentas")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cargos_VinculoFerramentasCargos", Storage:="_Cargos", ThisKey:="IdCargo", OtherKey:="IdCargo", IsForeignKey:=true)>  _
	Public Property Cargos() As Cargos
		Get
			Return Me._Cargos.Entity
		End Get
		Set
			Dim previousValue As Cargos = Me._Cargos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cargos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cargos.Entity = Nothing
					previousValue.VinculoFerramentasCargos.Remove(Me)
				End If
				Me._Cargos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VinculoFerramentasCargos.Add(Me)
					Me._IdCargo = value.IdCargo
				Else
					Me._IdCargo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cargos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Insumos")>  _
Partial Public Class Insumos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdInsumo As Integer
	
	Private _Descricao As String
	
	Private _IdFerramenta As System.Nullable(Of Integer)
	
	Private _UsoComum As System.Nullable(Of Boolean)
	
	Private _InsumosServiços As EntitySet(Of InsumosServiços)
	
	Private _Ferramentas As EntityRef(Of Ferramentas)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdInsumoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdInsumoChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnIdFerramentaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdFerramentaChanged()
    End Sub
    Partial Private Sub OnUsoComumChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnUsoComumChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._InsumosServiços = New EntitySet(Of InsumosServiços)(AddressOf Me.attach_InsumosServiços, AddressOf Me.detach_InsumosServiços)
		Me._Ferramentas = CType(Nothing, EntityRef(Of Ferramentas))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdInsumo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdInsumo() As Integer
		Get
			Return Me._IdInsumo
		End Get
		Set
			If ((Me._IdInsumo = value)  _
						= false) Then
				If Me._Ferramentas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdInsumoChanging(value)
				Me.SendPropertyChanging
				Me._IdInsumo = value
				Me.SendPropertyChanged("IdInsumo")
				Me.OnIdInsumoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descricao", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descricao
		End Get
		Set
			If (String.Equals(Me._Descricao, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descricao = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFerramenta", DbType:="Int")>  _
	Public Property IdFerramenta() As System.Nullable(Of Integer)
		Get
			Return Me._IdFerramenta
		End Get
		Set
			If (Me._IdFerramenta.Equals(value) = false) Then
				Me.OnIdFerramentaChanging(value)
				Me.SendPropertyChanging
				Me._IdFerramenta = value
				Me.SendPropertyChanged("IdFerramenta")
				Me.OnIdFerramentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UsoComum", DbType:="Bit")>  _
	Public Property UsoComum() As System.Nullable(Of Boolean)
		Get
			Return Me._UsoComum
		End Get
		Set
			If (Me._UsoComum.Equals(value) = false) Then
				Me.OnUsoComumChanging(value)
				Me.SendPropertyChanging
				Me._UsoComum = value
				Me.SendPropertyChanged("UsoComum")
				Me.OnUsoComumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Insumos_InsumosServiços", Storage:="_InsumosServiços", ThisKey:="IdInsumo", OtherKey:="IdInsumo")>  _
	Public Property InsumosServiços() As EntitySet(Of InsumosServiços)
		Get
			Return Me._InsumosServiços
		End Get
		Set
			Me._InsumosServiços.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ferramentas_Insumos", Storage:="_Ferramentas", ThisKey:="IdInsumo", OtherKey:="IdFerramenta", IsForeignKey:=true)>  _
	Public Property Ferramentas() As Ferramentas
		Get
			Return Me._Ferramentas.Entity
		End Get
		Set
			Dim previousValue As Ferramentas = Me._Ferramentas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ferramentas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ferramentas.Entity = Nothing
					previousValue.Insumos.Remove(Me)
				End If
				Me._Ferramentas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Insumos.Add(Me)
					Me._IdInsumo = value.IdFerramenta
				Else
					Me._IdInsumo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Ferramentas")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_InsumosServiços(ByVal entity As InsumosServiços)
		Me.SendPropertyChanging
		entity.Insumos = Me
	End Sub
	
	Private Sub detach_InsumosServiços(ByVal entity As InsumosServiços)
		Me.SendPropertyChanging
		entity.Insumos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EPI")>  _
Partial Public Class EPI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEpi As Integer
	
	Private _IdFerramenta As System.Nullable(Of Integer)
	
	Private _Descricao As String
	
	Private _UsoComum As System.Nullable(Of Boolean)
	
	Private _EPIServico As EntitySet(Of EPIServico)
	
	Private _Ferramentas As EntityRef(Of Ferramentas)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEpiChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEpiChanged()
    End Sub
    Partial Private Sub OnIdFerramentaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdFerramentaChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnUsoComumChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnUsoComumChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EPIServico = New EntitySet(Of EPIServico)(AddressOf Me.attach_EPIServico, AddressOf Me.detach_EPIServico)
		Me._Ferramentas = CType(Nothing, EntityRef(Of Ferramentas))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEpi", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdEpi() As Integer
		Get
			Return Me._IdEpi
		End Get
		Set
			If ((Me._IdEpi = value)  _
						= false) Then
				Me.OnIdEpiChanging(value)
				Me.SendPropertyChanging
				Me._IdEpi = value
				Me.SendPropertyChanged("IdEpi")
				Me.OnIdEpiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFerramenta", DbType:="Int")>  _
	Public Property IdFerramenta() As System.Nullable(Of Integer)
		Get
			Return Me._IdFerramenta
		End Get
		Set
			If (Me._IdFerramenta.Equals(value) = false) Then
				If Me._Ferramentas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdFerramentaChanging(value)
				Me.SendPropertyChanging
				Me._IdFerramenta = value
				Me.SendPropertyChanged("IdFerramenta")
				Me.OnIdFerramentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descricao", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descricao
		End Get
		Set
			If (String.Equals(Me._Descricao, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descricao = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UsoComum", DbType:="Bit")>  _
	Public Property UsoComum() As System.Nullable(Of Boolean)
		Get
			Return Me._UsoComum
		End Get
		Set
			If (Me._UsoComum.Equals(value) = false) Then
				Me.OnUsoComumChanging(value)
				Me.SendPropertyChanging
				Me._UsoComum = value
				Me.SendPropertyChanged("UsoComum")
				Me.OnUsoComumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EPI_EPIServico", Storage:="_EPIServico", ThisKey:="IdEpi", OtherKey:="IdEpi")>  _
	Public Property EPIServico() As EntitySet(Of EPIServico)
		Get
			Return Me._EPIServico
		End Get
		Set
			Me._EPIServico.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ferramentas_EPI", Storage:="_Ferramentas", ThisKey:="IdFerramenta", OtherKey:="IdFerramenta", IsForeignKey:=true)>  _
	Public Property Ferramentas() As Ferramentas
		Get
			Return Me._Ferramentas.Entity
		End Get
		Set
			Dim previousValue As Ferramentas = Me._Ferramentas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ferramentas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ferramentas.Entity = Nothing
					previousValue.EPI.Remove(Me)
				End If
				Me._Ferramentas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EPI.Add(Me)
					Me._IdFerramenta = value.IdFerramenta
				Else
					Me._IdFerramenta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Ferramentas")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_EPIServico(ByVal entity As EPIServico)
		Me.SendPropertyChanging
		entity.EPI = Me
	End Sub
	
	Private Sub detach_EPIServico(ByVal entity As EPIServico)
		Me.SendPropertyChanging
		entity.EPI = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EPIServico")>  _
Partial Public Class EPIServico
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIdEPIServico As Integer
	
	Private _IdEpi As System.Nullable(Of Integer)
	
	Private _IdServico As System.Nullable(Of Integer)
	
	Private _EPI As EntityRef(Of EPI)
	
	Private _Servicos As EntityRef(Of Servicos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIdEPIServicoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIdEPIServicoChanged()
    End Sub
    Partial Private Sub OnIdEpiChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdEpiChanged()
    End Sub
    Partial Private Sub OnIdServicoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdServicoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EPI = CType(Nothing, EntityRef(Of EPI))
		Me._Servicos = CType(Nothing, EntityRef(Of Servicos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIdEPIServico", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIdEPIServico() As Integer
		Get
			Return Me._IIdEPIServico
		End Get
		Set
			If ((Me._IIdEPIServico = value)  _
						= false) Then
				Me.OnIIdEPIServicoChanging(value)
				Me.SendPropertyChanging
				Me._IIdEPIServico = value
				Me.SendPropertyChanged("IIdEPIServico")
				Me.OnIIdEPIServicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEpi", DbType:="Int")>  _
	Public Property IdEpi() As System.Nullable(Of Integer)
		Get
			Return Me._IdEpi
		End Get
		Set
			If (Me._IdEpi.Equals(value) = false) Then
				If Me._EPI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdEpiChanging(value)
				Me.SendPropertyChanging
				Me._IdEpi = value
				Me.SendPropertyChanged("IdEpi")
				Me.OnIdEpiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdServico", DbType:="Int")>  _
	Public Property IdServico() As System.Nullable(Of Integer)
		Get
			Return Me._IdServico
		End Get
		Set
			If (Me._IdServico.Equals(value) = false) Then
				If Me._Servicos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdServicoChanging(value)
				Me.SendPropertyChanging
				Me._IdServico = value
				Me.SendPropertyChanged("IdServico")
				Me.OnIdServicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EPI_EPIServico", Storage:="_EPI", ThisKey:="IdEpi", OtherKey:="IdEpi", IsForeignKey:=true)>  _
	Public Property EPI() As EPI
		Get
			Return Me._EPI.Entity
		End Get
		Set
			Dim previousValue As EPI = Me._EPI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EPI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EPI.Entity = Nothing
					previousValue.EPIServico.Remove(Me)
				End If
				Me._EPI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EPIServico.Add(Me)
					Me._IdEpi = value.IdEpi
				Else
					Me._IdEpi = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EPI")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Servicos_EPIServico", Storage:="_Servicos", ThisKey:="IdServico", OtherKey:="IdServico", IsForeignKey:=true)>  _
	Public Property Servicos() As Servicos
		Get
			Return Me._Servicos.Entity
		End Get
		Set
			Dim previousValue As Servicos = Me._Servicos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Servicos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Servicos.Entity = Nothing
					previousValue.EPIServico.Remove(Me)
				End If
				Me._Servicos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EPIServico.Add(Me)
					Me._IdServico = value.IdServico
				Else
					Me._IdServico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Servicos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.InsumosServiços")>  _
Partial Public Class InsumosServiços
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdInsumoServico As Integer
	
	Private _IdInsumo As System.Nullable(Of Integer)
	
	Private _IdServico As System.Nullable(Of Integer)
	
	Private _Qtdade As System.Nullable(Of Integer)
	
	Private _Servicos As EntityRef(Of Servicos)
	
	Private _Insumos As EntityRef(Of Insumos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdInsumoServicoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdInsumoServicoChanged()
    End Sub
    Partial Private Sub OnIdInsumoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdInsumoChanged()
    End Sub
    Partial Private Sub OnIdServicoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdServicoChanged()
    End Sub
    Partial Private Sub OnQtdadeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQtdadeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Servicos = CType(Nothing, EntityRef(Of Servicos))
		Me._Insumos = CType(Nothing, EntityRef(Of Insumos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdInsumoServico", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdInsumoServico() As Integer
		Get
			Return Me._IdInsumoServico
		End Get
		Set
			If ((Me._IdInsumoServico = value)  _
						= false) Then
				Me.OnIdInsumoServicoChanging(value)
				Me.SendPropertyChanging
				Me._IdInsumoServico = value
				Me.SendPropertyChanged("IdInsumoServico")
				Me.OnIdInsumoServicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdInsumo", DbType:="Int")>  _
	Public Property IdInsumo() As System.Nullable(Of Integer)
		Get
			Return Me._IdInsumo
		End Get
		Set
			If (Me._IdInsumo.Equals(value) = false) Then
				If Me._Insumos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdInsumoChanging(value)
				Me.SendPropertyChanging
				Me._IdInsumo = value
				Me.SendPropertyChanged("IdInsumo")
				Me.OnIdInsumoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdServico", DbType:="Int")>  _
	Public Property IdServico() As System.Nullable(Of Integer)
		Get
			Return Me._IdServico
		End Get
		Set
			If (Me._IdServico.Equals(value) = false) Then
				If Me._Servicos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdServicoChanging(value)
				Me.SendPropertyChanging
				Me._IdServico = value
				Me.SendPropertyChanged("IdServico")
				Me.OnIdServicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qtdade", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Qtdade() As System.Nullable(Of Integer)
		Get
			Return Me._Qtdade
		End Get
		Set
			If (Me._Qtdade.Equals(value) = false) Then
				Me.OnQtdadeChanging(value)
				Me.SendPropertyChanging
				Me._Qtdade = value
				Me.SendPropertyChanged("Qtdade")
				Me.OnQtdadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Servicos_InsumosServiços", Storage:="_Servicos", ThisKey:="IdServico", OtherKey:="IdServico", IsForeignKey:=true)>  _
	Public Property Servicos() As Servicos
		Get
			Return Me._Servicos.Entity
		End Get
		Set
			Dim previousValue As Servicos = Me._Servicos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Servicos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Servicos.Entity = Nothing
					previousValue.InsumosServiços.Remove(Me)
				End If
				Me._Servicos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.InsumosServiços.Add(Me)
					Me._IdServico = value.IdServico
				Else
					Me._IdServico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Servicos")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Insumos_InsumosServiços", Storage:="_Insumos", ThisKey:="IdInsumo", OtherKey:="IdInsumo", IsForeignKey:=true)>  _
	Public Property Insumos() As Insumos
		Get
			Return Me._Insumos.Entity
		End Get
		Set
			Dim previousValue As Insumos = Me._Insumos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Insumos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Insumos.Entity = Nothing
					previousValue.InsumosServiços.Remove(Me)
				End If
				Me._Insumos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.InsumosServiços.Add(Me)
					Me._IdInsumo = value.IdInsumo
				Else
					Me._IdInsumo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Insumos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Servicos")>  _
Partial Public Class Servicos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdServico As Integer
	
	Private _Descricao As String
	
	Private _TME As System.Nullable(Of System.TimeSpan)
	
	Private _Status As System.Nullable(Of Boolean)
	
	Private _Markup As System.Nullable(Of Decimal)
	
	Private _VlrCusto As System.Nullable(Of Decimal)
	
	Private _VlrVeda As System.Nullable(Of Decimal)
	
	Private _Ferramenta As String
	
	Private _IdCategoria As Integer
	
	Private _IdSubCategoria As Integer
	
	Private _IdServicoInt As Integer
	
	Private _EPIServico As EntitySet(Of EPIServico)
	
	Private _InsumosServiços As EntitySet(Of InsumosServiços)
	
	Private _FerramentasServico As EntitySet(Of FerramentasServico)
	
	Private _ProfissionalServico As EntitySet(Of ProfissionalServico)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdServicoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdServicoChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnTMEChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnTMEChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnMarkupChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMarkupChanged()
    End Sub
    Partial Private Sub OnVlrCustoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnVlrCustoChanged()
    End Sub
    Partial Private Sub OnVlrVedaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnVlrVedaChanged()
    End Sub
    Partial Private Sub OnFerramentaChanging(value As String)
    End Sub
    Partial Private Sub OnFerramentaChanged()
    End Sub
    Partial Private Sub OnIdCategoriaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCategoriaChanged()
    End Sub
    Partial Private Sub OnIdSubCategoriaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSubCategoriaChanged()
    End Sub
    Partial Private Sub OnIdServicoIntChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdServicoIntChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EPIServico = New EntitySet(Of EPIServico)(AddressOf Me.attach_EPIServico, AddressOf Me.detach_EPIServico)
		Me._InsumosServiços = New EntitySet(Of InsumosServiços)(AddressOf Me.attach_InsumosServiços, AddressOf Me.detach_InsumosServiços)
		Me._FerramentasServico = New EntitySet(Of FerramentasServico)(AddressOf Me.attach_FerramentasServico, AddressOf Me.detach_FerramentasServico)
		Me._ProfissionalServico = New EntitySet(Of ProfissionalServico)(AddressOf Me.attach_ProfissionalServico, AddressOf Me.detach_ProfissionalServico)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdServico", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdServico() As Integer
		Get
			Return Me._IdServico
		End Get
		Set
			If ((Me._IdServico = value)  _
						= false) Then
				Me.OnIdServicoChanging(value)
				Me.SendPropertyChanging
				Me._IdServico = value
				Me.SendPropertyChanged("IdServico")
				Me.OnIdServicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descricao", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descricao
		End Get
		Set
			If (String.Equals(Me._Descricao, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descricao = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TME", DbType:="Time")>  _
	Public Property TME() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._TME
		End Get
		Set
			If (Me._TME.Equals(value) = false) Then
				Me.OnTMEChanging(value)
				Me.SendPropertyChanging
				Me._TME = value
				Me.SendPropertyChanged("TME")
				Me.OnTMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Bit")>  _
	Public Property Status() As System.Nullable(Of Boolean)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Markup", DbType:="Money")>  _
	Public Property Markup() As System.Nullable(Of Decimal)
		Get
			Return Me._Markup
		End Get
		Set
			If (Me._Markup.Equals(value) = false) Then
				Me.OnMarkupChanging(value)
				Me.SendPropertyChanging
				Me._Markup = value
				Me.SendPropertyChanged("Markup")
				Me.OnMarkupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VlrCusto", DbType:="Money")>  _
	Public Property VlrCusto() As System.Nullable(Of Decimal)
		Get
			Return Me._VlrCusto
		End Get
		Set
			If (Me._VlrCusto.Equals(value) = false) Then
				Me.OnVlrCustoChanging(value)
				Me.SendPropertyChanging
				Me._VlrCusto = value
				Me.SendPropertyChanged("VlrCusto")
				Me.OnVlrCustoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VlrVeda", DbType:="Money")>  _
	Public Property VlrVeda() As System.Nullable(Of Decimal)
		Get
			Return Me._VlrVeda
		End Get
		Set
			If (Me._VlrVeda.Equals(value) = false) Then
				Me.OnVlrVedaChanging(value)
				Me.SendPropertyChanging
				Me._VlrVeda = value
				Me.SendPropertyChanged("VlrVeda")
				Me.OnVlrVedaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ferramenta", DbType:="Ntext")>  _
	Public Property Ferramenta() As String
		Get
			Return Me._Ferramenta
		End Get
		Set
			If (String.Equals(Me._Ferramenta, value) = false) Then
				Me.OnFerramentaChanging(value)
				Me.SendPropertyChanging
				Me._Ferramenta = value
				Me.SendPropertyChanged("Ferramenta")
				Me.OnFerramentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCategoria", DbType:="Int")>  _
	Public Property IdCategoria() As Integer
		Get
			Return Me._IdCategoria
		End Get
		Set
			If ((Me._IdCategoria = value)  _
						= false) Then
				Me.OnIdCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._IdCategoria = value
				Me.SendPropertyChanged("IdCategoria")
				Me.OnIdCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSubCategoria", DbType:="Int")>  _
	Public Property IdSubCategoria() As Integer
		Get
			Return Me._IdSubCategoria
		End Get
		Set
			If ((Me._IdSubCategoria = value)  _
						= false) Then
				Me.OnIdSubCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._IdSubCategoria = value
				Me.SendPropertyChanged("IdSubCategoria")
				Me.OnIdSubCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdServicoInt", DbType:="Int")>  _
	Public Property IdServicoInt() As Integer
		Get
			Return Me._IdServicoInt
		End Get
		Set
			If ((Me._IdServicoInt = value)  _
						= false) Then
				Me.OnIdServicoIntChanging(value)
				Me.SendPropertyChanging
				Me._IdServicoInt = value
				Me.SendPropertyChanged("IdServicoInt")
				Me.OnIdServicoIntChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Servicos_EPIServico", Storage:="_EPIServico", ThisKey:="IdServico", OtherKey:="IdServico")>  _
	Public Property EPIServico() As EntitySet(Of EPIServico)
		Get
			Return Me._EPIServico
		End Get
		Set
			Me._EPIServico.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Servicos_InsumosServiços", Storage:="_InsumosServiços", ThisKey:="IdServico", OtherKey:="IdServico")>  _
	Public Property InsumosServiços() As EntitySet(Of InsumosServiços)
		Get
			Return Me._InsumosServiços
		End Get
		Set
			Me._InsumosServiços.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Servicos_FerramentasServico", Storage:="_FerramentasServico", ThisKey:="IdServico", OtherKey:="IdServico")>  _
	Public Property FerramentasServico() As EntitySet(Of FerramentasServico)
		Get
			Return Me._FerramentasServico
		End Get
		Set
			Me._FerramentasServico.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Servicos_ProfissionalServico", Storage:="_ProfissionalServico", ThisKey:="IdServico", OtherKey:="IdServico")>  _
	Public Property ProfissionalServico() As EntitySet(Of ProfissionalServico)
		Get
			Return Me._ProfissionalServico
		End Get
		Set
			Me._ProfissionalServico.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_EPIServico(ByVal entity As EPIServico)
		Me.SendPropertyChanging
		entity.Servicos = Me
	End Sub
	
	Private Sub detach_EPIServico(ByVal entity As EPIServico)
		Me.SendPropertyChanging
		entity.Servicos = Nothing
	End Sub
	
	Private Sub attach_InsumosServiços(ByVal entity As InsumosServiços)
		Me.SendPropertyChanging
		entity.Servicos = Me
	End Sub
	
	Private Sub detach_InsumosServiços(ByVal entity As InsumosServiços)
		Me.SendPropertyChanging
		entity.Servicos = Nothing
	End Sub
	
	Private Sub attach_FerramentasServico(ByVal entity As FerramentasServico)
		Me.SendPropertyChanging
		entity.Servicos = Me
	End Sub
	
	Private Sub detach_FerramentasServico(ByVal entity As FerramentasServico)
		Me.SendPropertyChanging
		entity.Servicos = Nothing
	End Sub
	
	Private Sub attach_ProfissionalServico(ByVal entity As ProfissionalServico)
		Me.SendPropertyChanging
		entity.Servicos = Me
	End Sub
	
	Private Sub detach_ProfissionalServico(ByVal entity As ProfissionalServico)
		Me.SendPropertyChanging
		entity.Servicos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FerramentasServico")>  _
Partial Public Class FerramentasServico
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdFerramentaServico As Integer
	
	Private _IdFerramenta As System.Nullable(Of Integer)
	
	Private _IdServico As System.Nullable(Of Integer)
	
	Private _Qtdade As System.Nullable(Of Integer)
	
	Private _Servicos As EntityRef(Of Servicos)
	
	Private _Ferramentas As EntityRef(Of Ferramentas)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdFerramentaServicoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdFerramentaServicoChanged()
    End Sub
    Partial Private Sub OnIdFerramentaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdFerramentaChanged()
    End Sub
    Partial Private Sub OnIdServicoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdServicoChanged()
    End Sub
    Partial Private Sub OnQtdadeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQtdadeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Servicos = CType(Nothing, EntityRef(Of Servicos))
		Me._Ferramentas = CType(Nothing, EntityRef(Of Ferramentas))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFerramentaServico", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdFerramentaServico() As Integer
		Get
			Return Me._IdFerramentaServico
		End Get
		Set
			If ((Me._IdFerramentaServico = value)  _
						= false) Then
				Me.OnIdFerramentaServicoChanging(value)
				Me.SendPropertyChanging
				Me._IdFerramentaServico = value
				Me.SendPropertyChanged("IdFerramentaServico")
				Me.OnIdFerramentaServicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFerramenta", DbType:="Int")>  _
	Public Property IdFerramenta() As System.Nullable(Of Integer)
		Get
			Return Me._IdFerramenta
		End Get
		Set
			If (Me._IdFerramenta.Equals(value) = false) Then
				If Me._Ferramentas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdFerramentaChanging(value)
				Me.SendPropertyChanging
				Me._IdFerramenta = value
				Me.SendPropertyChanged("IdFerramenta")
				Me.OnIdFerramentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdServico", DbType:="Int")>  _
	Public Property IdServico() As System.Nullable(Of Integer)
		Get
			Return Me._IdServico
		End Get
		Set
			If (Me._IdServico.Equals(value) = false) Then
				If Me._Servicos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdServicoChanging(value)
				Me.SendPropertyChanging
				Me._IdServico = value
				Me.SendPropertyChanged("IdServico")
				Me.OnIdServicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qtdade", DbType:="Int")>  _
	Public Property Qtdade() As System.Nullable(Of Integer)
		Get
			Return Me._Qtdade
		End Get
		Set
			If (Me._Qtdade.Equals(value) = false) Then
				Me.OnQtdadeChanging(value)
				Me.SendPropertyChanging
				Me._Qtdade = value
				Me.SendPropertyChanged("Qtdade")
				Me.OnQtdadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Servicos_FerramentasServico", Storage:="_Servicos", ThisKey:="IdServico", OtherKey:="IdServico", IsForeignKey:=true)>  _
	Public Property Servicos() As Servicos
		Get
			Return Me._Servicos.Entity
		End Get
		Set
			Dim previousValue As Servicos = Me._Servicos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Servicos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Servicos.Entity = Nothing
					previousValue.FerramentasServico.Remove(Me)
				End If
				Me._Servicos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FerramentasServico.Add(Me)
					Me._IdServico = value.IdServico
				Else
					Me._IdServico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Servicos")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ferramentas_FerramentasServico", Storage:="_Ferramentas", ThisKey:="IdFerramenta", OtherKey:="IdFerramenta", IsForeignKey:=true)>  _
	Public Property Ferramentas() As Ferramentas
		Get
			Return Me._Ferramentas.Entity
		End Get
		Set
			Dim previousValue As Ferramentas = Me._Ferramentas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ferramentas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ferramentas.Entity = Nothing
					previousValue.FerramentasServico.Remove(Me)
				End If
				Me._Ferramentas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FerramentasServico.Add(Me)
					Me._IdFerramenta = value.IdFerramenta
				Else
					Me._IdFerramenta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Ferramentas")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProfissionalServico")>  _
Partial Public Class ProfissionalServico
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdProfissionalServico As Integer
	
	Private _IdProfissional As System.Nullable(Of Integer)
	
	Private _IdServico As System.Nullable(Of Integer)
	
	Private _Qtdade As System.Nullable(Of Integer)
	
	Private _Cargos As EntityRef(Of Cargos)
	
	Private _Servicos As EntityRef(Of Servicos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdProfissionalServicoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProfissionalServicoChanged()
    End Sub
    Partial Private Sub OnIdProfissionalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProfissionalChanged()
    End Sub
    Partial Private Sub OnIdServicoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdServicoChanged()
    End Sub
    Partial Private Sub OnQtdadeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQtdadeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cargos = CType(Nothing, EntityRef(Of Cargos))
		Me._Servicos = CType(Nothing, EntityRef(Of Servicos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProfissionalServico", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdProfissionalServico() As Integer
		Get
			Return Me._IdProfissionalServico
		End Get
		Set
			If ((Me._IdProfissionalServico = value)  _
						= false) Then
				Me.OnIdProfissionalServicoChanging(value)
				Me.SendPropertyChanging
				Me._IdProfissionalServico = value
				Me.SendPropertyChanged("IdProfissionalServico")
				Me.OnIdProfissionalServicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProfissional", DbType:="Int")>  _
	Public Property IdProfissional() As System.Nullable(Of Integer)
		Get
			Return Me._IdProfissional
		End Get
		Set
			If (Me._IdProfissional.Equals(value) = false) Then
				If Me._Cargos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdProfissionalChanging(value)
				Me.SendPropertyChanging
				Me._IdProfissional = value
				Me.SendPropertyChanged("IdProfissional")
				Me.OnIdProfissionalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdServico", DbType:="Int")>  _
	Public Property IdServico() As System.Nullable(Of Integer)
		Get
			Return Me._IdServico
		End Get
		Set
			If (Me._IdServico.Equals(value) = false) Then
				If Me._Servicos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdServicoChanging(value)
				Me.SendPropertyChanging
				Me._IdServico = value
				Me.SendPropertyChanged("IdServico")
				Me.OnIdServicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qtdade", DbType:="Int")>  _
	Public Property Qtdade() As System.Nullable(Of Integer)
		Get
			Return Me._Qtdade
		End Get
		Set
			If (Me._Qtdade.Equals(value) = false) Then
				Me.OnQtdadeChanging(value)
				Me.SendPropertyChanging
				Me._Qtdade = value
				Me.SendPropertyChanged("Qtdade")
				Me.OnQtdadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cargos_ProfissionalServico", Storage:="_Cargos", ThisKey:="IdProfissional", OtherKey:="IdCargo", IsForeignKey:=true)>  _
	Public Property Cargos() As Cargos
		Get
			Return Me._Cargos.Entity
		End Get
		Set
			Dim previousValue As Cargos = Me._Cargos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cargos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cargos.Entity = Nothing
					previousValue.ProfissionalServico.Remove(Me)
				End If
				Me._Cargos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProfissionalServico.Add(Me)
					Me._IdProfissional = value.IdCargo
				Else
					Me._IdProfissional = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cargos")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Servicos_ProfissionalServico", Storage:="_Servicos", ThisKey:="IdServico", OtherKey:="IdServico", IsForeignKey:=true)>  _
	Public Property Servicos() As Servicos
		Get
			Return Me._Servicos.Entity
		End Get
		Set
			Dim previousValue As Servicos = Me._Servicos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Servicos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Servicos.Entity = Nothing
					previousValue.ProfissionalServico.Remove(Me)
				End If
				Me._Servicos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProfissionalServico.Add(Me)
					Me._IdServico = value.IdServico
				Else
					Me._IdServico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Servicos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChavesInterno")>  _
Partial Public Class ChavesInterno
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdChave As Integer
	
	Private _IdProduto As String
	
	Private _NumeroDaChave As String
	
	Private _ValidadeDias As System.Nullable(Of Integer)
	
	Private _DataLiberacaoo As System.Nullable(Of Date)
	
	Private _HoraLiberacao As System.Nullable(Of System.TimeSpan)
	
	Private _DataAtivacao As System.Nullable(Of Date)
	
	Private _HoraAtivacao As System.Nullable(Of System.TimeSpan)
	
	Private _CNPJ_CPF As String
	
	Private _IdClienteIARA As System.Nullable(Of Integer)
	
	Private _IPInt As String
	
	Private _MAC As String
	
	Private _IpExt As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChaveChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChaveChanged()
    End Sub
    Partial Private Sub OnIdProdutoChanging(value As String)
    End Sub
    Partial Private Sub OnIdProdutoChanged()
    End Sub
    Partial Private Sub OnNumeroDaChaveChanging(value As String)
    End Sub
    Partial Private Sub OnNumeroDaChaveChanged()
    End Sub
    Partial Private Sub OnValidadeDiasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnValidadeDiasChanged()
    End Sub
    Partial Private Sub OnDataLiberacaooChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDataLiberacaooChanged()
    End Sub
    Partial Private Sub OnHoraLiberacaoChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnHoraLiberacaoChanged()
    End Sub
    Partial Private Sub OnDataAtivacaoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDataAtivacaoChanged()
    End Sub
    Partial Private Sub OnHoraAtivacaoChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnHoraAtivacaoChanged()
    End Sub
    Partial Private Sub OnCNPJ_CPFChanging(value As String)
    End Sub
    Partial Private Sub OnCNPJ_CPFChanged()
    End Sub
    Partial Private Sub OnIdClienteIARAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdClienteIARAChanged()
    End Sub
    Partial Private Sub OnIPIntChanging(value As String)
    End Sub
    Partial Private Sub OnIPIntChanged()
    End Sub
    Partial Private Sub OnMACChanging(value As String)
    End Sub
    Partial Private Sub OnMACChanged()
    End Sub
    Partial Private Sub OnIpExtChanging(value As String)
    End Sub
    Partial Private Sub OnIpExtChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdChave", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdChave() As Integer
		Get
			Return Me._IdChave
		End Get
		Set
			If ((Me._IdChave = value)  _
						= false) Then
				Me.OnIdChaveChanging(value)
				Me.SendPropertyChanging
				Me._IdChave = value
				Me.SendPropertyChanged("IdChave")
				Me.OnIdChaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProduto", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IdProduto() As String
		Get
			Return Me._IdProduto
		End Get
		Set
			If (String.Equals(Me._IdProduto, value) = false) Then
				Me.OnIdProdutoChanging(value)
				Me.SendPropertyChanging
				Me._IdProduto = value
				Me.SendPropertyChanged("IdProduto")
				Me.OnIdProdutoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeroDaChave", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumeroDaChave() As String
		Get
			Return Me._NumeroDaChave
		End Get
		Set
			If (String.Equals(Me._NumeroDaChave, value) = false) Then
				Me.OnNumeroDaChaveChanging(value)
				Me.SendPropertyChanging
				Me._NumeroDaChave = value
				Me.SendPropertyChanged("NumeroDaChave")
				Me.OnNumeroDaChaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValidadeDias", DbType:="Int")>  _
	Public Property ValidadeDias() As System.Nullable(Of Integer)
		Get
			Return Me._ValidadeDias
		End Get
		Set
			If (Me._ValidadeDias.Equals(value) = false) Then
				Me.OnValidadeDiasChanging(value)
				Me.SendPropertyChanging
				Me._ValidadeDias = value
				Me.SendPropertyChanged("ValidadeDias")
				Me.OnValidadeDiasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataLiberacaoo", DbType:="Date")>  _
	Public Property DataLiberacaoo() As System.Nullable(Of Date)
		Get
			Return Me._DataLiberacaoo
		End Get
		Set
			If (Me._DataLiberacaoo.Equals(value) = false) Then
				Me.OnDataLiberacaooChanging(value)
				Me.SendPropertyChanging
				Me._DataLiberacaoo = value
				Me.SendPropertyChanged("DataLiberacaoo")
				Me.OnDataLiberacaooChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HoraLiberacao", DbType:="Time")>  _
	Public Property HoraLiberacao() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._HoraLiberacao
		End Get
		Set
			If (Me._HoraLiberacao.Equals(value) = false) Then
				Me.OnHoraLiberacaoChanging(value)
				Me.SendPropertyChanging
				Me._HoraLiberacao = value
				Me.SendPropertyChanged("HoraLiberacao")
				Me.OnHoraLiberacaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataAtivacao", DbType:="Date")>  _
	Public Property DataAtivacao() As System.Nullable(Of Date)
		Get
			Return Me._DataAtivacao
		End Get
		Set
			If (Me._DataAtivacao.Equals(value) = false) Then
				Me.OnDataAtivacaoChanging(value)
				Me.SendPropertyChanging
				Me._DataAtivacao = value
				Me.SendPropertyChanged("DataAtivacao")
				Me.OnDataAtivacaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HoraAtivacao", DbType:="Time")>  _
	Public Property HoraAtivacao() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._HoraAtivacao
		End Get
		Set
			If (Me._HoraAtivacao.Equals(value) = false) Then
				Me.OnHoraAtivacaoChanging(value)
				Me.SendPropertyChanging
				Me._HoraAtivacao = value
				Me.SendPropertyChanged("HoraAtivacao")
				Me.OnHoraAtivacaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CNPJ_CPF", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CNPJ_CPF() As String
		Get
			Return Me._CNPJ_CPF
		End Get
		Set
			If (String.Equals(Me._CNPJ_CPF, value) = false) Then
				Me.OnCNPJ_CPFChanging(value)
				Me.SendPropertyChanging
				Me._CNPJ_CPF = value
				Me.SendPropertyChanged("CNPJ_CPF")
				Me.OnCNPJ_CPFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdClienteIARA", DbType:="Int")>  _
	Public Property IdClienteIARA() As System.Nullable(Of Integer)
		Get
			Return Me._IdClienteIARA
		End Get
		Set
			If (Me._IdClienteIARA.Equals(value) = false) Then
				Me.OnIdClienteIARAChanging(value)
				Me.SendPropertyChanging
				Me._IdClienteIARA = value
				Me.SendPropertyChanged("IdClienteIARA")
				Me.OnIdClienteIARAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPInt", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IPInt() As String
		Get
			Return Me._IPInt
		End Get
		Set
			If (String.Equals(Me._IPInt, value) = false) Then
				Me.OnIPIntChanging(value)
				Me.SendPropertyChanging
				Me._IPInt = value
				Me.SendPropertyChanged("IPInt")
				Me.OnIPIntChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAC", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MAC() As String
		Get
			Return Me._MAC
		End Get
		Set
			If (String.Equals(Me._MAC, value) = false) Then
				Me.OnMACChanging(value)
				Me.SendPropertyChanging
				Me._MAC = value
				Me.SendPropertyChanged("MAC")
				Me.OnMACChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IpExt", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IpExt() As String
		Get
			Return Me._IpExt
		End Get
		Set
			If (String.Equals(Me._IpExt, value) = false) Then
				Me.OnIpExtChanging(value)
				Me.SendPropertyChanging
				Me._IpExt = value
				Me.SendPropertyChanged("IpExt")
				Me.OnIpExtChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrcamentoRapido")>  _
Partial Public Class OrcamentoRapido
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdOrcRapido As Integer
	
	Private _DataORc As System.Nullable(Of Date)
	
	Private _HrHorc As System.Nullable(Of System.TimeSpan)
	
	Private _IdVeiculo As System.Nullable(Of Integer)
	
	Private _IdOrcamento As System.Nullable(Of Integer)
	
	Private _Concluido As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdOrcRapidoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdOrcRapidoChanged()
    End Sub
    Partial Private Sub OnDataORcChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDataORcChanged()
    End Sub
    Partial Private Sub OnHrHorcChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnHrHorcChanged()
    End Sub
    Partial Private Sub OnIdVeiculoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdVeiculoChanged()
    End Sub
    Partial Private Sub OnIdOrcamentoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdOrcamentoChanged()
    End Sub
    Partial Private Sub OnConcluidoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnConcluidoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdOrcRapido", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdOrcRapido() As Integer
		Get
			Return Me._IdOrcRapido
		End Get
		Set
			If ((Me._IdOrcRapido = value)  _
						= false) Then
				Me.OnIdOrcRapidoChanging(value)
				Me.SendPropertyChanging
				Me._IdOrcRapido = value
				Me.SendPropertyChanged("IdOrcRapido")
				Me.OnIdOrcRapidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataORc", DbType:="Date")>  _
	Public Property DataORc() As System.Nullable(Of Date)
		Get
			Return Me._DataORc
		End Get
		Set
			If (Me._DataORc.Equals(value) = false) Then
				Me.OnDataORcChanging(value)
				Me.SendPropertyChanging
				Me._DataORc = value
				Me.SendPropertyChanged("DataORc")
				Me.OnDataORcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HrHorc", DbType:="Time")>  _
	Public Property HrHorc() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._HrHorc
		End Get
		Set
			If (Me._HrHorc.Equals(value) = false) Then
				Me.OnHrHorcChanging(value)
				Me.SendPropertyChanging
				Me._HrHorc = value
				Me.SendPropertyChanged("HrHorc")
				Me.OnHrHorcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdVeiculo", DbType:="Int")>  _
	Public Property IdVeiculo() As System.Nullable(Of Integer)
		Get
			Return Me._IdVeiculo
		End Get
		Set
			If (Me._IdVeiculo.Equals(value) = false) Then
				Me.OnIdVeiculoChanging(value)
				Me.SendPropertyChanging
				Me._IdVeiculo = value
				Me.SendPropertyChanged("IdVeiculo")
				Me.OnIdVeiculoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdOrcamento", DbType:="Int")>  _
	Public Property IdOrcamento() As System.Nullable(Of Integer)
		Get
			Return Me._IdOrcamento
		End Get
		Set
			If (Me._IdOrcamento.Equals(value) = false) Then
				Me.OnIdOrcamentoChanging(value)
				Me.SendPropertyChanging
				Me._IdOrcamento = value
				Me.SendPropertyChanged("IdOrcamento")
				Me.OnIdOrcamentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Concluido", DbType:="Bit")>  _
	Public Property Concluido() As System.Nullable(Of Boolean)
		Get
			Return Me._Concluido
		End Get
		Set
			If (Me._Concluido.Equals(value) = false) Then
				Me.OnConcluidoChanging(value)
				Me.SendPropertyChanging
				Me._Concluido = value
				Me.SendPropertyChanged("Concluido")
				Me.OnConcluidoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Fornecedores")>  _
Partial Public Class Fornecedores
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdFornecedor As Integer
	
	Private _Doc As String
	
	Private _Nome As String
	
	Private _Cep As String
	
	Private _IdEndereco As System.Nullable(Of Integer)
	
	Private _Numero As System.Nullable(Of Integer)
	
	Private _Compl As String
	
	Private _IdBairro As System.Nullable(Of Integer)
	
	Private _Bairro As String
	
	Private _IdCidade As System.Nullable(Of Integer)
	
	Private _Cidade As String
	
	Private _IdEstado As System.Nullable(Of Integer)
	
	Private _Estado As String
	
	Private _IdPais As System.Nullable(Of Integer)
	
	Private _Pais As String
	
	Private _Telefone As String
	
	Private _Apelido As String
	
	Private _Fornecedor As System.Nullable(Of Boolean)
	
	Private _Prestador As System.Nullable(Of Boolean)
	
	Private _Comissionado As System.Nullable(Of Boolean)
	
	Private _Beneficiario As System.Nullable(Of Boolean)
	
	Private _IE As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdFornecedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdFornecedorChanged()
    End Sub
    Partial Private Sub OnDocChanging(value As String)
    End Sub
    Partial Private Sub OnDocChanged()
    End Sub
    Partial Private Sub OnNomeChanging(value As String)
    End Sub
    Partial Private Sub OnNomeChanged()
    End Sub
    Partial Private Sub OnCepChanging(value As String)
    End Sub
    Partial Private Sub OnCepChanged()
    End Sub
    Partial Private Sub OnIdEnderecoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdEnderecoChanged()
    End Sub
    Partial Private Sub OnNumeroChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumeroChanged()
    End Sub
    Partial Private Sub OnComplChanging(value As String)
    End Sub
    Partial Private Sub OnComplChanged()
    End Sub
    Partial Private Sub OnIdBairroChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdBairroChanged()
    End Sub
    Partial Private Sub OnBairroChanging(value As String)
    End Sub
    Partial Private Sub OnBairroChanged()
    End Sub
    Partial Private Sub OnIdCidadeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdCidadeChanged()
    End Sub
    Partial Private Sub OnCidadeChanging(value As String)
    End Sub
    Partial Private Sub OnCidadeChanged()
    End Sub
    Partial Private Sub OnIdEstadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdEstadoChanged()
    End Sub
    Partial Private Sub OnEstadoChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoChanged()
    End Sub
    Partial Private Sub OnIdPaisChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdPaisChanged()
    End Sub
    Partial Private Sub OnPaisChanging(value As String)
    End Sub
    Partial Private Sub OnPaisChanged()
    End Sub
    Partial Private Sub OnTelefoneChanging(value As String)
    End Sub
    Partial Private Sub OnTelefoneChanged()
    End Sub
    Partial Private Sub OnApelidoChanging(value As String)
    End Sub
    Partial Private Sub OnApelidoChanged()
    End Sub
    Partial Private Sub OnFornecedorChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnFornecedorChanged()
    End Sub
    Partial Private Sub OnPrestadorChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPrestadorChanged()
    End Sub
    Partial Private Sub OnComissionadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnComissionadoChanged()
    End Sub
    Partial Private Sub OnBeneficiarioChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnBeneficiarioChanged()
    End Sub
    Partial Private Sub OnIEChanging(value As String)
    End Sub
    Partial Private Sub OnIEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFornecedor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdFornecedor() As Integer
		Get
			Return Me._IdFornecedor
		End Get
		Set
			If ((Me._IdFornecedor = value)  _
						= false) Then
				Me.OnIdFornecedorChanging(value)
				Me.SendPropertyChanging
				Me._IdFornecedor = value
				Me.SendPropertyChanged("IdFornecedor")
				Me.OnIdFornecedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Doc", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Doc() As String
		Get
			Return Me._Doc
		End Get
		Set
			If (String.Equals(Me._Doc, value) = false) Then
				Me.OnDocChanging(value)
				Me.SendPropertyChanging
				Me._Doc = value
				Me.SendPropertyChanged("Doc")
				Me.OnDocChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nome", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nome() As String
		Get
			Return Me._Nome
		End Get
		Set
			If (String.Equals(Me._Nome, value) = false) Then
				Me.OnNomeChanging(value)
				Me.SendPropertyChanging
				Me._Nome = value
				Me.SendPropertyChanged("Nome")
				Me.OnNomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cep", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cep() As String
		Get
			Return Me._Cep
		End Get
		Set
			If (String.Equals(Me._Cep, value) = false) Then
				Me.OnCepChanging(value)
				Me.SendPropertyChanging
				Me._Cep = value
				Me.SendPropertyChanged("Cep")
				Me.OnCepChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEndereco", DbType:="Int")>  _
	Public Property IdEndereco() As System.Nullable(Of Integer)
		Get
			Return Me._IdEndereco
		End Get
		Set
			If (Me._IdEndereco.Equals(value) = false) Then
				Me.OnIdEnderecoChanging(value)
				Me.SendPropertyChanging
				Me._IdEndereco = value
				Me.SendPropertyChanged("IdEndereco")
				Me.OnIdEnderecoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Numero", DbType:="Int")>  _
	Public Property Numero() As System.Nullable(Of Integer)
		Get
			Return Me._Numero
		End Get
		Set
			If (Me._Numero.Equals(value) = false) Then
				Me.OnNumeroChanging(value)
				Me.SendPropertyChanging
				Me._Numero = value
				Me.SendPropertyChanged("Numero")
				Me.OnNumeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Compl", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Compl() As String
		Get
			Return Me._Compl
		End Get
		Set
			If (String.Equals(Me._Compl, value) = false) Then
				Me.OnComplChanging(value)
				Me.SendPropertyChanging
				Me._Compl = value
				Me.SendPropertyChanged("Compl")
				Me.OnComplChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBairro", DbType:="Int")>  _
	Public Property IdBairro() As System.Nullable(Of Integer)
		Get
			Return Me._IdBairro
		End Get
		Set
			If (Me._IdBairro.Equals(value) = false) Then
				Me.OnIdBairroChanging(value)
				Me.SendPropertyChanging
				Me._IdBairro = value
				Me.SendPropertyChanged("IdBairro")
				Me.OnIdBairroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bairro", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Bairro() As String
		Get
			Return Me._Bairro
		End Get
		Set
			If (String.Equals(Me._Bairro, value) = false) Then
				Me.OnBairroChanging(value)
				Me.SendPropertyChanging
				Me._Bairro = value
				Me.SendPropertyChanged("Bairro")
				Me.OnBairroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCidade", DbType:="Int")>  _
	Public Property IdCidade() As System.Nullable(Of Integer)
		Get
			Return Me._IdCidade
		End Get
		Set
			If (Me._IdCidade.Equals(value) = false) Then
				Me.OnIdCidadeChanging(value)
				Me.SendPropertyChanging
				Me._IdCidade = value
				Me.SendPropertyChanged("IdCidade")
				Me.OnIdCidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cidade", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cidade() As String
		Get
			Return Me._Cidade
		End Get
		Set
			If (String.Equals(Me._Cidade, value) = false) Then
				Me.OnCidadeChanging(value)
				Me.SendPropertyChanging
				Me._Cidade = value
				Me.SendPropertyChanged("Cidade")
				Me.OnCidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstado", DbType:="Int")>  _
	Public Property IdEstado() As System.Nullable(Of Integer)
		Get
			Return Me._IdEstado
		End Get
		Set
			If (Me._IdEstado.Equals(value) = false) Then
				Me.OnIdEstadoChanging(value)
				Me.SendPropertyChanging
				Me._IdEstado = value
				Me.SendPropertyChanged("IdEstado")
				Me.OnIdEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Estado", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Estado() As String
		Get
			Return Me._Estado
		End Get
		Set
			If (String.Equals(Me._Estado, value) = false) Then
				Me.OnEstadoChanging(value)
				Me.SendPropertyChanging
				Me._Estado = value
				Me.SendPropertyChanged("Estado")
				Me.OnEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPais", DbType:="Int")>  _
	Public Property IdPais() As System.Nullable(Of Integer)
		Get
			Return Me._IdPais
		End Get
		Set
			If (Me._IdPais.Equals(value) = false) Then
				Me.OnIdPaisChanging(value)
				Me.SendPropertyChanging
				Me._IdPais = value
				Me.SendPropertyChanged("IdPais")
				Me.OnIdPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pais", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pais() As String
		Get
			Return Me._Pais
		End Get
		Set
			If (String.Equals(Me._Pais, value) = false) Then
				Me.OnPaisChanging(value)
				Me.SendPropertyChanging
				Me._Pais = value
				Me.SendPropertyChanged("Pais")
				Me.OnPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefone", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefone() As String
		Get
			Return Me._Telefone
		End Get
		Set
			If (String.Equals(Me._Telefone, value) = false) Then
				Me.OnTelefoneChanging(value)
				Me.SendPropertyChanging
				Me._Telefone = value
				Me.SendPropertyChanged("Telefone")
				Me.OnTelefoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Apelido", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Apelido() As String
		Get
			Return Me._Apelido
		End Get
		Set
			If (String.Equals(Me._Apelido, value) = false) Then
				Me.OnApelidoChanging(value)
				Me.SendPropertyChanging
				Me._Apelido = value
				Me.SendPropertyChanged("Apelido")
				Me.OnApelidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fornecedor", DbType:="Bit")>  _
	Public Property Fornecedor() As System.Nullable(Of Boolean)
		Get
			Return Me._Fornecedor
		End Get
		Set
			If (Me._Fornecedor.Equals(value) = false) Then
				Me.OnFornecedorChanging(value)
				Me.SendPropertyChanging
				Me._Fornecedor = value
				Me.SendPropertyChanged("Fornecedor")
				Me.OnFornecedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Prestador", DbType:="Bit")>  _
	Public Property Prestador() As System.Nullable(Of Boolean)
		Get
			Return Me._Prestador
		End Get
		Set
			If (Me._Prestador.Equals(value) = false) Then
				Me.OnPrestadorChanging(value)
				Me.SendPropertyChanging
				Me._Prestador = value
				Me.SendPropertyChanged("Prestador")
				Me.OnPrestadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comissionado", DbType:="Bit")>  _
	Public Property Comissionado() As System.Nullable(Of Boolean)
		Get
			Return Me._Comissionado
		End Get
		Set
			If (Me._Comissionado.Equals(value) = false) Then
				Me.OnComissionadoChanging(value)
				Me.SendPropertyChanging
				Me._Comissionado = value
				Me.SendPropertyChanged("Comissionado")
				Me.OnComissionadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Beneficiario", DbType:="Bit")>  _
	Public Property Beneficiario() As System.Nullable(Of Boolean)
		Get
			Return Me._Beneficiario
		End Get
		Set
			If (Me._Beneficiario.Equals(value) = false) Then
				Me.OnBeneficiarioChanging(value)
				Me.SendPropertyChanging
				Me._Beneficiario = value
				Me.SendPropertyChanged("Beneficiario")
				Me.OnBeneficiarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Ie", Storage:="_IE", DbType:="ntext", CanBeNull:=false)>  _
	Public Property IE() As String
		Get
			Return Me._IE
		End Get
		Set
			If (String.Equals(Me._IE, value) = false) Then
				Me.OnIEChanging(value)
				Me.SendPropertyChanging
				Me._IE = value
				Me.SendPropertyChanged("IE")
				Me.OnIEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Equipes")>  _
Partial Public Class Equipes
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEquipe As Integer
	
	Private _IdLider As System.Nullable(Of Integer)
	
	Private _NomeLider As String
	
	Private _CargoLider As String
	
	Private _UrlImagemLider As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEquipeChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEquipeChanged()
    End Sub
    Partial Private Sub OnIdLiderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdLiderChanged()
    End Sub
    Partial Private Sub OnNomeLiderChanging(value As String)
    End Sub
    Partial Private Sub OnNomeLiderChanged()
    End Sub
    Partial Private Sub OnCargoLiderChanging(value As String)
    End Sub
    Partial Private Sub OnCargoLiderChanged()
    End Sub
    Partial Private Sub OnUrlImagemLiderChanging(value As String)
    End Sub
    Partial Private Sub OnUrlImagemLiderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEquipe", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdEquipe() As Integer
		Get
			Return Me._IdEquipe
		End Get
		Set
			If ((Me._IdEquipe = value)  _
						= false) Then
				Me.OnIdEquipeChanging(value)
				Me.SendPropertyChanging
				Me._IdEquipe = value
				Me.SendPropertyChanged("IdEquipe")
				Me.OnIdEquipeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLider", DbType:="Int")>  _
	Public Property IdLider() As System.Nullable(Of Integer)
		Get
			Return Me._IdLider
		End Get
		Set
			If (Me._IdLider.Equals(value) = false) Then
				Me.OnIdLiderChanging(value)
				Me.SendPropertyChanging
				Me._IdLider = value
				Me.SendPropertyChanged("IdLider")
				Me.OnIdLiderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeLider", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeLider() As String
		Get
			Return Me._NomeLider
		End Get
		Set
			If (String.Equals(Me._NomeLider, value) = false) Then
				Me.OnNomeLiderChanging(value)
				Me.SendPropertyChanging
				Me._NomeLider = value
				Me.SendPropertyChanged("NomeLider")
				Me.OnNomeLiderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CargoLider", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CargoLider() As String
		Get
			Return Me._CargoLider
		End Get
		Set
			If (String.Equals(Me._CargoLider, value) = false) Then
				Me.OnCargoLiderChanging(value)
				Me.SendPropertyChanging
				Me._CargoLider = value
				Me.SendPropertyChanged("CargoLider")
				Me.OnCargoLiderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UrlImagemLider", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UrlImagemLider() As String
		Get
			Return Me._UrlImagemLider
		End Get
		Set
			If (String.Equals(Me._UrlImagemLider, value) = false) Then
				Me.OnUrlImagemLiderChanging(value)
				Me.SendPropertyChanging
				Me._UrlImagemLider = value
				Me.SendPropertyChanged("UrlImagemLider")
				Me.OnUrlImagemLiderChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ColaboradoEquipe")>  _
Partial Public Class ColaboradoEquipe
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdColaboradorEquipe As Integer
	
	Private _IdLider As System.Nullable(Of Integer)
	
	Private _NomeLider As String
	
	Private _CargoLider As String
	
	Private _UrlImagemLider As String
	
	Private _IdFuncionario As System.Nullable(Of Integer)
	
	Private _NomeFuncionario As String
	
	Private _CargoFuncionario As String
	
	Private _UrlImagemFuncionario As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdColaboradorEquipeChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdColaboradorEquipeChanged()
    End Sub
    Partial Private Sub OnIdLiderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdLiderChanged()
    End Sub
    Partial Private Sub OnNomeLiderChanging(value As String)
    End Sub
    Partial Private Sub OnNomeLiderChanged()
    End Sub
    Partial Private Sub OnCargoLiderChanging(value As String)
    End Sub
    Partial Private Sub OnCargoLiderChanged()
    End Sub
    Partial Private Sub OnUrlImagemLiderChanging(value As String)
    End Sub
    Partial Private Sub OnUrlImagemLiderChanged()
    End Sub
    Partial Private Sub OnIdFuncionarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdFuncionarioChanged()
    End Sub
    Partial Private Sub OnNomeFuncionarioChanging(value As String)
    End Sub
    Partial Private Sub OnNomeFuncionarioChanged()
    End Sub
    Partial Private Sub OnCargoFuncionarioChanging(value As String)
    End Sub
    Partial Private Sub OnCargoFuncionarioChanged()
    End Sub
    Partial Private Sub OnUrlImagemFuncionarioChanging(value As String)
    End Sub
    Partial Private Sub OnUrlImagemFuncionarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdColaboradorEquipe", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdColaboradorEquipe() As Integer
		Get
			Return Me._IdColaboradorEquipe
		End Get
		Set
			If ((Me._IdColaboradorEquipe = value)  _
						= false) Then
				Me.OnIdColaboradorEquipeChanging(value)
				Me.SendPropertyChanging
				Me._IdColaboradorEquipe = value
				Me.SendPropertyChanged("IdColaboradorEquipe")
				Me.OnIdColaboradorEquipeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLider", DbType:="Int")>  _
	Public Property IdLider() As System.Nullable(Of Integer)
		Get
			Return Me._IdLider
		End Get
		Set
			If (Me._IdLider.Equals(value) = false) Then
				Me.OnIdLiderChanging(value)
				Me.SendPropertyChanging
				Me._IdLider = value
				Me.SendPropertyChanged("IdLider")
				Me.OnIdLiderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeLider", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeLider() As String
		Get
			Return Me._NomeLider
		End Get
		Set
			If (String.Equals(Me._NomeLider, value) = false) Then
				Me.OnNomeLiderChanging(value)
				Me.SendPropertyChanging
				Me._NomeLider = value
				Me.SendPropertyChanged("NomeLider")
				Me.OnNomeLiderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CargoLider", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CargoLider() As String
		Get
			Return Me._CargoLider
		End Get
		Set
			If (String.Equals(Me._CargoLider, value) = false) Then
				Me.OnCargoLiderChanging(value)
				Me.SendPropertyChanging
				Me._CargoLider = value
				Me.SendPropertyChanged("CargoLider")
				Me.OnCargoLiderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UrlImagemLider", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UrlImagemLider() As String
		Get
			Return Me._UrlImagemLider
		End Get
		Set
			If (String.Equals(Me._UrlImagemLider, value) = false) Then
				Me.OnUrlImagemLiderChanging(value)
				Me.SendPropertyChanging
				Me._UrlImagemLider = value
				Me.SendPropertyChanged("UrlImagemLider")
				Me.OnUrlImagemLiderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdFuncionario", DbType:="Int")>  _
	Public Property IdFuncionario() As System.Nullable(Of Integer)
		Get
			Return Me._IdFuncionario
		End Get
		Set
			If (Me._IdFuncionario.Equals(value) = false) Then
				Me.OnIdFuncionarioChanging(value)
				Me.SendPropertyChanging
				Me._IdFuncionario = value
				Me.SendPropertyChanged("IdFuncionario")
				Me.OnIdFuncionarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeFuncionario", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomeFuncionario() As String
		Get
			Return Me._NomeFuncionario
		End Get
		Set
			If (String.Equals(Me._NomeFuncionario, value) = false) Then
				Me.OnNomeFuncionarioChanging(value)
				Me.SendPropertyChanging
				Me._NomeFuncionario = value
				Me.SendPropertyChanged("NomeFuncionario")
				Me.OnNomeFuncionarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CargoFuncionario", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CargoFuncionario() As String
		Get
			Return Me._CargoFuncionario
		End Get
		Set
			If (String.Equals(Me._CargoFuncionario, value) = false) Then
				Me.OnCargoFuncionarioChanging(value)
				Me.SendPropertyChanging
				Me._CargoFuncionario = value
				Me.SendPropertyChanged("CargoFuncionario")
				Me.OnCargoFuncionarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UrlImagemFuncionario", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UrlImagemFuncionario() As String
		Get
			Return Me._UrlImagemFuncionario
		End Get
		Set
			If (String.Equals(Me._UrlImagemFuncionario, value) = false) Then
				Me.OnUrlImagemFuncionarioChanging(value)
				Me.SendPropertyChanging
				Me._UrlImagemFuncionario = value
				Me.SendPropertyChanged("UrlImagemFuncionario")
				Me.OnUrlImagemFuncionarioChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VinculoProdutoServico")>  _
Partial Public Class VinculoProdutoServico
	
	Private _IdVinculoProdutoServico As Integer
	
	Private _IdProduto As System.Nullable(Of Integer)
	
	Private _IdServico As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdVinculoProdutoServico", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property IdVinculoProdutoServico() As Integer
		Get
			Return Me._IdVinculoProdutoServico
		End Get
		Set
			If ((Me._IdVinculoProdutoServico = value)  _
						= false) Then
				Me._IdVinculoProdutoServico = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProduto", DbType:="Int")>  _
	Public Property IdProduto() As System.Nullable(Of Integer)
		Get
			Return Me._IdProduto
		End Get
		Set
			If (Me._IdProduto.Equals(value) = false) Then
				Me._IdProduto = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdServico", DbType:="Int")>  _
	Public Property IdServico() As System.Nullable(Of Integer)
		Get
			Return Me._IdServico
		End Get
		Set
			If (Me._IdServico.Equals(value) = false) Then
				Me._IdServico = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VinculoProdutoProduto")>  _
Partial Public Class VinculoProdutoProduto
	
	Private _IdVinculoProdutoProduto As Integer
	
	Private _IdProduto As System.Nullable(Of Integer)
	
	Private _IdProdutoFinal As System.Nullable(Of Integer)
	
	Private _Qt As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdVinculoProdutoProduto", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property IdVinculoProdutoProduto() As Integer
		Get
			Return Me._IdVinculoProdutoProduto
		End Get
		Set
			If ((Me._IdVinculoProdutoProduto = value)  _
						= false) Then
				Me._IdVinculoProdutoProduto = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProduto", DbType:="Int")>  _
	Public Property IdProduto() As System.Nullable(Of Integer)
		Get
			Return Me._IdProduto
		End Get
		Set
			If (Me._IdProduto.Equals(value) = false) Then
				Me._IdProduto = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdProdutoFinal", DbType:="Int")>  _
	Public Property IdProdutoFinal() As System.Nullable(Of Integer)
		Get
			Return Me._IdProdutoFinal
		End Get
		Set
			If (Me._IdProdutoFinal.Equals(value) = false) Then
				Me._IdProdutoFinal = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qt", DbType:="Int")>  _
	Public Property Qt() As Integer
		Get
			Return Me._Qt
		End Get
		Set
			If ((Me._Qt = value)  _
						= false) Then
				Me._Qt = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BASE_CERTIFICADO")>  _
Partial Public Class BASE_CERTIFICADO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_EMPRESA As Integer
	
	Private _CNPJ As String
	
	Private _RAZAO As String
	
	Private _SERIAL_CERT As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_EMPRESAChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EMPRESAChanged()
    End Sub
    Partial Private Sub OnCNPJChanging(value As String)
    End Sub
    Partial Private Sub OnCNPJChanged()
    End Sub
    Partial Private Sub OnRAZAOChanging(value As String)
    End Sub
    Partial Private Sub OnRAZAOChanged()
    End Sub
    Partial Private Sub OnSERIAL_CERTChanging(value As String)
    End Sub
    Partial Private Sub OnSERIAL_CERTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_EMPRESA", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_EMPRESA() As Integer
		Get
			Return Me._ID_EMPRESA
		End Get
		Set
			If ((Me._ID_EMPRESA = value)  _
						= false) Then
				Me.OnID_EMPRESAChanging(value)
				Me.SendPropertyChanging
				Me._ID_EMPRESA = value
				Me.SendPropertyChanged("ID_EMPRESA")
				Me.OnID_EMPRESAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CNPJ", DbType:="VarChar(14)")>  _
	Public Property CNPJ() As String
		Get
			Return Me._CNPJ
		End Get
		Set
			If (String.Equals(Me._CNPJ, value) = false) Then
				Me.OnCNPJChanging(value)
				Me.SendPropertyChanging
				Me._CNPJ = value
				Me.SendPropertyChanged("CNPJ")
				Me.OnCNPJChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RAZAO", DbType:="VarChar(50)")>  _
	Public Property RAZAO() As String
		Get
			Return Me._RAZAO
		End Get
		Set
			If (String.Equals(Me._RAZAO, value) = false) Then
				Me.OnRAZAOChanging(value)
				Me.SendPropertyChanging
				Me._RAZAO = value
				Me.SendPropertyChanged("RAZAO")
				Me.OnRAZAOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERIAL_CERT", DbType:="VarChar(100)")>  _
	Public Property SERIAL_CERT() As String
		Get
			Return Me._SERIAL_CERT
		End Get
		Set
			If (String.Equals(Me._SERIAL_CERT, value) = false) Then
				Me.OnSERIAL_CERTChanging(value)
				Me.SendPropertyChanging
				Me._SERIAL_CERT = value
				Me.SendPropertyChanged("SERIAL_CERT")
				Me.OnSERIAL_CERTChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
